var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Purchases = /** @class */ (function (_super) {
    __extends(Purchases, _super);
    function Purchases() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Purchases.prototype.setup = function (apiKey, appUserID) { return cordova(this, "setup", { "sync": true }, arguments); };
    Purchases.prototype.setAllowSharingStoreAccount = function (allowSharing) { return cordova(this, "setAllowSharingStoreAccount", { "sync": true }, arguments); };
    Purchases.prototype.addAttributionData = function (data, network) { return cordova(this, "addAttributionData", { "sync": true }, arguments); };
    Purchases.prototype.getEntitlements = function () { return cordova(this, "getEntitlements", { "observable": true }, arguments); };
    Purchases.prototype.getProducts = function (productIdentifiers, type) {
        if (type === void 0) { type = ProductType.SUBS; }
        return cordova(this, "getProducts", { "successIndex": 1, "errorIndex": 2, "observable": true }, arguments);
    };
    Purchases.prototype.makePurchase = function (productIdentifier, oldSku, type) {
        if (oldSku === void 0) { oldSku = null; }
        if (type === void 0) { type = ProductType.SUBS; }
        return cordova(this, "makePurchase", { "successIndex": 1, "errorIndex": 2, "observable": true }, arguments);
    };
    Purchases.prototype.restoreTransactions = function () { return cordova(this, "restoreTransactions", { "observable": true }, arguments); };
    Purchases.prototype.getAppUserID = function () { return cordova(this, "getAppUserID", {}, arguments); };
    Purchases.prototype.createAlias = function (newAppUserID) { return cordova(this, "createAlias", { "observable": true }, arguments); };
    Purchases.prototype.identify = function (newAppUserID) { return cordova(this, "identify", { "observable": true }, arguments); };
    Purchases.prototype.reset = function () { return cordova(this, "reset", { "observable": true }, arguments); };
    Purchases.prototype.getPurchaserInfo = function () { return cordova(this, "getPurchaserInfo", { "observable": true }, arguments); };
    Purchases.prototype.onPurchaserInfoUpdated = function () { return cordova(this, "onPurchaserInfoUpdated", { "eventObservable": true, "event": "onPurchaserInfoUpdated", "element": "window" }, arguments); };
    Purchases.prototype.setDebugLogsEnabled = function (enabled) { return cordova(this, "setDebugLogsEnabled", { "sync": true }, arguments); };
    Purchases.pluginName = "Purchases";
    Purchases.plugin = "cordova-plugin-purchases";
    Purchases.pluginRef = "Purchases";
    Purchases.repo = "https://github.com/RevenueCat/cordova-plugin-purchases";
    Purchases.platforms = ["Android", "iOS"];
    Purchases = __decorate([
        Injectable({
            providedIn: 'root'
        })
    ], Purchases);
    return Purchases;
}(IonicNativePlugin));
export { Purchases };
export var ProductType;
(function (ProductType) {
    ProductType["SUBS"] = "subs";
    ProductType["INAPP"] = "inapp";
})(ProductType || (ProductType = {}));
export var ATTRIBUTION_NETWORKS;
(function (ATTRIBUTION_NETWORKS) {
    ATTRIBUTION_NETWORKS[ATTRIBUTION_NETWORKS["APPLE_SEARCH_ADS"] = 0] = "APPLE_SEARCH_ADS";
    ATTRIBUTION_NETWORKS[ATTRIBUTION_NETWORKS["ADJUST"] = 1] = "ADJUST";
    ATTRIBUTION_NETWORKS[ATTRIBUTION_NETWORKS["APPSFLYER"] = 2] = "APPSFLYER";
    ATTRIBUTION_NETWORKS[ATTRIBUTION_NETWORKS["BRANCH"] = 3] = "BRANCH";
    ATTRIBUTION_NETWORKS[ATTRIBUTION_NETWORKS["TENJIN"] = 4] = "TENJIN";
})(ATTRIBUTION_NETWORKS || (ATTRIBUTION_NETWORKS = {}));
//# sourceMappingURL=data:application/json;base64,