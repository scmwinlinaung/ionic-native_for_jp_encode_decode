var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var BaiduPushOriginal = /** @class */ (function (_super) {
    __extends(BaiduPushOriginal, _super);
    function BaiduPushOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaiduPushOriginal.prototype.startWork = function (apiKey) { return cordova(this, "startWork", {}, arguments); };
    BaiduPushOriginal.prototype.stopWork = function () { return cordova(this, "stopWork", {}, arguments); };
    BaiduPushOriginal.prototype.resumeWork = function () { return cordova(this, "resumeWork", {}, arguments); };
    BaiduPushOriginal.prototype.setTags = function (tags) { return cordova(this, "setTags", {}, arguments); };
    BaiduPushOriginal.prototype.delTags = function (tags) { return cordova(this, "delTags", {}, arguments); };
    BaiduPushOriginal.prototype.onMessage = function () { return cordova(this, "onMessage", { "observable": true }, arguments); };
    BaiduPushOriginal.prototype.onNotificationClicked = function () { return cordova(this, "onNotificationClicked", { "observable": true }, arguments); };
    BaiduPushOriginal.prototype.onNotificationArrived = function () { return cordova(this, "onNotificationArrived", { "observable": true }, arguments); };
    BaiduPushOriginal.pluginName = "BaiduPush";
    BaiduPushOriginal.plugin = "cordova-plugin-push-baidu";
    BaiduPushOriginal.pluginRef = "baiduPush";
    BaiduPushOriginal.repo = "https://github.com/Ti-webdev/cordova-plugin-push-baidu.git";
    BaiduPushOriginal.platforms = ["Android", "iOS"];
    return BaiduPushOriginal;
}(IonicNativePlugin));
var BaiduPush = new BaiduPushOriginal();
export { BaiduPush };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JhaWR1LXB1c2gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUE2R0gsNkJBQWlCOzs7O0lBTzlDLDZCQUFTLGFBQUMsTUFBYztJQVN4Qiw0QkFBUTtJQVNSLDhCQUFVO0lBVVYsMkJBQU8sYUFBQyxJQUFTO0lBVWpCLDJCQUFPLGFBQUMsSUFBUztJQVNqQiw2QkFBUztJQVNULHlDQUFxQjtJQVNyQix5Q0FBcUI7Ozs7OztvQkF2THZCO0VBK0crQixpQkFBaUI7U0FBbkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5kZWNsYXJlIGNvbnN0IGJhaWR1UHVzaDogYW55O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhaWR1UmVzcG9uc2U8VD4ge1xuICAvKipcbiAgICogVGhlIGNvcnJlc3BvbmRpbmcgQmFpZHUgU0RLIG1ldGhvZCBjYWxsZWQuXG4gICAqL1xuICB0eXBlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgZXJyb3IgY29kZSBjb3JyZXNwb25kaW5nIHRvIEJhaWR1J3MgcmVxdWVzdC5cbiAgICovXG4gIGVycm9yQ29kZT86IHN0cmluZztcbiAgLyoqXG4gICAqIFJlZ2lzdHJhdGlvbiBkYXRhIHJldmVsdmFudCB0byBzdWJzZXF1ZW50IGFjdGlvbnMuXG4gICAqL1xuICBkYXRhOiBUO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlZ2lzdHJhdGlvbkRhdGEge1xuICAvKipcbiAgICogVGhlIElEIHJlZ2lzdGVyZWQgdG8gQmFpZHUgZm9yIHRoZSBhcHAuXG4gICAqL1xuICBhcHBJZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIElEIHJlZ2lzdGVyZWQgdG8gQmFpZHUgZm9yIHRoZSBkZXZpY2UuXG4gICAqL1xuICB1c2VySWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBjaGFubmVsIElEIHJlZ2lzdGVyZWQgdG8gQmFpZHUgZm9yIHRoZSBhcHAuXG4gICAqL1xuICBjaGFubmVsSWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVbnJlZ2lzdHJhdGlvbkRhdGEge1xuICAvKipcbiAgICogVGhlIElEIGNvcnJlc3BvbmRpbmcgdG8gdGhlIEJhaWR1IHJlcXVlc3QuXG4gICAqL1xuICByZXF1ZXN0SWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUYWdEYXRhIHtcbiAgLyoqXG4gICAqIFRoZSBJRCBjb3JyZXNwb25kaW5nIHRvIHRoZSBCYWlkdSByZXF1ZXN0LlxuICAgKi9cbiAgcmVxdWVzdElkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2hhbm5lbCBJRCByZWdpc3RlcmVkIHRvIEJhaWR1IGZvciB0aGUgYXBwLlxuICAgKi9cbiAgY2hhbm5lbElkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBzdWNjZXNzZnVsbHkgc2V0L2RlbGV0ZWQgdGFncy5cbiAgICovXG4gIHN1Y2Vzc1RhZ3M6IHN0cmluZ1tdO1xuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgdW5zdWNjZXNzZnVsbHkgc2V0L2RlbGV0ZWQgdGFncy5cbiAgICovXG4gIGZhaWxUYWdzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOb3RpZmljYXRpb25EYXRhIHtcbiAgLyoqXG4gICAqIFRoZSB0aXRsZSBvZiB0aGUgbm90aWZpY2F0aW9uLlxuICAgKi9cbiAgdGl0bGU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgbm90aWZpY2F0aW9uLlxuICAgKi9cbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgLyoqXG4gICAqIEN1c3RvbSBjb250ZW50IGZvciB0aGUgbm90aWZpY2F0aW9uLlxuICAgKi9cbiAgY3VzdG9tQ29udGVudFN0cmluZz86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBCYWlkdSBQdXNoXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGZhY2lsaWF0ZXMgdGhlIHVzZSBvZiBCYWlkdSBQdXNoIG5vdGlmaWNhdGlvbnMuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYWlkdVB1c2ggfSBmcm9tICdAaW9uaWMtbmF0aXZlL2JhaWR1LXB1c2gvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiYWlkdVB1c2g6IEJhaWR1UHVzaCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5iYWlkdVB1c2guc3RhcnRXb3JrKCd4eHh4eHgnKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIEJhaWR1UmVzcG9uc2VcbiAqIFJlZ2lzdHJhdGlvbkRhdGFcbiAqIFVucmVnaXN0cmF0aW9uRGF0YVxuICogVGFnRGF0YVxuICogTm90aWZpY2F0aW9uRGF0YVxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0JhaWR1UHVzaCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXB1c2gtYmFpZHUnLFxuICBwbHVnaW5SZWY6ICdiYWlkdVB1c2gnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL1RpLXdlYmRldi9jb3Jkb3ZhLXBsdWdpbi1wdXNoLWJhaWR1LmdpdCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJhaWR1UHVzaCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHJlZ2lzdGVycyB0aGUgZGV2aWNlIHRvIEJhaWR1IENsb3VkIFB1c2ggc2VydmljZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBhcGlLZXkgQmFpZHUgQ2xvdWQgUHVzaCBBUEkga2V5LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8UmVnaXN0cmF0aW9uRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGFydFdvcmsoYXBpS2V5OiBzdHJpbmcpOiBQcm9taXNlPEJhaWR1UmVzcG9uc2U8UmVnaXN0cmF0aW9uRGF0YT4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgdW5yZWdpc3RlcnMgdGhlIGRldmljZSB0byBCYWlkdSBDbG91ZCBQdXNoIHNlcnZpY2VzLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8VW5yZWdpc3RyYXRpb25EYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BXb3JrKCk6IFByb21pc2U8QmFpZHVSZXNwb25zZTxVbnJlZ2lzdHJhdGlvbkRhdGE+PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHJlLWJpbmRzIHRoZSBkZXZpY2UgdG8gQmFpZHUgQ2xvdWQgUHVzaCBzZXJ2aWNlcy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPFJlZ2lzdHJhdGlvbkRhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVzdW1lV29yaygpOiBQcm9taXNlPEJhaWR1UmVzcG9uc2U8UmVnaXN0cmF0aW9uRGF0YT4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBzZXRzIHRhZ3MgaW4gdGhlIEJhaWR1IENsb3VkIFB1c2ggc2VydmljZXMuXG4gICAqIEBwYXJhbSB0YWdzIHthbnl9IHRhZ3MgVGhlIHRhZ3MgdG8gc2V0LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8VGFnRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRUYWdzKHRhZ3M6IGFueSk6IFByb21pc2U8QmFpZHVSZXNwb25zZTxUYWdEYXRhPj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHNldHMgdGFncyBpbiB0aGUgQmFpZHUgQ2xvdWQgUHVzaCBzZXJ2aWNlcy5cbiAgICogQHBhcmFtIHRhZ3Mge2FueX0gdGFncyBUaGUgdGFncyB0byBzZXQuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QmFpZHVSZXNwb25zZTxUYWdEYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRlbFRhZ3ModGFnczogYW55KTogUHJvbWlzZTxCYWlkdVJlc3BvbnNlPFRhZ0RhdGE+PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIGEgbm90aWZpY2F0aW9uIGlzIHJlY2lldmVkIG9uIHRoZSBmb3JlZ3JvdW5kLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8Tm90aWZpY2F0aW9uRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxuICAgKi9cbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlIH0pXG4gIG9uTWVzc2FnZSgpOiBPYnNlcnZhYmxlPEJhaWR1UmVzcG9uc2U8Tm90aWZpY2F0aW9uRGF0YT4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW4gdGhlIHVzZXIgdGFwcyBhIG5vdGlmaWNhdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb2JzZXJ2YWJsZTogdHJ1ZSB9KVxuICBvbk5vdGlmaWNhdGlvbkNsaWNrZWQoKTogT2JzZXJ2YWJsZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIGEgbm90aWZpY2F0aW9uIGlzIHJlY2lldmVkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8Tm90aWZpY2F0aW9uRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxuICAgKi9cbiAgQENvcmRvdmEoeyBvYnNlcnZhYmxlOiB0cnVlIH0pXG4gIG9uTm90aWZpY2F0aW9uQXJyaXZlZCgpOiBPYnNlcnZhYmxlPEJhaWR1UmVzcG9uc2U8Tm90aWZpY2F0aW9uRGF0YT4+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==