var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var BaiduPush = /** @class */ (function (_super) {
    __extends(BaiduPush, _super);
    function BaiduPush() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaiduPush.prototype.startWork = function (apiKey) { return cordova(this, "startWork", {}, arguments); };
    BaiduPush.prototype.stopWork = function () { return cordova(this, "stopWork", {}, arguments); };
    BaiduPush.prototype.resumeWork = function () { return cordova(this, "resumeWork", {}, arguments); };
    BaiduPush.prototype.setTags = function (tags) { return cordova(this, "setTags", {}, arguments); };
    BaiduPush.prototype.delTags = function (tags) { return cordova(this, "delTags", {}, arguments); };
    BaiduPush.prototype.onMessage = function () { return cordova(this, "onMessage", { "observable": true }, arguments); };
    BaiduPush.prototype.onNotificationClicked = function () { return cordova(this, "onNotificationClicked", { "observable": true }, arguments); };
    BaiduPush.prototype.onNotificationArrived = function () { return cordova(this, "onNotificationArrived", { "observable": true }, arguments); };
    BaiduPush.pluginName = "BaiduPush";
    BaiduPush.plugin = "cordova-plugin-push-baidu";
    BaiduPush.pluginRef = "baiduPush";
    BaiduPush.repo = "https://github.com/Ti-webdev/cordova-plugin-push-baidu.git";
    BaiduPush.platforms = ["Android", "iOS"];
    BaiduPush = __decorate([
        Injectable()
    ], BaiduPush);
    return BaiduPush;
}(IonicNativePlugin));
export { BaiduPush };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JhaWR1LXB1c2gvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUE2R0gsNkJBQWlCOzs7O0lBTzlDLDZCQUFTLGFBQUMsTUFBYztJQVN4Qiw0QkFBUTtJQVNSLDhCQUFVO0lBVVYsMkJBQU8sYUFBQyxJQUFTO0lBVWpCLDJCQUFPLGFBQUMsSUFBUztJQVNqQiw2QkFBUztJQVNULHlDQUFxQjtJQVNyQix5Q0FBcUI7Ozs7OztJQXhFVixTQUFTO1FBRHJCLFVBQVUsRUFBRTtPQUNBLFNBQVM7b0JBL0d0QjtFQStHK0IsaUJBQWlCO1NBQW5DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZGVjbGFyZSBjb25zdCBiYWlkdVB1c2g6IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBCYWlkdVJlc3BvbnNlPFQ+IHtcbiAgLyoqXG4gICAqIFRoZSBjb3JyZXNwb25kaW5nIEJhaWR1IFNESyBtZXRob2QgY2FsbGVkLlxuICAgKi9cbiAgdHlwZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGVycm9yIGNvZGUgY29ycmVzcG9uZGluZyB0byBCYWlkdSdzIHJlcXVlc3QuXG4gICAqL1xuICBlcnJvckNvZGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBSZWdpc3RyYXRpb24gZGF0YSByZXZlbHZhbnQgdG8gc3Vic2VxdWVudCBhY3Rpb25zLlxuICAgKi9cbiAgZGF0YTogVDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWdpc3RyYXRpb25EYXRhIHtcbiAgLyoqXG4gICAqIFRoZSBJRCByZWdpc3RlcmVkIHRvIEJhaWR1IGZvciB0aGUgYXBwLlxuICAgKi9cbiAgYXBwSWQ6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBJRCByZWdpc3RlcmVkIHRvIEJhaWR1IGZvciB0aGUgZGV2aWNlLlxuICAgKi9cbiAgdXNlcklkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2hhbm5lbCBJRCByZWdpc3RlcmVkIHRvIEJhaWR1IGZvciB0aGUgYXBwLlxuICAgKi9cbiAgY2hhbm5lbElkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVW5yZWdpc3RyYXRpb25EYXRhIHtcbiAgLyoqXG4gICAqIFRoZSBJRCBjb3JyZXNwb25kaW5nIHRvIHRoZSBCYWlkdSByZXF1ZXN0LlxuICAgKi9cbiAgcmVxdWVzdElkOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFnRGF0YSB7XG4gIC8qKlxuICAgKiBUaGUgSUQgY29ycmVzcG9uZGluZyB0byB0aGUgQmFpZHUgcmVxdWVzdC5cbiAgICovXG4gIHJlcXVlc3RJZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGNoYW5uZWwgSUQgcmVnaXN0ZXJlZCB0byBCYWlkdSBmb3IgdGhlIGFwcC5cbiAgICovXG4gIGNoYW5uZWxJZDogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGxpc3Qgb2Ygc3VjY2Vzc2Z1bGx5IHNldC9kZWxldGVkIHRhZ3MuXG4gICAqL1xuICBzdWNlc3NUYWdzOiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIHVuc3VjY2Vzc2Z1bGx5IHNldC9kZWxldGVkIHRhZ3MuXG4gICAqL1xuICBmYWlsVGFnczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm90aWZpY2F0aW9uRGF0YSB7XG4gIC8qKlxuICAgKiBUaGUgdGl0bGUgb2YgdGhlIG5vdGlmaWNhdGlvbi5cbiAgICovXG4gIHRpdGxlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIG5vdGlmaWNhdGlvbi5cbiAgICovXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDdXN0b20gY29udGVudCBmb3IgdGhlIG5vdGlmaWNhdGlvbi5cbiAgICovXG4gIGN1c3RvbUNvbnRlbnRTdHJpbmc/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogQG5hbWUgQmFpZHUgUHVzaFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBmYWNpbGlhdGVzIHRoZSB1c2Ugb2YgQmFpZHUgUHVzaCBub3RpZmljYXRpb25zLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQmFpZHVQdXNoIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9iYWlkdS1wdXNoL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYmFpZHVQdXNoOiBCYWlkdVB1c2gpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHRoaXMuYmFpZHVQdXNoLnN0YXJ0V29yaygneHh4eHh4JylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBCYWlkdVJlc3BvbnNlXG4gKiBSZWdpc3RyYXRpb25EYXRhXG4gKiBVbnJlZ2lzdHJhdGlvbkRhdGFcbiAqIFRhZ0RhdGFcbiAqIE5vdGlmaWNhdGlvbkRhdGFcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdCYWlkdVB1c2gnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1wdXNoLWJhaWR1JyxcbiAgcGx1Z2luUmVmOiAnYmFpZHVQdXNoJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9UaS13ZWJkZXYvY29yZG92YS1wbHVnaW4tcHVzaC1iYWlkdS5naXQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYWlkdVB1c2ggZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCByZWdpc3RlcnMgdGhlIGRldmljZSB0byBCYWlkdSBDbG91ZCBQdXNoIHNlcnZpY2VzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gYXBpS2V5IEJhaWR1IENsb3VkIFB1c2ggQVBJIGtleS5cbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPFJlZ2lzdHJhdGlvbkRhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RhcnRXb3JrKGFwaUtleTogc3RyaW5nKTogUHJvbWlzZTxCYWlkdVJlc3BvbnNlPFJlZ2lzdHJhdGlvbkRhdGE+PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIHVucmVnaXN0ZXJzIHRoZSBkZXZpY2UgdG8gQmFpZHUgQ2xvdWQgUHVzaCBzZXJ2aWNlcy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPFVucmVnaXN0cmF0aW9uRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdG9wV29yaygpOiBQcm9taXNlPEJhaWR1UmVzcG9uc2U8VW5yZWdpc3RyYXRpb25EYXRhPj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCByZS1iaW5kcyB0aGUgZGV2aWNlIHRvIEJhaWR1IENsb3VkIFB1c2ggc2VydmljZXMuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QmFpZHVSZXNwb25zZTxSZWdpc3RyYXRpb25EYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlc3VtZVdvcmsoKTogUHJvbWlzZTxCYWlkdVJlc3BvbnNlPFJlZ2lzdHJhdGlvbkRhdGE+PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgc2V0cyB0YWdzIGluIHRoZSBCYWlkdSBDbG91ZCBQdXNoIHNlcnZpY2VzLlxuICAgKiBAcGFyYW0gdGFncyB7YW55fSB0YWdzIFRoZSB0YWdzIHRvIHNldC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPFRhZ0RhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0VGFncyh0YWdzOiBhbnkpOiBQcm9taXNlPEJhaWR1UmVzcG9uc2U8VGFnRGF0YT4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBzZXRzIHRhZ3MgaW4gdGhlIEJhaWR1IENsb3VkIFB1c2ggc2VydmljZXMuXG4gICAqIEBwYXJhbSB0YWdzIHthbnl9IHRhZ3MgVGhlIHRhZ3MgdG8gc2V0LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEJhaWR1UmVzcG9uc2U8VGFnRGF0YT4+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBCYWlkdVJlc3BvbnNlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkZWxUYWdzKHRhZ3M6IGFueSk6IFByb21pc2U8QmFpZHVSZXNwb25zZTxUYWdEYXRhPj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiBhIG5vdGlmaWNhdGlvbiBpcyByZWNpZXZlZCBvbiB0aGUgZm9yZWdyb3VuZC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb2JzZXJ2YWJsZTogdHJ1ZSB9KVxuICBvbk1lc3NhZ2UoKTogT2JzZXJ2YWJsZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuIHRoZSB1c2VyIHRhcHMgYSBub3RpZmljYXRpb24uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QmFpZHVSZXNwb25zZTxOb3RpZmljYXRpb25EYXRhPj59IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIEJhaWR1UmVzcG9uc2UuXG4gICAqL1xuICBAQ29yZG92YSh7IG9ic2VydmFibGU6IHRydWUgfSlcbiAgb25Ob3RpZmljYXRpb25DbGlja2VkKCk6IE9ic2VydmFibGU8QmFpZHVSZXNwb25zZTxOb3RpZmljYXRpb25EYXRhPj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbiBhIG5vdGlmaWNhdGlvbiBpcyByZWNpZXZlZC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+Pn0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgQmFpZHVSZXNwb25zZS5cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb2JzZXJ2YWJsZTogdHJ1ZSB9KVxuICBvbk5vdGlmaWNhdGlvbkFycml2ZWQoKTogT2JzZXJ2YWJsZTxCYWlkdVJlc3BvbnNlPE5vdGlmaWNhdGlvbkRhdGE+PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=