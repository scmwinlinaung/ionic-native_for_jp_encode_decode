var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SiriShortcuts = /** @class */ (function (_super) {
    __extends(SiriShortcuts, _super);
    function SiriShortcuts() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SiriShortcuts.prototype.donate = function (options) { return cordova(this, "donate", {}, arguments); };
    SiriShortcuts.prototype.present = function (options) { return cordova(this, "present", {}, arguments); };
    SiriShortcuts.prototype.remove = function (persistentIdentifiers) { return cordova(this, "remove", {}, arguments); };
    SiriShortcuts.prototype.removeAll = function () { return cordova(this, "removeAll", {}, arguments); };
    SiriShortcuts.prototype.getActivatedShortcut = function (options) { return cordova(this, "getActivatedShortcut", {}, arguments); };
    SiriShortcuts.pluginName = "SiriShortcuts";
    SiriShortcuts.plugin = "cordova-plugin-siri-shortcuts";
    SiriShortcuts.pluginRef = "cordova.plugins.SiriShortcuts";
    SiriShortcuts.repo = "https://github.com/bartwesselink/cordova-plugin-siri-shortcuts";
    SiriShortcuts.platforms = ["iOS"];
    SiriShortcuts = __decorate([
        Injectable()
    ], SiriShortcuts);
    return SiriShortcuts;
}(IonicNativePlugin));
export { SiriShortcuts };
//# sourceMappingURL=data:application/json;base64,