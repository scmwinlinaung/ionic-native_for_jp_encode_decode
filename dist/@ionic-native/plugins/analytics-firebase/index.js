var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
var AnalyticsFirebaseOriginal = /** @class */ (function (_super) {
    __extends(AnalyticsFirebaseOriginal, _super);
    function AnalyticsFirebaseOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnalyticsFirebaseOriginal.prototype.logEvent = function (eventName, eventParams) { return cordova(this, "logEvent", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.resetAnalyticsData = function () { return cordova(this, "resetAnalyticsData", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setAnalyticsCollectionEnabled = function (enabled) { return cordova(this, "setAnalyticsCollectionEnabled", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setCurrentScreen = function (screenName) { return cordova(this, "setCurrentScreen", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setMinimumSessionDuration = function (milliseconds) { return cordova(this, "setMinimumSessionDuration", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setSessionTimeoutDuration = function (milliseconds) { return cordova(this, "setSessionTimeoutDuration", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    AnalyticsFirebaseOriginal.prototype.setUserProperty = function (userPropertyName, userPropertyValue) { return cordova(this, "setUserProperty", {}, arguments); };
    Object.defineProperty(AnalyticsFirebaseOriginal.prototype, "DEFAULT_EVENTS", {
        get: function () { return cordovaPropertyGet(this, "DEFAULT_EVENTS"); },
        set: function (value) { cordovaPropertySet(this, "DEFAULT_EVENTS", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnalyticsFirebaseOriginal.prototype, "DEFAULT_PARAMS", {
        get: function () { return cordovaPropertyGet(this, "DEFAULT_PARAMS"); },
        set: function (value) { cordovaPropertySet(this, "DEFAULT_PARAMS", value); },
        enumerable: true,
        configurable: true
    });
    AnalyticsFirebaseOriginal.pluginName = "AnalyticsFirebase";
    AnalyticsFirebaseOriginal.plugin = "cordova-plugin-analytics";
    AnalyticsFirebaseOriginal.pluginRef = "analytics";
    AnalyticsFirebaseOriginal.repo = "https://github.com/appfeel/analytics-google";
    AnalyticsFirebaseOriginal.platforms = ["Android", "iOS"];
    return AnalyticsFirebaseOriginal;
}(IonicNativePlugin));
var AnalyticsFirebase = new AnalyticsFirebaseOriginal();
export { AnalyticsFirebase };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FuYWx5dGljcy1maXJlYmFzZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyxzRUFBdUQsTUFBTSxvQkFBb0IsQ0FBQzs7SUE4RGxELHFDQUFpQjs7OztJQThHdEQsb0NBQVEsYUFBQyxTQUFpQixFQUFFLFdBQW9CO0lBU2hELDhDQUFrQjtJQVVsQix5REFBNkIsYUFBQyxPQUFnQjtJQVc5Qyw0Q0FBZ0IsYUFBQyxVQUFrQjtJQVVuQyxxREFBeUIsYUFBQyxZQUFvQjtJQVU5QyxxREFBeUIsYUFBQyxZQUFvQjtJQVU5QyxxQ0FBUyxhQUFDLE1BQWM7SUFXeEIsMkNBQWUsYUFBQyxnQkFBd0IsRUFBRSxpQkFBeUI7MEJBOUsxRCw2Q0FBYzs7Ozs7OzBCQXdDZCw2Q0FBYzs7Ozs7Ozs7Ozs7NEJBOUd6QjtFQStEdUMsaUJBQWlCO1NBQTNDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIENvcmRvdmFQcm9wZXJ0eSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgQW5hbHl0aWNzIEZpcmViYXNlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdvb2dsZSBBbmFseXRpY3MgRmlyZWJhc2UgcGx1Z2luIGZvciBJb25pYyBOYXRpdmUgYXBwcy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEFuYWx5dGljc0ZpcmViYXNlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9hbmFseXRpY3MtZmlyZWJhc2UnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFuYWx5dGljc0ZpcmViYXNlOiBBbmFseXRpY3NGaXJlYmFzZSkgeyB9XG4gKlxuICogLy8gVHJhY2sgYW4gZXZlbnQgd2l0aCBkZWZhdWx0IGV2ZW50cyBhbmQgcGFyYW1zXG4gKiBjb25zdCBldmVudFBhcmFtcyA9IHt9O1xuICogZXZlbnRQYXJhbXNbdGhpcy5hbmFseXRpY3NGaXJlYmFzZS5ERUZBVUxUX1BBUkFNUy5MRVZFTF0gPSAyOTtcbiAqIHRoaXMuYW5hbHl0aWNzRmlyZWJhc2UubG9nRXZlbnQodGhpcy5hbmFseXRpY3NGaXJlYmFzZS5ERUZBVUxUX0VWRU5UUy5MRVZFTF9VUCwgZXZlbnRQYXJhbXMpXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdFdmVudCBzdWNjZXNzZnVsbHkgdHJhY2tlZCcpKVxuICogICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvciB0cmFja2luZyBldmVudDonLCBlcnIpKTtcbiAqXG4gKiAvLyBUcmFjayBhbiBldmVudCB3aXRoIGN1c3RvbSBldmVudHMgYW5kIHBhcmFtc1xuICogY29uc3QgZXZlbnRQYXJhbXMgPSB7fTtcbiAqIGV2ZW50UGFyYW1zWydteS1wcm9wJ10gPSAyOTtcbiAqIHRoaXMuYW5hbHl0aWNzRmlyZWJhc2UubG9nRXZlbnQoJ215LWV2ZW50JywgZXZlbnRQYXJhbXMpXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdFdmVudCBzdWNjZXNzZnVsbHkgdHJhY2tlZCcpKVxuICogICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvciB0cmFja2luZyBldmVudDonLCBlcnIpKTtcbiAqXG4gKlxuICogLy8gUmVzZXQgYW5hbHl0aWNzIGRhdGFcbiAqIHRoaXMuYW5hbHl0aWNzRmlyZWJhc2UucmVzZXRBbmFseXRpY3NEYXRhKClcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0FuYWx5dGljcyBkYXRhIGhhdmUgYmVlbiByZXNldCcpKVxuICogICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvciByZXNldHRpbmcgYW5hbHl0aWNzIGRhdGE6JywgZXJyKSk7XG4gKlxuICpcbiAqIC8vIFRyYWNrIGEgc2NyZWVuIHZpZXdcbiAqIHRoaXMuYW5hbHl0aWNzRmlyZWJhc2Uuc2V0Q3VycmVudFNjcmVlbignSG9tZScpXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdWaWV3IHN1Y2Nlc3NmdWxseSB0cmFja2VkJykpXG4gKiAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yIHRyYWNraW5nIHZpZXc6JywgZXJyKSk7XG4gKlxuICpcbiAqIC8vIFNldCB1c2VyIGlkXG4gKiB0aGlzLmFuYWx5dGljc0ZpcmViYXNlLnNldFVzZXJJZCgnVVNFUi1JRCcpXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdVc2VyIGlkIHN1Y2Nlc3NmdWxseSBzZXQnKSlcbiAqICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3Igc2V0dGluZyB1c2VyIGlkOicsIGVycikpO1xuICpcbiAqXG4gKiAvLyBTZXQgdXNlciBwcm9wZXJ0eSBmcm9tIGRlZmF1bHQgcHJvcGVydGllc1xuICogdGhpcy5hbmFseXRpY3NGaXJlYmFzZS5zZXRVc2VyUHJvcGVydHkoJ0tFWScsICdWQUxVRScpXG4gKiAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdVc2VyIHByb3BlcnR5IHN1Y2Nlc3NmdWxseSBzZXQnKSlcbiAqICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3Igc2V0dGluZyB1c2VyIHByb3BlcnR5OicsIGVycikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0FuYWx5dGljc0ZpcmViYXNlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYW5hbHl0aWNzJyxcbiAgcGx1Z2luUmVmOiAnYW5hbHl0aWNzJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcHBmZWVsL2FuYWx5dGljcy1nb29nbGUnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbmFseXRpY3NGaXJlYmFzZSBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFRoaXMgZW51bSByZXByZXNlbnRzIEFuYWx5dGljc0ZpcmViYXNlIGRlZmF1bHQgZXZlbnRzLlxuICAgKiBVc2Ugb25lIG9mIHRoZXNlIGRlZmF1bHQgZXZlbnRzIG9yIGEgY3VzdG9tIGV2ZW50XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgQENvcmRvdmFQcm9wZXJ0eSgpXG4gIHJlYWRvbmx5IERFRkFVTFRfRVZFTlRTOiB7XG4gICAgQUREX1BBWU1FTlRfSU5GTzogc3RyaW5nO1xuICAgIEFERF9UT19DQVJUOiBzdHJpbmc7XG4gICAgQUREX1RPX1dJU0hMSVNUOiBzdHJpbmc7XG4gICAgQVBQX09QRU46IHN0cmluZztcbiAgICBCRUdJTl9DSEVDS09VVDogc3RyaW5nO1xuICAgIENBTVBBSUdOX0RFVEFJTFM6IHN0cmluZztcbiAgICBDSEVDS09VVF9QUk9HUkVTUzogc3RyaW5nO1xuICAgIEVBUk5fVklSVFVBTF9DVVJSRU5DWTogc3RyaW5nO1xuICAgIEVDT01NRVJDRV9QVVJDSEFTRTogc3RyaW5nO1xuICAgIEdFTkVSQVRFX0xFQUQ6IHN0cmluZztcbiAgICBKT0lOX0dST1VQOiBzdHJpbmc7XG4gICAgTEVWRUxfRU5EOiBzdHJpbmc7XG4gICAgTEVWRUxfU1RBUlQ6IHN0cmluZztcbiAgICBMRVZFTF9VUDogc3RyaW5nO1xuICAgIExPR0lOOiBzdHJpbmc7XG4gICAgUE9TVF9TQ09SRTogc3RyaW5nO1xuICAgIFBSRVNFTlRfT0ZGRVI6IHN0cmluZztcbiAgICBQVVJDSEFTRV9SRUZVTkQ6IHN0cmluZztcbiAgICBSRU1PVkVfRlJPTV9DQVJUOiBzdHJpbmc7XG4gICAgU0VBUkNIOiBzdHJpbmc7XG4gICAgU0VMRUNUX0NPTlRFTlQ6IHN0cmluZztcbiAgICBTRVRfQ0hFQ0tPVVRfT1BUSU9OOiBzdHJpbmc7XG4gICAgU0hBUkU6IHN0cmluZztcbiAgICBTSUdOX1VQOiBzdHJpbmc7XG4gICAgU1BFTkRfVklSVFVBTF9DVVJSRU5DWTogc3RyaW5nO1xuICAgIFRVVE9SSUFMX0JFR0lOOiBzdHJpbmc7XG4gICAgVFVUT1JJQUxfQ09NUExFVEU6IHN0cmluZztcbiAgICBVTkxPQ0tfQUNISUVWRU1FTlQ6IHN0cmluZztcbiAgICBWSUVXX0lURU06IHN0cmluZztcbiAgICBWSUVXX0lURU1fTElTVDogc3RyaW5nO1xuICAgIFZJRVdfU0VBUkNIX1JFU1VMVFM6IHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogVGhpcyBlbnVtIHJlcHJlc2VudHMgQW5hbHl0aWNzRmlyZWJhc2UgZGVmYXVsdCBwYXJhbXMuXG4gICAqIFVzZSBvbmUgb2YgdGhlc2UgZGVmYXVsdCBwYXJhbXMgb3IgYSBjdXN0b20gcGFyYW1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBAQ29yZG92YVByb3BlcnR5KClcbiAgcmVhZG9ubHkgREVGQVVMVF9QQVJBTVM6IHtcbiAgICBBQ0hJRVZFTUVOVF9JRDogc3RyaW5nO1xuICAgIEFDTElEOiBzdHJpbmc7XG4gICAgQUZGSUxJQVRJT046IHN0cmluZztcbiAgICBDQU1QQUlHTjogc3RyaW5nO1xuICAgIENIQVJBQ1RFUjogc3RyaW5nO1xuICAgIENIRUNLT1VUX09QVElPTjogc3RyaW5nO1xuICAgIENIRUNLT1VUX1NURVA6IHN0cmluZztcbiAgICBDT05URU5UOiBzdHJpbmc7XG4gICAgQ09OVEVOVF9UWVBFOiBzdHJpbmc7XG4gICAgQ09VUE9OOiBzdHJpbmc7XG4gICAgQ1AxOiBzdHJpbmc7XG4gICAgQ1JFQVRJVkVfTkFNRTogc3RyaW5nO1xuICAgIENSRUFUSVZFX1NMT1Q6IHN0cmluZztcbiAgICBDVVJSRU5DWTogc3RyaW5nO1xuICAgIERFU1RJTkFUSU9OOiBzdHJpbmc7XG4gICAgRU5EX0RBVEU6IHN0cmluZztcbiAgICBGTElHSFRfTlVNQkVSOiBzdHJpbmc7XG4gICAgR1JPVVBfSUQ6IHN0cmluZztcbiAgICBJTkRFWDogc3RyaW5nO1xuICAgIElURU1fQlJBTkQ6IHN0cmluZztcbiAgICBJVEVNX0NBVEVHT1JZOiBzdHJpbmc7XG4gICAgSVRFTV9JRDogc3RyaW5nO1xuICAgIElURU1fTElTVDogc3RyaW5nO1xuICAgIElURU1fTE9DQVRJT05fSUQ6IHN0cmluZztcbiAgICBJVEVNX05BTUU6IHN0cmluZztcbiAgICBJVEVNX1ZBUklBTlQ6IHN0cmluZztcbiAgICBMRVZFTDogc3RyaW5nO1xuICAgIExFVkVMX05BTUU6IHN0cmluZztcbiAgICBMT0NBVElPTjogc3RyaW5nO1xuICAgIE1FRElVTTogc3RyaW5nO1xuICAgIE1FVEhPRDogc3RyaW5nO1xuICAgIE5VTUJFUl9PRl9OSUdIVFM6IHN0cmluZztcbiAgICBOVU1CRVJfT0ZfUEFTU0VOR0VSUzogc3RyaW5nO1xuICAgIE5VTUJFUl9PRl9ST09NUzogc3RyaW5nO1xuICAgIE9SSUdJTjogc3RyaW5nO1xuICAgIFBSSUNFOiBzdHJpbmc7XG4gICAgUVVBTlRJVFk6IHN0cmluZztcbiAgICBTQ09SRTogc3RyaW5nO1xuICAgIFNFQVJDSF9URVJNOiBzdHJpbmc7XG4gICAgU0hJUFBJTkc6IHN0cmluZztcbiAgICBTT1VSQ0U6IHN0cmluZztcbiAgICBTVEFSVF9EQVRFOiBzdHJpbmc7XG4gICAgU1VDQ0VTUzogc3RyaW5nO1xuICAgIFRBWDogc3RyaW5nO1xuICAgIFRFUk06IHN0cmluZztcbiAgICBUUkFOU0FDVElPTl9JRDogc3RyaW5nO1xuICAgIFRSQVZFTF9DTEFTUzogc3RyaW5nO1xuICAgIFZBTFVFOiBzdHJpbmc7XG4gICAgVklSVFVBTF9DVVJSRU5DWV9OQU1FOiBzdHJpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIExvZ3MgYW4gYXBwIGV2ZW50LiBUaGUgZXZlbnQgY2FuIGhhdmUgdXAgdG8gMjUgcGFyYW1ldGVycy5cbiAgICogRXZlbnRzIHdpdGggdGhlIHNhbWUgbmFtZSBtdXN0IGhhdmUgdGhlIHNhbWUgcGFyYW1ldGVycy5cbiAgICogVXAgdG8gNTAwIGV2ZW50IG5hbWVzIGFyZSBzdXBwb3J0ZWQuXG4gICAqIFVzaW5nIHByZWRlZmluZWQgW0ZpcmViYXNlQW5hbHl0aWNzLkV2ZW50XShodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9yZWZlcmVuY2UvYW5kcm9pZC9jb20vZ29vZ2xlL2ZpcmViYXNlL2FuYWx5dGljcy9GaXJlYmFzZUFuYWx5dGljcy5FdmVudC5odG1sKSBhbmQvb3IgW0ZpcmViYXNlQW5hbHl0aWNzLlBhcmFtXShodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9yZWZlcmVuY2UvYW5kcm9pZC9jb20vZ29vZ2xlL2ZpcmViYXNlL2FuYWx5dGljcy9GaXJlYmFzZUFuYWx5dGljcy5QYXJhbS5odG1sKSBpcyByZWNvbW1lbmRlZCBmb3Igb3B0aW1hbCByZXBvcnRpbmcuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudE5hbWUge3N0cmluZ30gVGhlIGV2ZW50IG5hbWVcbiAgICogQHBhcmFtIGV2ZW50UGFyYW1zIHtvYmplY3R9IChPcHRpb25hbCkgVGhlIGV2ZW50IHBhcmFtc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZXZlbnQgaXMgbG9nZ2VkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvZ0V2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBldmVudFBhcmFtcz86IG9iamVjdCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFycyBhbGwgYW5hbHl0aWNzIGRhdGEgZm9yIHRoaXMgYXBwIGZyb20gdGhlIGRldmljZSBhbmQgcmVzZXRzIHRoZSBhcHAgaW5zdGFuY2UgaWRcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGFuYWx5dGljcyBkYXRhIGlzIGNsZWFyZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVzZXRBbmFseXRpY3NEYXRhKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgd2hldGhlciBhbmFseXRpY3MgY29sbGVjdGlvbiBpcyBlbmFibGVkIGZvciB0aGlzIGFwcCBvbiB0aGlzIGRldmljZS4gVGhpcyBzZXR0aW5nIGlzIHBlcnNpc3RlZCBhY3Jvc3MgYXBwIHNlc3Npb25zLiBCeSBkZWZhdWx0IGl0IGlzIGVuYWJsZWRcbiAgICogQHBhcmFtIHNjcmVlbk5hbWUge2Jvb2xlYW59IFRoZSB2YWx1ZSBvZiB0aGUgY29sbGVjdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgY29sbGVjdGlvbiBpcyBlbmFibGVkL2Rpc2FibGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjdXJyZW50IHNjcmVlbiBuYW1lLCB3aGljaCBzcGVjaWZpZXMgdGhlIGN1cnJlbnQgdmlzdWFsIGNvbnRleHQgaW4geW91ciBhcHAuXG4gICAqIFRoaXMgaGVscHMgaWRlbnRpZnkgdGhlIGFyZWFzIGluIHlvdXIgYXBwIHdoZXJlIHVzZXJzIHNwZW5kIHRoZWlyIHRpbWUgYW5kIGhvdyB0aGV5IGludGVyYWN0IHdpdGggeW91ciBhcHBcbiAgICogQHBhcmFtIHNjcmVlbk5hbWUge3N0cmluZ30gVGhlIHNjcmVlbiBuYW1lXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBjdXJyZW50IHNjcmVlbiBpcyBzZXR0ZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0Q3VycmVudFNjcmVlbihzY3JlZW5OYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBtaW5pbXVtIGVuZ2FnZW1lbnQgdGltZSByZXF1aXJlZCBiZWZvcmUgc3RhcnRpbmcgYSBzZXNzaW9uLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyAxMDAwMCAoMTAgc2Vjb25kcylcbiAgICogQHBhcmFtIHNjcmVlbk5hbWUge251bWJlcn0gVGhlIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgbWluaW11bSBzZXNzaW9uIGR1cmF0aW9uIGlzIHNldFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRNaW5pbXVtU2Vzc2lvbkR1cmF0aW9uKG1pbGxpc2Vjb25kczogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgZHVyYXRpb24gb2YgaW5hY3Rpdml0eSB0aGF0IHRlcm1pbmF0ZXMgdGhlIGN1cnJlbnQgc2Vzc2lvbi4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgMTgwMDAwMCAoMzAgbWludXRlcylcbiAgICogQHBhcmFtIHNjcmVlbk5hbWUge251bWJlcn0gVGhlIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgc2Vzc2lvbiB0aW1lb3V0IGR1cmF0aW9uIGlzIHNldFxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRTZXNzaW9uVGltZW91dER1cmF0aW9uKG1pbGxpc2Vjb25kczogbnVtYmVyKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgdXNlciBJRCBwcm9wZXJ0eS4gVGhpcyBmZWF0dXJlIG11c3QgYmUgdXNlZCBpbiBhY2NvcmRhbmNlIHdpdGggR29vZ2xlJ3MgUHJpdmFjeSBQb2xpY3lcbiAgICogQHBhcmFtIHVzZXJJZCB7c3RyaW5nfSBUaGUgdXNlciBpZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgdXNlciBpZCBpcyBzZXR0ZWRcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0VXNlcklkKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhIHVzZXIgcHJvcGVydHkgdG8gYSBnaXZlbiB2YWx1ZS4gVXAgdG8gMjUgdXNlciBwcm9wZXJ0eSBuYW1lcyBhcmUgc3VwcG9ydGVkLiBPbmNlIHNldCwgdXNlciBwcm9wZXJ0eSB2YWx1ZXMgcGVyc2lzdCB0aHJvdWdob3V0IHRoZSBhcHAgbGlmZWN5Y2xlIGFuZCBhY3Jvc3Mgc2Vzc2lvbnNcbiAgICogQHBhcmFtIHVzZXJQcm9wZXJ0eU5hbWUge3N0cmluZ30gVGhlIHVzZXIgcHJvcGVydHkgbmFtZVxuICAgKiBAcGFyYW0gdXNlclByb3BlcnR5VmFsdWUge3N0cmluZ30gVGhlIHVzZXIgcHJvcGVydHkgdmFsdWVcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHVzZXIgcHJvcGVydHkgc2V0dGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldFVzZXJQcm9wZXJ0eSh1c2VyUHJvcGVydHlOYW1lOiBzdHJpbmcsIHVzZXJQcm9wZXJ0eVZhbHVlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19