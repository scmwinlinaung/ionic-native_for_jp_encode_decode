var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var BackgroundFetchOriginal = /** @class */ (function (_super) {
    __extends(BackgroundFetchOriginal, _super);
    function BackgroundFetchOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackgroundFetchOriginal.prototype.configure = function (config) { return cordova(this, "configure", { "callbackOrder": "reverse" }, arguments); };
    BackgroundFetchOriginal.prototype.start = function () { return cordova(this, "start", {}, arguments); };
    BackgroundFetchOriginal.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    BackgroundFetchOriginal.prototype.finish = function () { return cordova(this, "finish", { "sync": true }, arguments); };
    BackgroundFetchOriginal.prototype.status = function () { return cordova(this, "status", {}, arguments); };
    BackgroundFetchOriginal.pluginName = "BackgroundFetch";
    BackgroundFetchOriginal.plugin = "cordova-plugin-background-fetch";
    BackgroundFetchOriginal.pluginRef = "BackgroundFetch";
    BackgroundFetchOriginal.repo = "https://github.com/transistorsoft/cordova-plugin-background-fetch";
    BackgroundFetchOriginal.platforms = ["iOS"];
    return BackgroundFetchOriginal;
}(IonicNativePlugin));
var BackgroundFetch = new BackgroundFetchOriginal();
export { BackgroundFetch };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JhY2tncm91bmQtZmV0Y2gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBOERuQyxtQ0FBaUI7Ozs7SUFZcEQsbUNBQVMsYUFBQyxNQUE2QjtJQVV2QywrQkFBSztJQVNMLDhCQUFJO0lBVUosZ0NBQU07SUFRTixnQ0FBTTs7Ozs7OzBCQS9HUjtFQThEcUMsaUJBQWlCO1NBQXpDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBCYWNrZ3JvdW5kRmV0Y2hDb25maWcge1xuXG4gIC8qKlxuICAgKiBTZXQgdHJ1ZSB0byBjZWFzZSBiYWNrZ3JvdW5kLWZldGNoIGZyb20gb3BlcmF0aW5nIGFmdGVyIHVzZXIgXCJjbG9zZXNcIiB0aGUgYXBwLiBEZWZhdWx0cyB0byB0cnVlLlxuICAgKi9cbiAgc3RvcE9uVGVybWluYXRlPzogYm9vbGVhbjtcbn1cblxuXG4vKipcbiAqIEBuYW1lIEJhY2tncm91bmQgRmV0Y2hcbiAqIEBkZXNjcmlwdGlvblxuICogaU9TIEJhY2tncm91bmQgRmV0Y2ggSW1wbGVtZW50YXRpb24uIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL3JlZmVyZW5jZS91aWtpdC91aWFwcGxpY2F0aW9uIzE2NTczOTlcbiAqIGlPUyBCYWNrZ3JvdW5kIEZldGNoIGlzIGJhc2ljYWxseSBhbiBBUEkgd2hpY2ggd2FrZXMgdXAgeW91ciBhcHAgYWJvdXQgZXZlcnkgMTUgbWludXRlcyAoZHVyaW5nIHRoZSB1c2VyJ3MgcHJpbWUtdGltZSBob3VycykgYW5kIHByb3ZpZGVzIHlvdXIgYXBwIGV4YWN0bHkgMzBzIG9mIGJhY2tncm91bmQgcnVubmluZy10aW1lLiBUaGlzIHBsdWdpbiB3aWxsIGV4ZWN1dGUgeW91ciBwcm92aWRlZCBjYWxsYmFja0ZuIHdoZW5ldmVyIGEgYmFja2dyb3VuZC1mZXRjaCBldmVudCBvY2N1cnMuIFRoZXJlIGlzIG5vIHdheSB0byBpbmNyZWFzZSB0aGUgcmF0ZSB3aGljaCBhIGZldGNoLWV2ZW50IG9jY3VycyBhbmQgdGhpcyBwbHVnaW4gc2V0cyB0aGUgcmF0ZSB0byB0aGUgbW9zdCBmcmVxdWVudCBwb3NzaWJsZSB2YWx1ZSBvZiBVSUFwcGxpY2F0aW9uQmFja2dyb3VuZEZldGNoSW50ZXJ2YWxNaW5pbXVtIC0tIGlPUyBkZXRlcm1pbmVzIHRoZSByYXRlIGF1dG9tYXRpY2FsbHkgYmFzZWQgdXBvbiBkZXZpY2UgdXNhZ2UgYW5kIHRpbWUtb2YtZGF5IChpZTogZmV0Y2gtcmF0ZSBpcyBhYm91dCB+MTVtaW4gZHVyaW5nIHByaW1lLXRpbWUgaG91cnM7IGxlc3MgZnJlcXVlbnRseSB3aGVuIHRoZSB1c2VyIGlzIHByZXN1bWVkIHRvIGJlIHNsZWVwaW5nLCBhdCAzYW0gZm9yIGV4YW1wbGUpLlxuICogRm9yIG1vcmUgZGV0YWlsLCBwbGVhc2Ugc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90cmFuc2lzdG9yc29mdC9jb3Jkb3ZhLXBsdWdpbi1iYWNrZ3JvdW5kLWZldGNoXG4gKlxuICogQHVzYWdlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQmFja2dyb3VuZEZldGNoLCBCYWNrZ3JvdW5kRmV0Y2hDb25maWcgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2JhY2tncm91bmQtZmV0Y2gvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBiYWNrZ3JvdW5kRmV0Y2g6IEJhY2tncm91bmRGZXRjaCkge1xuICpcbiAqICAgY29uc3QgY29uZmlnOiBCYWNrZ3JvdW5kRmV0Y2hDb25maWcgPSB7XG4gKiAgICAgc3RvcE9uVGVybWluYXRlOiBmYWxzZSwgLy8gU2V0IHRydWUgdG8gY2Vhc2UgYmFja2dyb3VuZC1mZXRjaCBmcm9tIG9wZXJhdGluZyBhZnRlciB1c2VyIFwiY2xvc2VzXCIgdGhlIGFwcC4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAqICAgfVxuICpcbiAqICAgYmFja2dyb3VuZEZldGNoLmNvbmZpZ3VyZShjb25maWcpXG4gKiAgICAgIC50aGVuKCgpID0+IHtcbiAqICAgICAgICAgIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kIEZldGNoIGluaXRpYWxpemVkJyk7XG4gKlxuICogICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kRmV0Y2guZmluaXNoKCk7XG4gKlxuICogICAgICB9KVxuICogICAgICAuY2F0Y2goZSA9PiBjb25zb2xlLmxvZygnRXJyb3IgaW5pdGlhbGl6aW5nIGJhY2tncm91bmQgZmV0Y2gnLCBlKSk7XG4gKlxuICogICAvLyBTdGFydCB0aGUgYmFja2dyb3VuZC1mZXRjaCBBUEkuIFlvdXIgY2FsbGJhY2tGbiBwcm92aWRlZCB0byAjY29uZmlndXJlIHdpbGwgYmUgZXhlY3V0ZWQgZWFjaCB0aW1lIGEgYmFja2dyb3VuZC1mZXRjaCBldmVudCBvY2N1cnMuIE5PVEUgdGhlICNjb25maWd1cmUgbWV0aG9kIGF1dG9tYXRpY2FsbHkgY2FsbHMgI3N0YXJ0LiBZb3UgZG8gbm90IGhhdmUgdG8gY2FsbCB0aGlzIG1ldGhvZCBhZnRlciB5b3UgI2NvbmZpZ3VyZSB0aGUgcGx1Z2luXG4gKiAgIGJhY2tncm91bmRGZXRjaC5zdGFydCgpO1xuICpcbiAqICAgLy8gU3RvcCB0aGUgYmFja2dyb3VuZC1mZXRjaCBBUEkgZnJvbSBmaXJpbmcgZmV0Y2ggZXZlbnRzLiBZb3VyIGNhbGxiYWNrRm4gcHJvdmlkZWQgdG8gI2NvbmZpZ3VyZSB3aWxsIG5vIGxvbmdlciBiZSBleGVjdXRlZC5cbiAqICAgYmFja2dyb3VuZEZldGNoLnN0b3AoKTtcbiAqXG4gKlxuICogfVxuICpcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIEJhY2tncm91bmRGZXRjaENvbmZpZ1xuICpcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdCYWNrZ3JvdW5kRmV0Y2gnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1iYWNrZ3JvdW5kLWZldGNoJyxcbiAgcGx1Z2luUmVmOiAnQmFja2dyb3VuZEZldGNoJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS90cmFuc2lzdG9yc29mdC9jb3Jkb3ZhLXBsdWdpbi1iYWNrZ3JvdW5kLWZldGNoJyxcbiAgcGxhdGZvcm1zOiBbJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEJhY2tncm91bmRGZXRjaCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcblxuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIHRoZSBwbHVnaW4ncyBmZXRjaCBjYWxsYmFja0ZuXG4gICAqXG4gICAqIEBwYXJhbSB7QmFja2dyb3VuZEZldGNoQ29uZmlnfSBjb25maWcgQ29uZmlndXJhdGlvbiBmb3IgcGx1Z2luXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZSdcbiAgfSlcbiAgY29uZmlndXJlKGNvbmZpZzogQmFja2dyb3VuZEZldGNoQ29uZmlnKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgdGhlIGJhY2tncm91bmQtZmV0Y2ggQVBJLlxuICAgKiBZb3VyIGNhbGxiYWNrRm4gcHJvdmlkZWQgdG8gI2NvbmZpZ3VyZSB3aWxsIGJlIGV4ZWN1dGVkIGVhY2ggdGltZSBhIGJhY2tncm91bmQtZmV0Y2ggZXZlbnQgb2NjdXJzLiBOT1RFIHRoZSAjY29uZmlndXJlIG1ldGhvZCBhdXRvbWF0aWNhbGx5IGNhbGxzICNzdGFydC4gWW91IGRvIG5vdCBoYXZlIHRvIGNhbGwgdGhpcyBtZXRob2QgYWZ0ZXIgeW91ICNjb25maWd1cmUgdGhlIHBsdWdpblxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGFydCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIHRoZSBiYWNrZ3JvdW5kLWZldGNoIEFQSSBmcm9tIGZpcmluZyBmZXRjaCBldmVudHMuIFlvdXIgY2FsbGJhY2tGbiBwcm92aWRlZCB0byAjY29uZmlndXJlIHdpbGwgbm8gbG9uZ2VyIGJlIGV4ZWN1dGVkLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdG9wKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFlvdSBNVVNUIGNhbGwgdGhpcyBtZXRob2QgaW4geW91ciBmZXRjaCBjYWxsYmFja0ZuIHByb3ZpZGVkIHRvICNjb25maWd1cmUgaW4gb3JkZXIgdG8gc2lnbmFsIHRvIGlPUyB0aGF0IHlvdXIgZmV0Y2ggYWN0aW9uIGlzIGNvbXBsZXRlLiBpT1MgcHJvdmlkZXMgb25seSAzMHMgb2YgYmFja2dyb3VuZC10aW1lIGZvciBhIGZldGNoLWV2ZW50IC0tIGlmIHlvdSBleGNlZWQgdGhpcyAzMHMsIGlPUyB3aWxsIGtpbGwgeW91ciBhcHAuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3luYzogdHJ1ZVxuICB9KVxuICBmaW5pc2goKTogdm9pZCB7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBzdGF0dXMgb2YgdGhlIGJhY2tncm91bmQtZmV0Y2hcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RhdHVzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbn1cbiJdfQ==