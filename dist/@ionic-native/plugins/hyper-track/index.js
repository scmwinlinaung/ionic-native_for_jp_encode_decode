var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var HyperTrackOriginal = /** @class */ (function (_super) {
    __extends(HyperTrackOriginal, _super);
    function HyperTrackOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HyperTrackOriginal.prototype.helloWorld = function (text) { return cordova(this, "helloWorld", {}, arguments); };
    HyperTrackOriginal.prototype.getOrCreateUser = function (name, phone, photo, lookupId) { return cordova(this, "getOrCreateUser", {}, arguments); };
    HyperTrackOriginal.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    HyperTrackOriginal.prototype.startTracking = function () { return cordova(this, "startTracking", {}, arguments); };
    HyperTrackOriginal.prototype.createAndAssignAction = function (type, lookupId, expectedPlaceAddress, expectedPlaceLatitude, expectedPlaceLongitude) { return cordova(this, "createAndAssignAction", {}, arguments); };
    HyperTrackOriginal.prototype.completeAction = function (actionId) { return cordova(this, "completeAction", {}, arguments); };
    HyperTrackOriginal.prototype.completeActionWithLookupId = function (lookupId) { return cordova(this, "completeActionWithLookupId", {}, arguments); };
    HyperTrackOriginal.prototype.stopTracking = function () { return cordova(this, "stopTracking", {}, arguments); };
    HyperTrackOriginal.prototype.getCurrentLocation = function () { return cordova(this, "getCurrentLocation", {}, arguments); };
    HyperTrackOriginal.prototype.checkLocationPermission = function () { return cordova(this, "checkLocationPermission", {}, arguments); };
    HyperTrackOriginal.prototype.requestPermissions = function () { return cordova(this, "requestPermissions", {}, arguments); };
    HyperTrackOriginal.prototype.checkLocationServices = function () { return cordova(this, "checkLocationServices", {}, arguments); };
    HyperTrackOriginal.prototype.requestLocationServices = function () { return cordova(this, "requestLocationServices", {}, arguments); };
    HyperTrackOriginal.pluginName = "HyperTrack";
    HyperTrackOriginal.plugin = "cordova-plugin-hypertrack";
    HyperTrackOriginal.pluginRef = "cordova.plugins.HyperTrack";
    HyperTrackOriginal.repo = "https://github.com/hypertrack/hypertrack-cordova";
    HyperTrackOriginal.platforms = ["Android"];
    return HyperTrackOriginal;
}(IonicNativePlugin));
var HyperTrack = new HyperTrackOriginal();
export { HyperTrack };
//# sourceMappingURL=data:application/json;base64,