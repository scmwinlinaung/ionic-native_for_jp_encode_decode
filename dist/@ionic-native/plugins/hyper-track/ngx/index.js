var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var HyperTrack = /** @class */ (function (_super) {
    __extends(HyperTrack, _super);
    function HyperTrack() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HyperTrack.prototype.helloWorld = function (text) { return cordova(this, "helloWorld", {}, arguments); };
    HyperTrack.prototype.getOrCreateUser = function (name, phone, photo, lookupId) { return cordova(this, "getOrCreateUser", {}, arguments); };
    HyperTrack.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    HyperTrack.prototype.startTracking = function () { return cordova(this, "startTracking", {}, arguments); };
    HyperTrack.prototype.createAndAssignAction = function (type, lookupId, expectedPlaceAddress, expectedPlaceLatitude, expectedPlaceLongitude) { return cordova(this, "createAndAssignAction", {}, arguments); };
    HyperTrack.prototype.completeAction = function (actionId) { return cordova(this, "completeAction", {}, arguments); };
    HyperTrack.prototype.completeActionWithLookupId = function (lookupId) { return cordova(this, "completeActionWithLookupId", {}, arguments); };
    HyperTrack.prototype.stopTracking = function () { return cordova(this, "stopTracking", {}, arguments); };
    HyperTrack.prototype.getCurrentLocation = function () { return cordova(this, "getCurrentLocation", {}, arguments); };
    HyperTrack.prototype.checkLocationPermission = function () { return cordova(this, "checkLocationPermission", {}, arguments); };
    HyperTrack.prototype.requestPermissions = function () { return cordova(this, "requestPermissions", {}, arguments); };
    HyperTrack.prototype.checkLocationServices = function () { return cordova(this, "checkLocationServices", {}, arguments); };
    HyperTrack.prototype.requestLocationServices = function () { return cordova(this, "requestLocationServices", {}, arguments); };
    HyperTrack.pluginName = "HyperTrack";
    HyperTrack.plugin = "cordova-plugin-hypertrack";
    HyperTrack.pluginRef = "cordova.plugins.HyperTrack";
    HyperTrack.repo = "https://github.com/hypertrack/hypertrack-cordova";
    HyperTrack.platforms = ["Android"];
    HyperTrack = __decorate([
        Injectable()
    ], HyperTrack);
    return HyperTrack;
}(IonicNativePlugin));
export { HyperTrack };
//# sourceMappingURL=data:application/json;base64,