var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var IntercomOriginal = /** @class */ (function (_super) {
    __extends(IntercomOriginal, _super);
    function IntercomOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IntercomOriginal.prototype.registerIdentifiedUser = function (options) { return cordova(this, "registerIdentifiedUser", {}, arguments); };
    IntercomOriginal.prototype.registerUnidentifiedUser = function (options) { return cordova(this, "registerUnidentifiedUser", {}, arguments); };
    IntercomOriginal.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    IntercomOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    IntercomOriginal.prototype.setSecureMode = function (secureHash, secureData) { return cordova(this, "setSecureMode", {}, arguments); };
    IntercomOriginal.prototype.setUserHash = function (secureHash) { return cordova(this, "setUserHash", {}, arguments); };
    IntercomOriginal.prototype.updateUser = function (attributes) { return cordova(this, "updateUser", {}, arguments); };
    IntercomOriginal.prototype.logEvent = function (eventName, metaData) { return cordova(this, "logEvent", {}, arguments); };
    IntercomOriginal.prototype.displayMessenger = function () { return cordova(this, "displayMessenger", {}, arguments); };
    IntercomOriginal.prototype.displayMessageComposer = function () { return cordova(this, "displayMessageComposer", {}, arguments); };
    IntercomOriginal.prototype.displayMessageComposerWithInitialMessage = function (initialMessage) { return cordova(this, "displayMessageComposerWithInitialMessage", {}, arguments); };
    IntercomOriginal.prototype.displayConversationsList = function () { return cordova(this, "displayConversationsList", {}, arguments); };
    IntercomOriginal.prototype.displayHelpCenter = function () { return cordova(this, "displayHelpCenter", {}, arguments); };
    IntercomOriginal.prototype.unreadConversationCount = function () { return cordova(this, "unreadConversationCount", {}, arguments); };
    IntercomOriginal.prototype.setLauncherVisibility = function (visibility) { return cordova(this, "setLauncherVisibility", {}, arguments); };
    IntercomOriginal.prototype.setInAppMessageVisibility = function (visibility) { return cordova(this, "setInAppMessageVisibility", {}, arguments); };
    IntercomOriginal.prototype.hideMessenger = function () { return cordova(this, "hideMessenger", {}, arguments); };
    IntercomOriginal.prototype.registerForPush = function () { return cordova(this, "registerForPush", {}, arguments); };
    IntercomOriginal.prototype.sendPushTokenToIntercom = function (token) { return cordova(this, "sendPushTokenToIntercom", {}, arguments); };
    IntercomOriginal.pluginName = "Intercom";
    IntercomOriginal.plugin = "cordova-plugin-intercom";
    IntercomOriginal.pluginRef = "intercom";
    IntercomOriginal.repo = "https://github.com/intercom/intercom-cordova";
    IntercomOriginal.platforms = ["Android", "iOS"];
    return IntercomOriginal;
}(IonicNativePlugin));
var Intercom = new IntercomOriginal();
export { Intercom };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2ludGVyY29tL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQWdDMUMsNEJBQWlCOzs7O0lBUTdDLHlDQUFzQixhQUFDLE9BQVk7SUFVbkMsMkNBQXdCLGFBQUMsT0FBWTtJQVNyQyx3QkFBSztJQVNMLHlCQUFNO0lBWU4sZ0NBQWEsYUFBQyxVQUFrQixFQUFFLFVBQWU7SUFVakQsOEJBQVcsYUFBQyxVQUFrQjtJQVU5Qiw2QkFBVSxhQUFDLFVBQWU7SUFXMUIsMkJBQVEsYUFBQyxTQUFpQixFQUFFLFFBQWE7SUFTekMsbUNBQWdCO0lBU2hCLHlDQUFzQjtJQVV0QiwyREFBd0MsYUFBQyxjQUFzQjtJQVMvRCwyQ0FBd0I7SUFTeEIsb0NBQWlCO0lBU2pCLDBDQUF1QjtJQVV2Qix3Q0FBcUIsYUFBQyxVQUFrQjtJQVV4Qyw0Q0FBeUIsYUFBQyxVQUFrQjtJQVM1QyxnQ0FBYTtJQVNiLGtDQUFlO0lBVWYsMENBQXVCLGFBQUMsS0FBYTs7Ozs7O21CQXROdkM7RUFnQzhCLGlCQUFpQjtTQUFsQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQG5hbWUgSW50ZXJjb21cbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBpcyBhIHBsdWdpbiB0aGF0IGFsbG93cyB5b3VyIElvbmljIGFwcCB0byB1c2UgSW50ZXJjb20gZm9yIGlPUyBhbmQvb3IgSW50ZXJjb20gZm9yIEFuZHJvaWQuXG4gKiBGb2xsb3cgdGhlIG9mZmljYWwgZG9jdW1lbnRhdGlvbiB0byBzZXR1cCB0aGlzIHBsdWdpbiBjb3JyZWN0bHk6IGh0dHBzOi8vZGV2ZWxvcGVycy5pbnRlcmNvbS5jb20vZG9jcy9jb3Jkb3ZhLXBob25lZ2FwLWNvbmZpZ3VyYXRpb25cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEludGVyY29tIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9pbnRlcmNvbS9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGludGVyY29tOiBJbnRlcmNvbSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogdGhpcy5pbnRlcmNvbS5yZWdpc3RlclVuaWRlbnRpZmllZFVzZXIoKTtcbiAqIC4uLlxuICogdGhpcy5pbnRlcmNvbS5yZWdpc3RlckZvclB1c2goKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdJbnRlcmNvbScsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWludGVyY29tJyxcbiAgcGx1Z2luUmVmOiAnaW50ZXJjb20nLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2ludGVyY29tL2ludGVyY29tLWNvcmRvdmEnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW50ZXJjb20gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgaWRlbnRpZmllZCB1c2VyXG4gICAqIEBwYXJhbSBvcHRpb25zIHthbnl9IE9wdGlvbnNcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWdpc3RlcklkZW50aWZpZWRVc2VyKG9wdGlvbnM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgdW5pZGVudGlmaWVkIHVzZXJcbiAgICogQHBhcmFtIG9wdGlvbnMge2FueX0gT3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlZ2lzdGVyVW5pZGVudGlmaWVkVXNlcihvcHRpb25zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHJlc2V0cyB0aGUgSW50ZXJjb20gaW50ZWdyYXRpb24ncyBjYWNoZSBvZiB5b3VyIHVzZXIncyBpZGVudGl0eSBhbmQgd2lwZXMgdGhlIHNsYXRlIGNsZWFuLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlc2V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9nb3V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBzZWN1cmVIYXNoIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBzZWN1cmVEYXRhIHthbnl9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHNldFVzZXJIYXNoIGluc3RlYWQgYXMgb2YgSW50ZXJjb20gQ29yZG92YSA0LjAuMCBhbmQgaGlnaGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9pbnRlcmNvbS9pbnRlcmNvbS1jb3Jkb3ZhL2Jsb2IvbWFzdGVyL0NIQU5HRUxPRy5tZCM0MDAtMjAxNy0wOC0yOVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRTZWN1cmVNb2RlKHNlY3VyZUhhc2g6IHN0cmluZywgc2VjdXJlRGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHNlY3VyZUhhc2gge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzZXRVc2VySGFzaChzZWN1cmVIYXNoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gYXR0cmlidXRlcyB7YW55fVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVwZGF0ZVVzZXIoYXR0cmlidXRlczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGV2ZW50TmFtZSB7c3RyaW5nfVxuICAgKiBAcGFyYW0gbWV0YURhdGEge2FueX1cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsb2dFdmVudChldmVudE5hbWU6IHN0cmluZywgbWV0YURhdGE6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGlzcGxheU1lc3NlbmdlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc3BsYXlNZXNzYWdlQ29tcG9zZXIoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGluaXRpYWxNZXNzYWdlIHtzdHJpbmd9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGlzcGxheU1lc3NhZ2VDb21wb3NlcldpdGhJbml0aWFsTWVzc2FnZShpbml0aWFsTWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNwbGF5Q29udmVyc2F0aW9uc0xpc3QoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNwbGF5SGVscENlbnRlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVucmVhZENvbnZlcnNhdGlvbkNvdW50KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB2aXNpYmlsaXR5IHtzdHJpbmd9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0TGF1bmNoZXJWaXNpYmlsaXR5KHZpc2liaWxpdHk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB2aXNpYmlsaXR5IHtzdHJpbmd9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0SW5BcHBNZXNzYWdlVmlzaWJpbGl0eSh2aXNpYmlsaXR5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGhpZGVNZXNzZW5nZXIoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWdpc3RlckZvclB1c2goKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2VuZFB1c2hUb2tlblRvSW50ZXJjb20odG9rZW46IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cblxufVxuIl19