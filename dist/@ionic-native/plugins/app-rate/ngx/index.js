var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
var AppRate = /** @class */ (function (_super) {
    __extends(AppRate, _super);
    function AppRate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppRate.prototype.promptForRating = function (immediately) { return cordova(this, "promptForRating", {}, arguments); };
    AppRate.prototype.navigateToAppStore = function () { return cordova(this, "navigateToAppStore", {}, arguments); };
    Object.defineProperty(AppRate.prototype, "preferences", {
        get: function () { return cordovaPropertyGet(this, "preferences"); },
        set: function (value) { cordovaPropertySet(this, "preferences", value); },
        enumerable: true,
        configurable: true
    });
    AppRate.pluginName = "AppRate";
    AppRate.plugin = "cordova-plugin-apprate";
    AppRate.pluginRef = "AppRate";
    AppRate.repo = "https://github.com/pushandplay/cordova-plugin-apprate";
    AppRate.platforms = ["Android", "BlackBerry 10", "iOS", "Windows"];
    AppRate = __decorate([
        Injectable()
    ], AppRate);
    return AppRate;
}(IonicNativePlugin));
export { AppRate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2FwcC1yYXRlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLHNFQUF1RCxNQUFNLG9CQUFvQixDQUFDOztJQXVMNUQsMkJBQWlCOzs7O0lBYTVDLGlDQUFlLGFBQUMsV0FBb0I7SUFNcEMsb0NBQWtCOzBCQWJsQixnQ0FBVzs7Ozs7Ozs7Ozs7SUFOQSxPQUFPO1FBRG5CLFVBQVUsRUFBRTtPQUNBLE9BQU87a0JBeExwQjtFQXdMNkIsaUJBQWlCO1NBQWpDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhUHJvcGVydHksIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVQcmVmZXJlbmNlcyB7XG4gIC8qKlxuICAgKiBDdXN0b20gQkNQIDQ3IGxhbmd1YWdlIHRhZ1xuICAgKi9cbiAgdXNlTGFuZ3VhZ2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEN1c3RvbSBhcHBsaWNhdGlvbiB0aXRsZVxuICAgKi9cbiAgZGlzcGxheUFwcE5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNob3cgZGlhbG9nIGFnYWluIHdoZW4gYXBwbGljYXRpb24gdmVyc2lvbiB3aWxsIGJlIHVwZGF0ZWQuIERlZmF1bHRzIHRvIGB0cnVlYFxuICAgKi9cbiAgcHJvbXB0QWdhaW5Gb3JFYWNoTmV3VmVyc2lvbj86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIGNvdW50IG9mIHJ1bnMgb2YgYXBwbGljYXRpb24gYmVmb3JlIGRpYWxvZyB3aWxsIGJlIGRpc3BsYXllZC4gRGVmYXVsdHMgdG8gYDNgXG4gICAqL1xuICB1c2VzVW50aWxQcm9tcHQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNpbXBsZSBNb2RlIHRvIGRpc3BsYXkgdGhlIHJhdGUgZGlhbG9nIGRpcmVjdGx5IGFuZCBieXBhc3MgbmVnYXRpdmUgZmVlZGJhY2sgZmlsdGVyaW5nIGZsb3dcbiAgICovXG4gIHNpbXBsZU1vZGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBsZWF2ZSBhcHAgb3Igbm8gd2hlbiBhcHBsaWNhdGlvbiBwYWdlIG9wZW5lZCBpbiBhcHAgc3RvcmUgKG5vdyBzdXBwb3J0ZWQgb25seSBmb3IgaU9TKS4gRGVmYXVsdHMgdG8gYGZhbHNlYFxuICAgKi9cbiAgaW5BcHBSZXZpZXc/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiB1c2UgY3VzdG9tIHZpZXcgZm9yIHJhdGUgZGlhbG9nLiBEZWZhdWx0cyB0byBgZmFsc2VgXG4gICAqL1xuICB1c2VDdXN0b21SYXRlRGlhbG9nPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ3VzdG9tIGxvY2FsZSBvYmplY3RcbiAgICovXG4gIGN1c3RvbUxvY2FsZT86IEFwcFJhdGVDdXN0b21Mb2NhbGU7XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrcyBmb3IgZXZlbnRzXG4gICAqL1xuICBjYWxsYmFja3M/OiBBcHBSYXRlQ2FsbGJhY2tzO1xuXG4gIC8qKlxuICAgKiBBcHAgU3RvcmUgVVJMU1xuICAgKi9cbiAgc3RvcmVBcHBVUkw/OiBBcHBVcmxzO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVDdXN0b21Mb2NhbGUge1xuICAvKiogVGl0bGUgKi9cbiAgdGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqIE1lc3NhZ2UgKi9cbiAgbWVzc2FnZT86IHN0cmluZztcblxuICAvKiogQ2FuY2VsIGJ1dHRvbiBsYWJlbCAqL1xuICBjYW5jZWxCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogTGF0ZXIgYnV0dG9uIGxhYmVsICovXG4gIGxhdGVyQnV0dG9uTGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIFJhdGUgYnV0dG9uIGxhYmVsICovXG4gIHJhdGVCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogWWVzIGJ1dHRvbiBsYWJlbCAqL1xuICB5ZXNCdXR0b25MYWJlbD86IHN0cmluZztcblxuICAvKiogTm8gYnV0dG9uIGxhYmVsICovXG4gIG5vQnV0dG9uTGFiZWw/OiBzdHJpbmc7XG5cbiAgLyoqIEFwcCByYXRlIHByb21wdCB0aXRsZSAqL1xuICBhcHBSYXRlUHJvbXB0VGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqIEZlZWRiYWNrIHByb21wdCB0aXRsZSAqL1xuICBmZWVkYmFja1Byb21wdFRpdGxlPzogc3RyaW5nO1xuXG4gIC8qKiBGZWVkYmFjayBwcm9tcHQgbWVzc2FnZSAqL1xuICBhcHBSYXRlUHJvbXB0TWVzc2FnZT86IHN0cmluZztcblxuICAvKiogRmVlZGJhY2sgcHJvbXB0IG1lc3NhZ2UgKi9cbiAgZmVlZGJhY2tQcm9tcHRNZXNzYWdlPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFwcFJhdGVDYWxsYmFja3Mge1xuICAvKipcbiAgICogY2FsbCBiYWNrIGZ1bmN0aW9uLiBjYWxsZWQgd2hlbiB1c2VyIGNsaWNrZWQgb24gcmF0ZS1kaWFsb2cgYnV0dG9uc1xuICAgKi9cbiAgb25CdXR0b25DbGlja2VkPzogRnVuY3Rpb247XG5cbiAgLyoqXG4gICAqIGNhbGwgYmFjayBmdW5jdGlvbi4gY2FsbGVkIHdoZW4gcmF0ZS1kaWFsb2cgc2hvd2luZ1xuICAgKi9cbiAgb25SYXRlRGlhbG9nU2hvdz86IEZ1bmN0aW9uO1xuICAvKipcbiAgICogY2FsbCBiYWNrIGZ1bmN0aW9uLiBjYWxsZWQgd2hlbiB1c2VyIGNsaWNrZWQgb24gbmVnYXRpdmUgZmVlZGJhY2tcbiAgICovXG4gIGhhbmRsZU5lZ2F0aXZlRmVlZGJhY2s/OiBGdW5jdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBcHBVcmxzIHtcbiAgLyoqXG4gICAqIGFwcGxpY2F0aW9uIGlkIGluIEFwcFN0b3JlXG4gICAqL1xuICBpb3M/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGFwcGxpY2F0aW9uIFVSTCBpbiBHb29nbGVQbGF5XG4gICAqL1xuICBhbmRyb2lkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBhcHBsaWNhdGlvbiBVUkwgaW4gV2luZG93cyBTdG9yZVxuICAgKi9cbiAgd2luZG93cz86IHN0cmluZztcblxuICAvKipcbiAgICogYXBwbGljYXRpb24gVVJMIGluIEFwcFdvcmxkXG4gICAqL1xuICBibGFja2JlcnJ5Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBhcHBsaWNhdGlvbiBVUkwgaW4gV2luZG93c1N0b3JlXG4gICAqL1xuICB3aW5kb3dzOD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBBcHAgUmF0ZVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgQXBwUmF0ZSBwbHVnaW4gbWFrZXMgaXQgZWFzeSB0byBwcm9tcHQgdGhlIHVzZXIgdG8gcmF0ZSB5b3VyIGFwcCwgZWl0aGVyIG5vdywgbGF0ZXIsIG9yIG5ldmVyLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBjb3Jkb3ZhLXBsdWdpbi1hcHByYXRlLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQXBwUmF0ZSBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL3B1c2hhbmRwbGF5L2NvcmRvdmEtcGx1Z2luLWFwcHJhdGUpLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQXBwUmF0ZSB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYXBwLXJhdGUvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcFJhdGU6IEFwcFJhdGUpIHsgfVxuICpcbiAqIC4uLlxuICogLy8gc2V0IGNlcnRhaW4gcHJlZmVyZW5jZXNcbiAqIHRoaXMuYXBwUmF0ZS5wcmVmZXJlbmNlcy5zdG9yZUFwcFVSTCA9IHtcbiAqICAgaW9zOiAnPGFwcF9pZD4nLFxuICogICBhbmRyb2lkOiAnbWFya2V0Oi8vZGV0YWlscz9pZD08cGFja2FnZV9uYW1lPicsXG4gKiAgIHdpbmRvd3M6ICdtcy13aW5kb3dzLXN0b3JlOi8vcmV2aWV3Lz9Qcm9kdWN0SWQ9PHN0b3JlX2lkPidcbiAqIH1cbiAqXG4gKiB0aGlzLmFwcFJhdGUucHJvbXB0Rm9yUmF0aW5nKHRydWUpO1xuICpcbiAqIC8vIG9yLCBvdmVycmlkZSB0aGUgd2hvbGUgcHJlZmVyZW5jZXMgb2JqZWN0XG4gKiB0aGlzLmFwcFJhdGUucHJlZmVyZW5jZXMgPSB7XG4gKiAgIHVzZXNVbnRpbFByb21wdDogMyxcbiAqICAgc3RvcmVBcHBVUkw6IHtcbiAqICAgIGlvczogJzxhcHBfaWQ+JyxcbiAqICAgIGFuZHJvaWQ6ICdtYXJrZXQ6Ly9kZXRhaWxzP2lkPTxwYWNrYWdlX25hbWU+JyxcbiAqICAgIHdpbmRvd3M6ICdtcy13aW5kb3dzLXN0b3JlOi8vcmV2aWV3Lz9Qcm9kdWN0SWQ9PHN0b3JlX2lkPidcbiAqICAgfVxuICogfVxuICpcbiAqIHRoaXMuYXBwUmF0ZS5wcm9tcHRGb3JSYXRpbmcoZmFsc2UpO1xuICogYGBgXG4gKlxuICogQGludGVyZmFjZXNcbiAqIEFwcFJhdGVQcmVmZXJlbmNlc1xuICogQXBwVXJsc1xuICogQXBwUmF0ZUNhbGxiYWNrc1xuICogQXBwUmF0ZUN1c3RvbUxvY2FsXG4gKlxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0FwcFJhdGUnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1hcHByYXRlJyxcbiAgcGx1Z2luUmVmOiAnQXBwUmF0ZScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcHVzaGFuZHBsYXkvY29yZG92YS1wbHVnaW4tYXBwcmF0ZScsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0JsYWNrQmVycnkgMTAnLCAnaU9TJywgJ1dpbmRvd3MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBcHBSYXRlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ29uZmlndXJlIHZhcmlvdXMgc2V0dGluZ3MgZm9yIHRoZSBSYXRpbmcgVmlldy5cbiAgICogU2VlIHRhYmxlIGJlbG93IGZvciBvcHRpb25zXG4gICAqL1xuICBAQ29yZG92YVByb3BlcnR5KClcbiAgcHJlZmVyZW5jZXM6IEFwcFJhdGVQcmVmZXJlbmNlcztcblxuICAvKipcbiAgICogUHJvbXB0cyB0aGUgdXNlciBmb3IgcmF0aW5nXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW1tZWRpYXRlbHkgIFNob3cgdGhlIHJhdGluZyBwcm9tcHQgaW1tZWRpYXRlbHkuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHByb21wdEZvclJhdGluZyhpbW1lZGlhdGVseTogYm9vbGVhbik6IHZvaWQge31cblxuICAvKipcbiAgICogSW1tZWRpYXRlbHkgc2VuZCB0aGUgdXNlciB0byB0aGUgYXBwIHN0b3JlIHJhdGluZyBwYWdlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIG5hdmlnYXRlVG9BcHBTdG9yZSgpOiB2b2lkIHt9XG59XG4iXX0=