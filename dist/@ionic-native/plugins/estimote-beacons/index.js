var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var EstimoteBeaconsOriginal = /** @class */ (function (_super) {
    __extends(EstimoteBeaconsOriginal, _super);
    function EstimoteBeaconsOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** Proximity value */
        _this.ProximityUnknown = 0;
        /** Proximity value */
        _this.ProximityImmediate = 1;
        /** Proximity value */
        _this.ProximityNear = 2;
        /** Proximity value */
        _this.ProximityFar = 3;
        /** Beacon colour */
        _this.BeaconColorUnknown = 0;
        /** Beacon colour */
        _this.BeaconColorMintCocktail = 1;
        /** Beacon colour */
        _this.BeaconColorIcyMarshmallow = 2;
        /** Beacon colour */
        _this.BeaconColorBlueberryPie = 3;
        /**
         * Beacon colour.
         */
        _this.BeaconColorSweetBeetroot = 4;
        /** Beacon colour */
        _this.BeaconColorCandyFloss = 5;
        /** Beacon colour */
        _this.BeaconColorLemonTart = 6;
        /** Beacon colour */
        _this.BeaconColorVanillaJello = 7;
        /** Beacon colour */
        _this.BeaconColorLiquoriceSwirl = 8;
        /** Beacon colour */
        _this.BeaconColorWhite = 9;
        /** Beacon colour */
        _this.BeaconColorTransparent = 10;
        /** Region state */
        _this.RegionStateUnknown = 'unknown';
        /** Region state */
        _this.RegionStateOutside = 'outside';
        /** Region state */
        _this.RegionStateInside = 'inside';
        return _this;
    }
    EstimoteBeaconsOriginal.prototype.requestWhenInUseAuthorization = function () { return cordova(this, "requestWhenInUseAuthorization", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.requestAlwaysAuthorization = function () { return cordova(this, "requestAlwaysAuthorization", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.authorizationStatus = function () { return cordova(this, "authorizationStatus", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startAdvertisingAsBeacon = function (uuid, major, minor, regionId) { return cordova(this, "startAdvertisingAsBeacon", { "clearFunction": "stopAdvertisingAsBeacon" }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopAdvertisingAsBeacon = function () { return cordova(this, "stopAdvertisingAsBeacon", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.enableAnalytics = function (enable) { return cordova(this, "enableAnalytics", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.isAnalyticsEnabled = function () { return cordova(this, "isAnalyticsEnabled", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.isAuthorized = function () { return cordova(this, "isAuthorized", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.setupAppIDAndAppToken = function (appID, appToken) { return cordova(this, "setupAppIDAndAppToken", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startEstimoteBeaconDiscovery = function () { return cordova(this, "startEstimoteBeaconDiscovery", { "observable": true, "clearFunction": "stopEstimoteBeaconDiscovery" }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopEstimoteBeaconDiscovery = function () { return cordova(this, "stopEstimoteBeaconDiscovery", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startRangingBeaconsInRegion = function (region) { return cordova(this, "startRangingBeaconsInRegion", { "observable": true, "clearFunction": "stopRangingBeaconsInRegion", "clearWithArgs": true }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopRangingBeaconsInRegion = function (region) { return cordova(this, "stopRangingBeaconsInRegion", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startRangingSecureBeaconsInRegion = function (region) { return cordova(this, "startRangingSecureBeaconsInRegion", { "observable": true, "clearFunction": "stopRangingSecureBeaconsInRegion", "clearWithArgs": true }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopRangingSecureBeaconsInRegion = function (region) { return cordova(this, "stopRangingSecureBeaconsInRegion", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startMonitoringForRegion = function (region, notifyEntryStateOnDisplay) { return cordova(this, "startMonitoringForRegion", { "observable": true, "clearFunction": "stopMonitoringForRegion", "clearWithArgs": true, "successIndex": 1, "errorIndex": 2 }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopMonitoringForRegion = function (region) { return cordova(this, "stopMonitoringForRegion", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.startSecureMonitoringForRegion = function (region, notifyEntryStateOnDisplay) { return cordova(this, "startSecureMonitoringForRegion", { "observable": true, "clearFunction": "stopSecureMonitoringForRegion", "clearWithArgs": true, "successIndex": 1, "errorIndex": 2 }, arguments); };
    EstimoteBeaconsOriginal.prototype.stopSecureMonitoringForRegion = function (region) { return cordova(this, "stopSecureMonitoringForRegion", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.connectToBeacon = function (beacon) { return cordova(this, "connectToBeacon", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.disconnectConnectedBeacon = function () { return cordova(this, "disconnectConnectedBeacon", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.writeConnectedProximityUUID = function (uuid) { return cordova(this, "writeConnectedProximityUUID", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.writeConnectedMajor = function (major) { return cordova(this, "writeConnectedMajor", {}, arguments); };
    EstimoteBeaconsOriginal.prototype.writeConnectedMinor = function (minor) { return cordova(this, "writeConnectedMinor", {}, arguments); };
    EstimoteBeaconsOriginal.pluginName = "EstimoteBeacons";
    EstimoteBeaconsOriginal.plugin = "cordova-plugin-estimote";
    EstimoteBeaconsOriginal.pluginRef = "estimote.beacons";
    EstimoteBeaconsOriginal.repo = "https://github.com/evothings/phonegap-estimotebeacons";
    EstimoteBeaconsOriginal.platforms = ["Android", "iOS"];
    return EstimoteBeaconsOriginal;
}(IonicNativePlugin));
var EstimoteBeacons = new EstimoteBeaconsOriginal();
export { EstimoteBeacons };
//# sourceMappingURL=data:application/json;base64,