var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var EstimoteBeacons = /** @class */ (function (_super) {
    __extends(EstimoteBeacons, _super);
    function EstimoteBeacons() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** Proximity value */
        _this.ProximityUnknown = 0;
        /** Proximity value */
        _this.ProximityImmediate = 1;
        /** Proximity value */
        _this.ProximityNear = 2;
        /** Proximity value */
        _this.ProximityFar = 3;
        /** Beacon colour */
        _this.BeaconColorUnknown = 0;
        /** Beacon colour */
        _this.BeaconColorMintCocktail = 1;
        /** Beacon colour */
        _this.BeaconColorIcyMarshmallow = 2;
        /** Beacon colour */
        _this.BeaconColorBlueberryPie = 3;
        /**
         * Beacon colour.
         */
        _this.BeaconColorSweetBeetroot = 4;
        /** Beacon colour */
        _this.BeaconColorCandyFloss = 5;
        /** Beacon colour */
        _this.BeaconColorLemonTart = 6;
        /** Beacon colour */
        _this.BeaconColorVanillaJello = 7;
        /** Beacon colour */
        _this.BeaconColorLiquoriceSwirl = 8;
        /** Beacon colour */
        _this.BeaconColorWhite = 9;
        /** Beacon colour */
        _this.BeaconColorTransparent = 10;
        /** Region state */
        _this.RegionStateUnknown = 'unknown';
        /** Region state */
        _this.RegionStateOutside = 'outside';
        /** Region state */
        _this.RegionStateInside = 'inside';
        return _this;
    }
    EstimoteBeacons.prototype.requestWhenInUseAuthorization = function () { return cordova(this, "requestWhenInUseAuthorization", {}, arguments); };
    EstimoteBeacons.prototype.requestAlwaysAuthorization = function () { return cordova(this, "requestAlwaysAuthorization", {}, arguments); };
    EstimoteBeacons.prototype.authorizationStatus = function () { return cordova(this, "authorizationStatus", {}, arguments); };
    EstimoteBeacons.prototype.startAdvertisingAsBeacon = function (uuid, major, minor, regionId) { return cordova(this, "startAdvertisingAsBeacon", { "clearFunction": "stopAdvertisingAsBeacon" }, arguments); };
    EstimoteBeacons.prototype.stopAdvertisingAsBeacon = function () { return cordova(this, "stopAdvertisingAsBeacon", {}, arguments); };
    EstimoteBeacons.prototype.enableAnalytics = function (enable) { return cordova(this, "enableAnalytics", {}, arguments); };
    EstimoteBeacons.prototype.isAnalyticsEnabled = function () { return cordova(this, "isAnalyticsEnabled", {}, arguments); };
    EstimoteBeacons.prototype.isAuthorized = function () { return cordova(this, "isAuthorized", {}, arguments); };
    EstimoteBeacons.prototype.setupAppIDAndAppToken = function (appID, appToken) { return cordova(this, "setupAppIDAndAppToken", {}, arguments); };
    EstimoteBeacons.prototype.startEstimoteBeaconDiscovery = function () { return cordova(this, "startEstimoteBeaconDiscovery", { "observable": true, "clearFunction": "stopEstimoteBeaconDiscovery" }, arguments); };
    EstimoteBeacons.prototype.stopEstimoteBeaconDiscovery = function () { return cordova(this, "stopEstimoteBeaconDiscovery", {}, arguments); };
    EstimoteBeacons.prototype.startRangingBeaconsInRegion = function (region) { return cordova(this, "startRangingBeaconsInRegion", { "observable": true, "clearFunction": "stopRangingBeaconsInRegion", "clearWithArgs": true }, arguments); };
    EstimoteBeacons.prototype.stopRangingBeaconsInRegion = function (region) { return cordova(this, "stopRangingBeaconsInRegion", {}, arguments); };
    EstimoteBeacons.prototype.startRangingSecureBeaconsInRegion = function (region) { return cordova(this, "startRangingSecureBeaconsInRegion", { "observable": true, "clearFunction": "stopRangingSecureBeaconsInRegion", "clearWithArgs": true }, arguments); };
    EstimoteBeacons.prototype.stopRangingSecureBeaconsInRegion = function (region) { return cordova(this, "stopRangingSecureBeaconsInRegion", {}, arguments); };
    EstimoteBeacons.prototype.startMonitoringForRegion = function (region, notifyEntryStateOnDisplay) { return cordova(this, "startMonitoringForRegion", { "observable": true, "clearFunction": "stopMonitoringForRegion", "clearWithArgs": true, "successIndex": 1, "errorIndex": 2 }, arguments); };
    EstimoteBeacons.prototype.stopMonitoringForRegion = function (region) { return cordova(this, "stopMonitoringForRegion", {}, arguments); };
    EstimoteBeacons.prototype.startSecureMonitoringForRegion = function (region, notifyEntryStateOnDisplay) { return cordova(this, "startSecureMonitoringForRegion", { "observable": true, "clearFunction": "stopSecureMonitoringForRegion", "clearWithArgs": true, "successIndex": 1, "errorIndex": 2 }, arguments); };
    EstimoteBeacons.prototype.stopSecureMonitoringForRegion = function (region) { return cordova(this, "stopSecureMonitoringForRegion", {}, arguments); };
    EstimoteBeacons.prototype.connectToBeacon = function (beacon) { return cordova(this, "connectToBeacon", {}, arguments); };
    EstimoteBeacons.prototype.disconnectConnectedBeacon = function () { return cordova(this, "disconnectConnectedBeacon", {}, arguments); };
    EstimoteBeacons.prototype.writeConnectedProximityUUID = function (uuid) { return cordova(this, "writeConnectedProximityUUID", {}, arguments); };
    EstimoteBeacons.prototype.writeConnectedMajor = function (major) { return cordova(this, "writeConnectedMajor", {}, arguments); };
    EstimoteBeacons.prototype.writeConnectedMinor = function (minor) { return cordova(this, "writeConnectedMinor", {}, arguments); };
    EstimoteBeacons.pluginName = "EstimoteBeacons";
    EstimoteBeacons.plugin = "cordova-plugin-estimote";
    EstimoteBeacons.pluginRef = "estimote.beacons";
    EstimoteBeacons.repo = "https://github.com/evothings/phonegap-estimotebeacons";
    EstimoteBeacons.platforms = ["Android", "iOS"];
    EstimoteBeacons = __decorate([
        Injectable()
    ], EstimoteBeacons);
    return EstimoteBeacons;
}(IonicNativePlugin));
export { EstimoteBeacons };
//# sourceMappingURL=data:application/json;base64,