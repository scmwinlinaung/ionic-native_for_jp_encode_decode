var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var BranchIo = /** @class */ (function (_super) {
    __extends(BranchIo, _super);
    function BranchIo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BranchIo.prototype.setDebug = function (enable) { return cordova(this, "setDebug", { "otherPromise": true }, arguments); };
    BranchIo.prototype.disableTracking = function (disable) { return cordova(this, "disableTracking", { "otherPromise": true }, arguments); };
    BranchIo.prototype.initSession = function () { return cordova(this, "initSession", { "otherPromise": true }, arguments); };
    BranchIo.prototype.setRequestMetadata = function () { return cordova(this, "setRequestMetadata", { "otherPromise": true }, arguments); };
    BranchIo.prototype.setCookieBasedMatching = function (linkDomain) { return cordova(this, "setCookieBasedMatching", { "otherPromise": true }, arguments); };
    BranchIo.prototype.getFirstReferringParams = function () { return cordova(this, "getFirstReferringParams", { "otherPromise": true }, arguments); };
    BranchIo.prototype.getLatestReferringParams = function () { return cordova(this, "getLatestReferringParams", { "otherPromise": true }, arguments); };
    BranchIo.prototype.setIdentity = function (userId) { return cordova(this, "setIdentity", { "otherPromise": true }, arguments); };
    BranchIo.prototype.logout = function () { return cordova(this, "logout", { "otherPromise": true }, arguments); };
    BranchIo.prototype.userCompletedAction = function (eventName, metaData) { return cordova(this, "userCompletedAction", { "otherPromise": true }, arguments); };
    BranchIo.prototype.sendCommerceEvent = function (event, metaData) { return cordova(this, "sendCommerceEvent", { "otherPromise": true }, arguments); };
    BranchIo.prototype.createBranchUniversalObject = function (properties) { return cordova(this, "createBranchUniversalObject", { "otherPromise": true }, arguments); };
    BranchIo.prototype.loadRewards = function (bucket) { return cordova(this, "loadRewards", { "otherPromise": true }, arguments); };
    BranchIo.prototype.redeemRewards = function (value, bucket) { return cordova(this, "redeemRewards", { "otherPromise": true }, arguments); };
    BranchIo.prototype.creditHistory = function () { return cordova(this, "creditHistory", { "otherPromise": true }, arguments); };
    BranchIo.pluginName = "BranchIo";
    BranchIo.plugin = "branch-cordova-sdk";
    BranchIo.pluginRef = "Branch";
    BranchIo.repo = "https://github.com/BranchMetrics/cordova-ionic-phonegap-branch-deep-linking";
    BranchIo.platforms = ["iOS", "Android"];
    BranchIo = __decorate([
        Injectable()
    ], BranchIo);
    return BranchIo;
}(IonicNativePlugin));
export { BranchIo };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JyYW5jaC1pby9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFvRjFDLDRCQUFpQjs7OztJQU83QywyQkFBUSxhQUFDLE1BQWU7SUFVeEIsa0NBQWUsYUFBQyxPQUFnQjtJQVNoQyw4QkFBVztJQVNYLHFDQUFrQjtJQVVsQix5Q0FBc0IsYUFBQyxVQUFrQjtJQVN6QywwQ0FBdUI7SUFTdkIsMkNBQXdCO0lBVXhCLDhCQUFXLGFBQUMsTUFBYztJQVMxQix5QkFBTTtJQVdOLHNDQUFtQixhQUFDLFNBQWlCLEVBQUUsUUFBYTtJQVdwRCxvQ0FBaUIsYUFBQyxLQUFhLEVBQUUsUUFBYTtJQVU5Qyw4Q0FBMkIsYUFDekIsVUFBOEI7SUFXaEMsOEJBQVcsYUFBQyxNQUFXO0lBV3ZCLGdDQUFhLGFBQUMsS0FBYSxFQUFFLE1BQVc7SUFTeEMsZ0NBQWE7Ozs7OztJQWxKRixRQUFRO1FBRHBCLFVBQVUsRUFBRTtPQUNBLFFBQVE7bUJBckZyQjtFQXFGOEIsaUJBQWlCO1NBQWxDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuZXhwb3J0IGludGVyZmFjZSBCcmFuY2hJb1Byb21pc2Uge1xuICAkaWRlbnRpdHlfaWQ/OiBudW1iZXI7XG4gICRvbmVfdGltZV91c2U/OiBib29sZWFuO1xuICAnK2NsaWNrX3RpbWVzdGFtcCc/OiBudW1iZXI7XG4gICcrY2xpY2tlZF9icmFuY2hfbGluayc/OiBib29sZWFuO1xuICAnK2lzX2ZpcnN0X3Nlc3Npb24nPzogYm9vbGVhbjtcbiAgJyttYXRjaF9ndWFyYW50ZWVkJz86IGJvb2xlYW47XG4gIGNvbnRlbnRNZXRhZGF0YT86IHN0cmluZztcbiAgc291cmNlPzogc3RyaW5nO1xuICAnfmNhbXBhaWduJz86IHN0cmluZztcbiAgJ35jaGFubmVsJz86IHN0cmluZztcbiAgJ35jcmVhdGlvbl9zb3VyY2UnPzogc3RyaW5nO1xuICAnfmZlYXR1cmUnPzogc3RyaW5nO1xuICAnfmlkJz86IG51bWJlcjtcbiAgJ35yZWZlcnJpbmdfbGluazonPzogc3RyaW5nO1xuICBbeDogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYW5jaElvQW5hbHl0aWNzIHtcbiAgY2hhbm5lbD86IHN0cmluZztcbiAgZmVhdHVyZT86IHN0cmluZztcbiAgY2FtcGFpZ24/OiBzdHJpbmc7XG4gIHN0YWdlPzogc3RyaW5nO1xuICB0YWdzPzogc3RyaW5nW107XG4gIFt4OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhbmNoSW9Qcm9wZXJ0aWVzIHtcbiAgY29udGVudE1ldGFkYXRhPzoge1xuICAgIFt4OiBzdHJpbmddOiBhbnk7XG4gIH07XG4gIFt4OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhbmNoVW5pdmVyc2FsT2JqZWN0IHtcbiAgZ2VuZXJhdGVTaG9ydFVybChcbiAgICBhbmFseXRpY3M6IEJyYW5jaElvQW5hbHl0aWNzLFxuICAgIHByb3BlcnRpZXM6IEJyYW5jaElvUHJvcGVydGllc1xuICApOiBQcm9taXNlPGFueT47XG4gIHJlZ2lzdGVyVmlldygpOiBQcm9taXNlPGFueT47XG4gIHNob3dTaGFyZVNoZWV0KFxuICAgIGFuYWx5dGljczogQnJhbmNoSW9BbmFseXRpY3MsXG4gICAgcHJvcGVydGllczogQnJhbmNoSW9Qcm9wZXJ0aWVzLFxuICAgIHNoYXJlVGV4dDogc3RyaW5nXG4gICk6IFByb21pc2U8YW55PjtcbiAgb25TaGFyZVNoZWV0TGF1bmNoZWQoY2FsbGJhY2s6IGFueSk6IHZvaWQ7XG4gIG9uU2hhcmVTaGVldERpc21pc3NlZChjYWxsYmFjazogYW55KTogdm9pZDtcbiAgb25MaW5rU2hhcmVSZXNwb25zZShjYWxsYmFjazogYW55KTogdm9pZDtcbiAgb25DaGFubmVsU2VsZWN0ZWQoY2FsbGJhY2s6IGFueSk6IHZvaWQ7XG4gIGxpc3RPblNwb3RsaWdodCgpOiBQcm9taXNlPGFueT47XG59XG5cbi8qKlxuICogQG5hbWUgQnJhbmNoSW9cbiAqIEBkZXNjcmlwdGlvblxuICogQnJhbmNoLmlvIGlzIGFuIGF0dHJpYnV0aW9uIHNlcnZpY2UgZm9yIGRlZXBsaW5raW5nIGFuZCBpbnZpdGF0aW9uIGxpbmtzXG4gKlxuICogQHVzYWdlXG4gKiBgYGBcbiAqIGltcG9ydCB7IEJyYW5jaElvIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9icmFuY2gtaW8vbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBicmFuY2g6IEJyYW5jaElvKSB7IH1cbiAqXG4gKiBgYGBcbiAqXG4gKiBAaW50ZXJmYWNlc1xuICogQnJhbmNoSW9Qcm9taXNlXG4gKiBCcmFuY2hJb0FuYWx5dGljc1xuICogQnJhbmNoSW9Qcm9wZXJ0aWVzXG4gKiBCcmFuY2hVbml2ZXJzYWxPYmplY3RcbiAqXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnQnJhbmNoSW8nLFxuICBwbHVnaW46ICdicmFuY2gtY29yZG92YS1zZGsnLFxuICBwbHVnaW5SZWY6ICdCcmFuY2gnLFxuICByZXBvOlxuICAgICdodHRwczovL2dpdGh1Yi5jb20vQnJhbmNoTWV0cmljcy9jb3Jkb3ZhLWlvbmljLXBob25lZ2FwLWJyYW5jaC1kZWVwLWxpbmtpbmcnLFxuICBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCcmFuY2hJbyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIGZvciBkZXZlbG9wbWVudCBhbmQgZGVidWdnaW5nIG9ubHlcbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGUgRW5hYmxlIGRlYnVnXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIHNldERlYnVnKGVuYWJsZTogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc2FibGUgdHJhY2tpbmdcbiAgICogQHBhcmFtIHtib29sZWFufSBkaXNhYmxlIGRpc2FibGUgdHJhY2tpbmdcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgZGlzYWJsZVRyYWNraW5nKGRpc2FibGU6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyBCcmFuY2hcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgaW5pdFNlc3Npb24oKTogUHJvbWlzZTxCcmFuY2hJb1Byb21pc2U+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2V0IFJlcXVlc3QgTWV0YWRhdGFcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgc2V0UmVxdWVzdE1ldGFkYXRhKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIGZvciBiZXR0ZXIgQW5kcm9pZCBtYXRjaGluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbGlua0RvbWFpbiBMaW5rRG9tYWluIGF0IGJyYW5jaFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBzZXRDb29raWVCYXNlZE1hdGNoaW5nKGxpbmtEb21haW46IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcnN0IGRhdGFcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgZ2V0Rmlyc3RSZWZlcnJpbmdQYXJhbXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTGF0ZXN0IGRhdGFcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgZ2V0TGF0ZXN0UmVmZXJyaW5nUGFyYW1zKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBpZGVudHkgb2YgdXNlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcklkXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIHNldElkZW50aXR5KHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTG9nb3V0IHVzZXJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgbG9nb3V0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGN1c3RvbSBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gICAqIEBwYXJhbSB7YW55fSBtZXRhRGF0YVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICB1c2VyQ29tcGxldGVkQWN0aW9uKGV2ZW50TmFtZTogc3RyaW5nLCBtZXRhRGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBDb21tZXJjZSBFdmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRcbiAgICogQHBhcmFtIHthbnl9IG1ldGFEYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIHNlbmRDb21tZXJjZUV2ZW50KGV2ZW50OiBzdHJpbmcsIG1ldGFEYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBjcmVhdGUgYSBicmFuY2hVbml2ZXJzYWxPYmogdmFyaWFibGUgdG8gcmVmZXJlbmNlIHdpdGggb3RoZXIgQnJhbmNoIG1ldGhvZHNcbiAgICogQHBhcmFtIHtCcmFuY2hJb1Byb3BlcnRpZXN9IHByb3BlcnRpZXNcbiAgICogQHJldHVybiB7UHJvbWlzZTxCcmFuY2hVbml2ZXJzYWxPYmplY3Q+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgY3JlYXRlQnJhbmNoVW5pdmVyc2FsT2JqZWN0KFxuICAgIHByb3BlcnRpZXM6IEJyYW5jaElvUHJvcGVydGllc1xuICApOiBQcm9taXNlPEJyYW5jaFVuaXZlcnNhbE9iamVjdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIGNyZWRpdHNcbiAgICogQHBhcmFtIHthbnl9IGJ1Y2tldFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBsb2FkUmV3YXJkcyhidWNrZXQ6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZGVlbSBSZXdhcmRzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICAgKiBAcGFyYW0ge2FueX0gYnVja2V0XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIHJlZGVlbVJld2FyZHModmFsdWU6IHN0cmluZywgYnVja2V0OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IGNyZWRpdCBoaXN0b3J5XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGNyZWRpdEhpc3RvcnkoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==