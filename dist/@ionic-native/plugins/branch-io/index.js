var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var BranchIoOriginal = /** @class */ (function (_super) {
    __extends(BranchIoOriginal, _super);
    function BranchIoOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BranchIoOriginal.prototype.setDebug = function (enable) { return cordova(this, "setDebug", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.disableTracking = function (disable) { return cordova(this, "disableTracking", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.initSession = function () { return cordova(this, "initSession", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.setRequestMetadata = function () { return cordova(this, "setRequestMetadata", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.setCookieBasedMatching = function (linkDomain) { return cordova(this, "setCookieBasedMatching", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.getFirstReferringParams = function () { return cordova(this, "getFirstReferringParams", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.getLatestReferringParams = function () { return cordova(this, "getLatestReferringParams", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.setIdentity = function (userId) { return cordova(this, "setIdentity", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.logout = function () { return cordova(this, "logout", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.userCompletedAction = function (eventName, metaData) { return cordova(this, "userCompletedAction", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.sendCommerceEvent = function (event, metaData) { return cordova(this, "sendCommerceEvent", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.createBranchUniversalObject = function (properties) { return cordova(this, "createBranchUniversalObject", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.loadRewards = function (bucket) { return cordova(this, "loadRewards", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.redeemRewards = function (value, bucket) { return cordova(this, "redeemRewards", { "otherPromise": true }, arguments); };
    BranchIoOriginal.prototype.creditHistory = function () { return cordova(this, "creditHistory", { "otherPromise": true }, arguments); };
    BranchIoOriginal.pluginName = "BranchIo";
    BranchIoOriginal.plugin = "branch-cordova-sdk";
    BranchIoOriginal.pluginRef = "Branch";
    BranchIoOriginal.repo = "https://github.com/BranchMetrics/cordova-ionic-phonegap-branch-deep-linking";
    BranchIoOriginal.platforms = ["iOS", "Android"];
    return BranchIoOriginal;
}(IonicNativePlugin));
var BranchIo = new BranchIoOriginal();
export { BranchIo };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JyYW5jaC1pby9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFvRjFDLDRCQUFpQjs7OztJQU83QywyQkFBUSxhQUFDLE1BQWU7SUFVeEIsa0NBQWUsYUFBQyxPQUFnQjtJQVNoQyw4QkFBVztJQVNYLHFDQUFrQjtJQVVsQix5Q0FBc0IsYUFBQyxVQUFrQjtJQVN6QywwQ0FBdUI7SUFTdkIsMkNBQXdCO0lBVXhCLDhCQUFXLGFBQUMsTUFBYztJQVMxQix5QkFBTTtJQVdOLHNDQUFtQixhQUFDLFNBQWlCLEVBQUUsUUFBYTtJQVdwRCxvQ0FBaUIsYUFBQyxLQUFhLEVBQUUsUUFBYTtJQVU5Qyw4Q0FBMkIsYUFDekIsVUFBOEI7SUFXaEMsOEJBQVcsYUFBQyxNQUFXO0lBV3ZCLGdDQUFhLGFBQUMsS0FBYSxFQUFFLE1BQVc7SUFTeEMsZ0NBQWE7Ozs7OzttQkF2T2Y7RUFxRjhCLGlCQUFpQjtTQUFsQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQnJhbmNoSW9Qcm9taXNlIHtcbiAgJGlkZW50aXR5X2lkPzogbnVtYmVyO1xuICAkb25lX3RpbWVfdXNlPzogYm9vbGVhbjtcbiAgJytjbGlja190aW1lc3RhbXAnPzogbnVtYmVyO1xuICAnK2NsaWNrZWRfYnJhbmNoX2xpbmsnPzogYm9vbGVhbjtcbiAgJytpc19maXJzdF9zZXNzaW9uJz86IGJvb2xlYW47XG4gICcrbWF0Y2hfZ3VhcmFudGVlZCc/OiBib29sZWFuO1xuICBjb250ZW50TWV0YWRhdGE/OiBzdHJpbmc7XG4gIHNvdXJjZT86IHN0cmluZztcbiAgJ35jYW1wYWlnbic/OiBzdHJpbmc7XG4gICd+Y2hhbm5lbCc/OiBzdHJpbmc7XG4gICd+Y3JlYXRpb25fc291cmNlJz86IHN0cmluZztcbiAgJ35mZWF0dXJlJz86IHN0cmluZztcbiAgJ35pZCc/OiBudW1iZXI7XG4gICd+cmVmZXJyaW5nX2xpbms6Jz86IHN0cmluZztcbiAgW3g6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCcmFuY2hJb0FuYWx5dGljcyB7XG4gIGNoYW5uZWw/OiBzdHJpbmc7XG4gIGZlYXR1cmU/OiBzdHJpbmc7XG4gIGNhbXBhaWduPzogc3RyaW5nO1xuICBzdGFnZT86IHN0cmluZztcbiAgdGFncz86IHN0cmluZ1tdO1xuICBbeDogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYW5jaElvUHJvcGVydGllcyB7XG4gIGNvbnRlbnRNZXRhZGF0YT86IHtcbiAgICBbeDogc3RyaW5nXTogYW55O1xuICB9O1xuICBbeDogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJyYW5jaFVuaXZlcnNhbE9iamVjdCB7XG4gIGdlbmVyYXRlU2hvcnRVcmwoXG4gICAgYW5hbHl0aWNzOiBCcmFuY2hJb0FuYWx5dGljcyxcbiAgICBwcm9wZXJ0aWVzOiBCcmFuY2hJb1Byb3BlcnRpZXNcbiAgKTogUHJvbWlzZTxhbnk+O1xuICByZWdpc3RlclZpZXcoKTogUHJvbWlzZTxhbnk+O1xuICBzaG93U2hhcmVTaGVldChcbiAgICBhbmFseXRpY3M6IEJyYW5jaElvQW5hbHl0aWNzLFxuICAgIHByb3BlcnRpZXM6IEJyYW5jaElvUHJvcGVydGllcyxcbiAgICBzaGFyZVRleHQ6IHN0cmluZ1xuICApOiBQcm9taXNlPGFueT47XG4gIG9uU2hhcmVTaGVldExhdW5jaGVkKGNhbGxiYWNrOiBhbnkpOiB2b2lkO1xuICBvblNoYXJlU2hlZXREaXNtaXNzZWQoY2FsbGJhY2s6IGFueSk6IHZvaWQ7XG4gIG9uTGlua1NoYXJlUmVzcG9uc2UoY2FsbGJhY2s6IGFueSk6IHZvaWQ7XG4gIG9uQ2hhbm5lbFNlbGVjdGVkKGNhbGxiYWNrOiBhbnkpOiB2b2lkO1xuICBsaXN0T25TcG90bGlnaHQoKTogUHJvbWlzZTxhbnk+O1xufVxuXG4vKipcbiAqIEBuYW1lIEJyYW5jaElvXG4gKiBAZGVzY3JpcHRpb25cbiAqIEJyYW5jaC5pbyBpcyBhbiBhdHRyaWJ1dGlvbiBzZXJ2aWNlIGZvciBkZWVwbGlua2luZyBhbmQgaW52aXRhdGlvbiBsaW5rc1xuICpcbiAqIEB1c2FnZVxuICogYGBgXG4gKiBpbXBvcnQgeyBCcmFuY2hJbyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYnJhbmNoLWlvL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgYnJhbmNoOiBCcmFuY2hJbykgeyB9XG4gKlxuICogYGBgXG4gKlxuICogQGludGVyZmFjZXNcbiAqIEJyYW5jaElvUHJvbWlzZVxuICogQnJhbmNoSW9BbmFseXRpY3NcbiAqIEJyYW5jaElvUHJvcGVydGllc1xuICogQnJhbmNoVW5pdmVyc2FsT2JqZWN0XG4gKlxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0JyYW5jaElvJyxcbiAgcGx1Z2luOiAnYnJhbmNoLWNvcmRvdmEtc2RrJyxcbiAgcGx1Z2luUmVmOiAnQnJhbmNoJyxcbiAgcmVwbzpcbiAgICAnaHR0cHM6Ly9naXRodWIuY29tL0JyYW5jaE1ldHJpY3MvY29yZG92YS1pb25pYy1waG9uZWdhcC1icmFuY2gtZGVlcC1saW5raW5nJyxcbiAgcGxhdGZvcm1zOiBbJ2lPUycsICdBbmRyb2lkJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQnJhbmNoSW8gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBmb3IgZGV2ZWxvcG1lbnQgYW5kIGRlYnVnZ2luZyBvbmx5XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlIEVuYWJsZSBkZWJ1Z1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBzZXREZWJ1ZyhlbmFibGU6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRyYWNraW5nXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZGlzYWJsZSBkaXNhYmxlIHRyYWNraW5nXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGRpc2FibGVUcmFja2luZyhkaXNhYmxlOiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgQnJhbmNoXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGluaXRTZXNzaW9uKCk6IFByb21pc2U8QnJhbmNoSW9Qcm9taXNlPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBSZXF1ZXN0IE1ldGFkYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIHNldFJlcXVlc3RNZXRhZGF0YSgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBmb3IgYmV0dGVyIEFuZHJvaWQgbWF0Y2hpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxpbmtEb21haW4gTGlua0RvbWFpbiBhdCBicmFuY2hcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgc2V0Q29va2llQmFzZWRNYXRjaGluZyhsaW5rRG9tYWluOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXJzdCBkYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGdldEZpcnN0UmVmZXJyaW5nUGFyYW1zKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExhdGVzdCBkYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGdldExhdGVzdFJlZmVycmluZ1BhcmFtcygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgaWRlbnR5IG9mIHVzZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBzZXRJZGVudGl0eSh1c2VySWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZ291dCB1c2VyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGxvZ291dCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBjdXN0b20gZXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICAgKiBAcGFyYW0ge2FueX0gbWV0YURhdGFcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgdXNlckNvbXBsZXRlZEFjdGlvbihldmVudE5hbWU6IHN0cmluZywgbWV0YURhdGE6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmQgQ29tbWVyY2UgRXZlbnRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50XG4gICAqIEBwYXJhbSB7YW55fSBtZXRhRGF0YVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBzZW5kQ29tbWVyY2VFdmVudChldmVudDogc3RyaW5nLCBtZXRhRGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogY3JlYXRlIGEgYnJhbmNoVW5pdmVyc2FsT2JqIHZhcmlhYmxlIHRvIHJlZmVyZW5jZSB3aXRoIG90aGVyIEJyYW5jaCBtZXRob2RzXG4gICAqIEBwYXJhbSB7QnJhbmNoSW9Qcm9wZXJ0aWVzfSBwcm9wZXJ0aWVzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8QnJhbmNoVW5pdmVyc2FsT2JqZWN0Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHsgb3RoZXJQcm9taXNlOiB0cnVlIH0pXG4gIGNyZWF0ZUJyYW5jaFVuaXZlcnNhbE9iamVjdChcbiAgICBwcm9wZXJ0aWVzOiBCcmFuY2hJb1Byb3BlcnRpZXNcbiAgKTogUHJvbWlzZTxCcmFuY2hVbml2ZXJzYWxPYmplY3Q+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogTG9hZCBjcmVkaXRzXG4gICAqIEBwYXJhbSB7YW55fSBidWNrZXRcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoeyBvdGhlclByb21pc2U6IHRydWUgfSlcbiAgbG9hZFJld2FyZHMoYnVja2V0OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWRlZW0gUmV3YXJkc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICogQHBhcmFtIHthbnl9IGJ1Y2tldFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICByZWRlZW1SZXdhcmRzKHZhbHVlOiBzdHJpbmcsIGJ1Y2tldDogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2hvdyBjcmVkaXQgaGlzdG9yeVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSh7IG90aGVyUHJvbWlzZTogdHJ1ZSB9KVxuICBjcmVkaXRIaXN0b3J5KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=