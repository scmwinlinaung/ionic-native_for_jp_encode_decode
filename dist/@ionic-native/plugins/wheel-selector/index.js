var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var WheelSelectorOriginal = /** @class */ (function (_super) {
    __extends(WheelSelectorOriginal, _super);
    function WheelSelectorOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WheelSelectorOriginal.prototype.show = function (options) { return cordova(this, "show", {}, arguments); };
    WheelSelectorOriginal.prototype.hideSelector = function () { return cordova(this, "hideSelector", { "platforms": ["iOS"] }, arguments); };
    WheelSelectorOriginal.pluginName = "WheelSelector";
    WheelSelectorOriginal.plugin = "cordova-wheel-selector-plugin";
    WheelSelectorOriginal.pluginRef = "SelectorCordovaPlugin";
    WheelSelectorOriginal.repo = "https://github.com/jasonmamy/cordova-wheel-selector-plugin";
    WheelSelectorOriginal.platforms = ["Android", "iOS"];
    return WheelSelectorOriginal;
}(IonicNativePlugin));
var WheelSelector = new WheelSelectorOriginal();
export { WheelSelector };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3doZWVsLXNlbGVjdG9yL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQXNMckMsaUNBQWlCOzs7O0lBUWxELDRCQUFJLGFBQUMsT0FBNkI7SUFXbEMsb0NBQVk7Ozs7Ozt3QkExTWQ7RUF1TG1DLGlCQUFpQjtTQUF2QyxhQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2hlZWxTZWxlY3Rvckl0ZW0ge1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZWZhdWx0SXRlbSB7XG4gIGluZGV4OiBudW1iZXI7XG4gIHZhbHVlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgV2hlZWxTZWxlY3Rvck9wdGlvbnMge1xuICAvKipcbiAgICogVGhlIHRpdGxlIG9mIHRoZSBzZWxlY3RvcidzIGlucHV0IGJveFxuICAgKi9cbiAgdGl0bGU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGl0ZW1zIHRvIGRpc3BsYXkgKGFycmF5IG9mIGl0ZW1zKS5cbiAgICovXG4gIGl0ZW1zOiBXaGVlbFNlbGVjdG9ySXRlbVtdW107XG5cbiAgLyoqXG4gICAqIFdoaWNoIGl0ZW1zIHRvIGRpc3BsYXkgYnkgZGVmYXVsdC5cbiAgICovXG4gIGRlZmF1bHRJdGVtcz86IERlZmF1bHRJdGVtW107XG5cbiAgLyoqXG4gICAqIFRoZSAnb2snIGJ1dHRvbiB0ZXh0XG4gICAqIERlZmF1bHQ6IERvbmVcbiAgICovXG4gIHBvc2l0aXZlQnV0dG9uVGV4dD86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlICdjYW5jZWwnIGJ1dHRvbiB0ZXh0XG4gICAqIERlZmF1bHQ6IENhbmNlbFxuICAgKi9cbiAgbmVnYXRpdmVCdXR0b25UZXh0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBbmRyb2lkIG9ubHkgLSB0aGVtZSBjb2xvciwgJ2xpZ2h0JyBvciAnZGFyaycuXG4gICAqIERlZmF1bHQ6IGxpZ2h0XG4gICAqL1xuICB0aGVtZT86ICdsaWdodCcgfCAnZGFyayc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gaGF2ZSB0aGUgd2hlZWxzICd3cmFwJyAoQW5kcm9pZCBvbmx5KVxuICAgKiBEZWZhdWx0OiBmYWxzZVxuICAgKi9cbiAgd3JhcFdoZWVsVGV4dD86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBqc29uIGtleSB0byBkaXNwbGF5LCBieSBkZWZhdWx0IGl0IGlzIGRlc2NyaXB0aW9uLCB0aGlzIGFsbG93cyBmb3Igc2V0dGluZyBhbnlcbiAgICoga2V5L3ZhbHVlIHRvIGJlIGRpc3BsYXllZFxuICAgKiBEZWZhdWx0OiBkZXNjcmlwdGlvblxuICAgKi9cbiAgZGlzcGxheUtleT86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXaGVlbFNlbGVjdG9yRGF0YSB7XG4gIGRhdGE6IGFueTtcbn1cblxuLyoqXG4gKiBAYmV0YVxuICogQG5hbWUgV2hlZWxTZWxlY3RvciBQbHVnaW5cbiAqIEBkZXNjcmlwdGlvbiBOYXRpdmUgd2hlZWwgc2VsZWN0b3IgZm9yIENvcmRvdmEgKEFuZHJvaWQvaU9TKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYFxuICogaW1wb3J0IHsgV2hlZWxTZWxlY3RvciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvd2hlZWwtc2VsZWN0b3Ivbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBzZWxlY3RvcjogV2hlZWxTZWxlY3RvcikgeyB9XG4gKlxuICogLi4uXG4gKlxuICogY29uc3QganNvbkRhdGEgPSB7XG4gKiAgIG51bWJlcnM6IFtcbiAqICAgIHsgZGVzY3JpcHRpb246IFwiMVwiIH0sXG4gKiAgICAgeyBkZXNjcmlwdGlvbjogXCIyXCIgfSxcbiAqICAgICB7IGRlc2NyaXB0aW9uOiBcIjNcIiB9XG4gKiAgIF0sXG4gKiAgIGZydWl0czogW1xuICogICAgIHsgZGVzY3JpcHRpb246IFwiQXBwbGVcIiB9LFxuICogICAgIHsgZGVzY3JpcHRpb246IFwiQmFuYW5hXCIgfSxcbiAqICAgICB7IGRlc2NyaXB0aW9uOiBcIlRhbmdlcmluZVwiIH1cbiAqICAgXSxcbiAqICAgZmlyc3ROYW1lczogW1xuICogICAgIHsgbmFtZTogXCJGcmVkXCIsIGlkOiAnMScgfSxcbiAqICAgICB7IG5hbWU6IFwiSmFuZVwiLCBpZDogJzInIH0sXG4gKiAgICAgeyBuYW1lOiBcIkJvYlwiLCBpZDogJzMnIH0sXG4gKiAgICAgeyBuYW1lOiBcIkVhcmxcIiwgaWQ6ICc0JyB9LFxuICogICAgIHsgbmFtZTogXCJFdW5pY2VcIiwgaWQ6ICc1JyB9XG4gKiAgIF0sXG4gKiAgIGxhc3ROYW1lczogW1xuICogICAgIHsgbmFtZTogXCJKb2huc29uXCIsIGlkOiAnMTAwJyB9LFxuICogICAgIHsgbmFtZTogXCJEb2VcIiwgaWQ6ICcxMDEnIH0sXG4gKiAgICAgeyBuYW1lOiBcIktpbmlzaGl3YVwiLCBpZDogJzEwMicgfSxcbiAqICAgICB7IG5hbWU6IFwiR29yZG9uXCIsIGlkOiAnMTAzJyB9LFxuICogICAgIHsgbmFtZTogXCJTbWl0aFwiLCBpZDogJzEwNCcgfVxuICogICBdXG4gKiB9XG4gKlxuICogLi4uXG4gKlxuICogLy8gYmFzaWMgbnVtYmVyIHNlbGVjdGlvbiwgaW5kZXggaXMgYWx3YXlzIHJldHVybmVkIGluIHRoZSByZXN1bHRcbiAqICBzZWxlY3RBTnVtYmVyKCkge1xuICogICAgdGhpcy5zZWxlY3Rvci5zaG93KHtcbiAqICAgICAgdGl0bGU6IFwiSG93IE1hbnk/XCIsXG4gKiAgICAgIGl0ZW1zOiBbXG4gKiAgICAgICAgdGhpcy5qc29uRGF0YS5udW1iZXJzXG4gKiAgICAgIF0sXG4gKiAgICB9KS50aGVuKFxuICogICAgICByZXN1bHQgPT4ge1xuICogICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdFswXS5kZXNjcmlwdGlvbiArICcgYXQgaW5kZXg6ICcgKyByZXN1bHRbMF0uaW5kZXgpO1xuICogICAgICB9LFxuICogICAgICBlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yOiAnLCBlcnIpXG4gKiAgICAgICk7XG4gKiAgfVxuICpcbiAqICAuLi5cbiAqXG4gKiAgLy8gYmFzaWMgc2VsZWN0aW9uLCBzZXR0aW5nIGluaXRpYWwgZGlzcGxheWVkIGRlZmF1bHQgdmFsdWVzOiAnMycgJ0JhbmFuYSdcbiAqICBzZWxlY3RGcnVpdCgpIHtcbiAqICAgIHRoaXMuc2VsZWN0b3Iuc2hvdyh7XG4gKiAgICAgIHRpdGxlOiBcIkhvdyBNdWNoP1wiLFxuICogICAgICBpdGVtczogW1xuICogICAgICAgIHRoaXMuanNvbkRhdGEubnVtYmVycywgdGhpcy5qc29uRGF0YS5mcnVpdHNcbiAqICAgICAgXSxcbiAqICAgICAgcG9zaXRpdmVCdXR0b25UZXh0OiBcIk9rXCIsXG4gKiAgICAgIG5lZ2F0aXZlQnV0dG9uVGV4dDogXCJOb3BlXCIsXG4gKiAgICAgIGRlZmF1bHRJdGVtczogW1xuICogIFx0ICB7aW5kZXg6MCwgdmFsdWU6IHRoaXMuanNvbkRhdGEubnVtYmVyc1syXS5kZXNjcmlwdGlvbn0sXG4gKiAgXHQgIHtpbmRleDogMSwgdmFsdWU6IHRoaXMuanNvbkRhdGEuZnJ1aXRzWzNdLmRlc2NyaXB0aW9ufVxuICogIFx0XVxuICogICAgfSkudGhlbihcbiAqICAgICAgcmVzdWx0ID0+IHtcbiAqICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRbMF0uZGVzY3JpcHRpb24gKyAnICcgKyByZXN1bHRbMV0uZGVzY3JpcHRpb24pO1xuICogICAgICB9LFxuICogICAgICBlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yOiAnICsgSlNPTi5zdHJpbmdpZnkoZXJyKSlcbiAqICAgICAgKTtcbiAqICB9XG4gKlxuICogIC4uLlxuICpcbiAqICAvLyBtb3JlIGNvbXBsZXggYXMgb3ZlcnJpZGVzIHdoaWNoIGtleSB0byBkaXNwbGF5XG4gKiAgLy8gdGhlbiByZXRyaWV2ZSBwcm9wZXJ0aWVzIGZyb20gb3JpZ2luYWwgZGF0YVxuICogIHNlbGVjdE5hbWVzVXNpbmdEaXNwbGF5S2V5KCkge1xuICogICAgdGhpcy5zZWxlY3Rvci5zaG93KHtcbiAqICAgICAgdGl0bGU6IFwiV2hvP1wiLFxuICogICAgICBpdGVtczogW1xuICogICAgICAgIHRoaXMuanNvbkRhdGEuZmlyc3ROYW1lcywgdGhpcy5qc29uRGF0YS5sYXN0TmFtZXNcbiAqICAgICAgXSxcbiAqICAgICAgZGlzcGxheUtleTogJ25hbWUnLFxuICogICAgICBkZWZhdWx0SXRlbXM6IFtcbiAqICBcdCAge2luZGV4OjAsIHZhbHVlOiB0aGlzLmpzb25EYXRhLmZpcnN0TmFtZXNbMl0ubmFtZX0sXG4gKiAgICAgICAge2luZGV4OiAwLCB2YWx1ZTogdGhpcy5qc29uRGF0YS5sYXN0TmFtZXNbM10ubmFtZX1cbiAqICAgICAgXVxuICogICAgfSkudGhlbihcbiAqICAgICAgcmVzdWx0ID0+IHtcbiAqICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHRbMF0ubmFtZSArICcgKGlkPSAnICsgdGhpcy5qc29uRGF0YS5maXJzdE5hbWVzW3Jlc3VsdFswXS5pbmRleF0uaWQgKyAnKSwgJyArXG4gKiAgICAgICAgICByZXN1bHRbMV0ubmFtZSArICcgKGlkPScgKyB0aGlzLmpzb25EYXRhLmxhc3ROYW1lc1tyZXN1bHRbMV0uaW5kZXhdLmlkICsgJyknKTtcbiAqICAgICAgfSxcbiAqICAgICAgZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvcjogJyArIEpTT04uc3RyaW5naWZ5KGVycikpXG4gKiAgICAgICk7XG4gKiAgfVxuICpcbiAqIGBgYFxuICpcbiAqIEBpbnRlcmZhY2VzXG4gKiBXaGVlbFNlbGVjdG9yT3B0aW9uc1xuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1doZWVsU2VsZWN0b3InLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXdoZWVsLXNlbGVjdG9yLXBsdWdpbicsXG4gIHBsdWdpblJlZjogJ1NlbGVjdG9yQ29yZG92YVBsdWdpbicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vamFzb25tYW15L2NvcmRvdmEtd2hlZWwtc2VsZWN0b3ItcGx1Z2luJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbn0pXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXaGVlbFNlbGVjdG9yIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBTaG93cyB0aGUgd2hlZWwgc2VsZWN0b3JcbiAgICogQHBhcmFtIHtXaGVlbFNlbGVjdG9yT3B0aW9uc30gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgd2hlZWwgc2VsZWN0b3JcbiAgICogQHJldHVybnMge1Byb21pc2U8V2hlZWxTZWxlY3RvckRhdGE+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHNlbGVjdGVkIGl0ZW1zLCBvciBhbiBlcnJvci5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2hvdyhvcHRpb25zOiBXaGVlbFNlbGVjdG9yT3B0aW9ucyk6IFByb21pc2U8V2hlZWxTZWxlY3RvckRhdGE+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSGlkZSB0aGUgc2VsZWN0b3JcbiAgICogQHJldHVybnMge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ2lPUyddXG4gIH0pXG4gIGhpZGVTZWxlY3RvcigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==