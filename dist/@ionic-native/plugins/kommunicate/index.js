var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var KommunicateOriginal = /** @class */ (function (_super) {
    __extends(KommunicateOriginal, _super);
    function KommunicateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KommunicateOriginal.prototype.login = function (kmUser) { return cordova(this, "login", {}, arguments); };
    KommunicateOriginal.prototype.registerPushNotification = function () { return cordova(this, "registerPushNotification", {}, arguments); };
    KommunicateOriginal.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    KommunicateOriginal.prototype.updatePushNotificationToken = function (token) { return cordova(this, "updatePushNotificationToken", {}, arguments); };
    KommunicateOriginal.prototype.launchConversation = function () { return cordova(this, "launchConversation", {}, arguments); };
    KommunicateOriginal.prototype.launchParticularConversation = function (conversationObject) { return cordova(this, "launchParticularConversation", {}, arguments); };
    KommunicateOriginal.prototype.startNewConversation = function (conversationParams) { return cordova(this, "startNewConversation", {}, arguments); };
    KommunicateOriginal.prototype.processPushNotification = function (data) { return cordova(this, "processPushNotification", { "sync": true }, arguments); };
    KommunicateOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    KommunicateOriginal.prototype.startSingleChat = function (data) { return cordova(this, "startSingleChat", {}, arguments); };
    KommunicateOriginal.prototype.conversationBuilder = function (converationObject) { return cordova(this, "conversationBuilder", {}, arguments); };
    KommunicateOriginal.pluginName = "Kommunicate";
    KommunicateOriginal.plugin = "kommunicate-cordova-plugin";
    KommunicateOriginal.pluginRef = "kommunicate";
    KommunicateOriginal.repo = "https://github.com/Kommunicate-io/Kommunicate-Cordova-Ionic-PhoneGap-Chat-Plugin";
    KommunicateOriginal.platforms = ["Android", "Browser", "iOS"];
    return KommunicateOriginal;
}(IonicNativePlugin));
var Kommunicate = new KommunicateOriginal();
export { Kommunicate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2tvbW11bmljYXRlL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQTZDdkMsK0JBQWlCOzs7O0lBbUJoRCwyQkFBSyxhQUFDLE1BQVc7SUFRakIsOENBQXdCO0lBUXhCLGdDQUFVO0lBU1YsaURBQTJCLGFBQUMsS0FBYTtJQVF6Qyx3Q0FBa0I7SUFjbEIsa0RBQTRCLGFBQUMsa0JBQXVCO0lBVXBELDBDQUFvQixhQUFDLGtCQUF1QjtJQVM1Qyw2Q0FBdUIsYUFBQyxJQUFTO0lBUWpDLDRCQUFNO0lBVU4scUNBQWUsYUFBQyxJQUFTO0lBZXpCLHlDQUFtQixhQUFDLGlCQUFzQjs7Ozs7O3NCQXBLNUM7RUE4Q2lDLGlCQUFpQjtTQUFyQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQG5hbWUgS29tbXVuaWNhdGVcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIHBsdWdpbiBmb3IgdGhlIEtvbW11bmljYXRlIFNESy5cbiAqIFdpdGggdGhlIGhlbHAgb2YgdGhpcyBwbHVnaW4sIHlvdSBjYW4gZWFzaWx5IGFkZCBodW1hbiArIGJvdCBjaGF0IHN1cHBvcnQgZnVuY3Rpb25hbGl0eSB0byB5b3UgYXBwLlxuICogUmVmZXIgdG86IFRPRE86IGluc2VydCBzaXRlIGxpbmtcbiAqIEZvciBkb2N1bWVudGF0aW9uOiBUT0RPOiBpbnNlcnQgbGlua1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgS29tbXVuaWNhdGUgfSBmcm9tICdAaW9uaWMtbmF0aXZlL0tvbW11bmljYXRlJztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGtvbW11bmljYXRlOiBLb21tdW5pY2F0ZSkgeyB9XG4gKiAvL2Fsc28gYWRkIFsuLi4sIEtvbW11bmljYXRlLCAuLi4gXSBpbnNpZGUgdGhlIHByb3ZpZGVycyBhcnJheSwgaWYgcmVxdWlyZWRcbiAqXG4gKiB2YXIga21Vc2VyID0ge1xuICogICAgdXNlcklkIDogJ3JhbmRvbXN0cmluZycsXG4gKiAgICBhdXRoZW50aWNhdGlvblR5cGVJZCA6IDFcbiAqIH07XG4gKlxuICogdGhpcy5rb21tdW5pY2F0ZS5sb2dpbihrbVVzZXIpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2coXCJTdWNlc3NmdWxseSBsb2dnZWQgaW4uXCIgKyByZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2dnaW5nIGluLlwiICsgZXJyb3IpKTtcbiAqXG4gKiB2YXIgY29udmVyc2F0aW9uT2JqZWN0ID0ge1xuICogICAgaXNVbmlxdWUgOiBmYWxzZVxuICogfTtcbiAqXG4gKiB0aGlzLmtvbW11bmljYXRlLmNvbnZlcnNhdGlvbkJ1aWxkZXIoY29udmVyYXRpb25PYmplY3QpXG4gKiAgIC50aGVuKChjbGllbnRDaGFubmVsS2V5OiBhbnkpID0+IGNvbnNvbGUubG9nKFwiS29tbXVuaWNhdGUgY3JlYXRlIGNvbnZlcnNhdGlvbiBzdWNjZXNzZnVsIHRoZSBjbGllbnRDaGFubmVsS2V5IGlzIDogXCIgKyBjbGllbnRDaGFubmVsS2V5KSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgY29udmVyc2F0aW9uLlwiICsgZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdLb21tdW5pY2F0ZScsXG4gIHBsdWdpbjogJ2tvbW11bmljYXRlLWNvcmRvdmEtcGx1Z2luJyxcbiAgcGx1Z2luUmVmOiAna29tbXVuaWNhdGUnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0tvbW11bmljYXRlLWlvL0tvbW11bmljYXRlLUNvcmRvdmEtSW9uaWMtUGhvbmVHYXAtQ2hhdC1QbHVnaW4nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEtvbW11bmljYXRlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBMb2dpbiB0aGUgdXNlciB3aXRoIHRoZSBkZXRhaWxzIHBhc3NlZCBpblxuICAgKiBDcmVhdGVzIGEgbmV3IHVzZXIgd2l0aCB0aGUgZGV0YWlscyBwcm92aWRlZCB0aGVyZSBpcyBubyBleGlzdGluZyB1c2VyXG4gICAqXG4gICAqIHZhciBrbVVzZXIgPSB7XG4gICAqICAgICd1c2VySWQnIDogJ3VzZXJJZCcsICAgLy9SZXBsYWNlIGl0IHdpdGggdGhlIHVzZXJJZCBvZiB0aGUgbG9nZ2VkIGluIHVzZXJcbiAgICogICAgJ3Bhc3N3b3JkJyA6ICdwYXNzd29yZCcsICAvL3JlcGxhY2Ugd2l0aCBwYXNzd29yZFxuICAgKiAgICAnYXV0aGVudGljYXRpb25UeXBlSWQnIDogMSxcbiAgICogICAgJ2ltYWdlTGluaycgOiA8aW1hZ2UtbGluay1mb3ItdXNlcj5cbiAgICogICAgJ2FwcGxpY2F0aW9uSWQnIDogJzxBUFBfSUQ+JywgIC8vcmVwbGFjZSB0aGlzIHdpdGggeW91ciBBUFBfSUQgZnJvbSBBcHBsb3ppYyBEYXNoYm9hcmRcbiAgICogICAgJ2RldmljZUFwbnNUeXBlJyA6IDAgICAgLy9TZXQgMCBmb3IgRGV2ZWxvcG1lbnQgYW5kIDEgZm9yIERpc3RyaWJ1dGlvbiAoUmVsZWFzZSlcbiAgICogfTtcbiAgICpcbiAgICogQHBhcmFtIGttVXNlciB7YW55fSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9naW4oa21Vc2VyOiBhbnkpOiBQcm9taXNlPGFueT4geyByZXR1cm47IH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgZm9yIHB1c2ggbm90aWZpY2F0aW9uXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVnaXN0ZXJQdXNoTm90aWZpY2F0aW9uKCk6IFByb21pc2U8YW55PiB7IHJldHVybjsgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbnkgdXNlciBpcyBsb2dnZWQgaW4gb3Igbm90XG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNMb2dnZWRJbigpOiBQcm9taXNlPGFueT4geyByZXR1cm47IH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSB0b2tlbiBmb3IgcHVzaCBub3RpZmljYXRpb25zXG4gICAqXG4gICAqIEBwYXJhbSB0b2tlbiB7c3RyaW5nfSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdXBkYXRlUHVzaE5vdGlmaWNhdGlvblRva2VuKHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGFueT4geyByZXR1cm47IH1cblxuICAvKipcbiAgICogTGF1bmNoIHRoZSBjb252ZXJzYXRpb24gc2NyZWVuIChpdCBjb250YWlucyBhbGwgdGhlIGV4aXN0aW5nIGNvbnZlcnNhdGlvbnMpXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbGF1bmNoQ29udmVyc2F0aW9uKCk6IFByb21pc2U8YW55PiB7IHJldHVybjsgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2ggdGhlIGNvbnZlcnNhdGlvbiBpZGVudGlmaWVkIGJ5IHRoZSBnaXZlbiBjaGFubmVsKGNvbnZlcnNhdGlvbikga2V5XG4gICAqXG4gICAqIGxldCBjb252T2JqID0ge1xuICAgKiAgICdjbGllbnRDaGFubmVsS2V5JyA6IGNsaWVudENoYW5uZWxLZXksIC8vcGFzcyB0aGUgY2xpZW50Q2hhbm5lbEtleSBoZXJlXG4gICAqICAgJ3Rha2VPcmRlcicgOiB0cnVlIC8vc2tpcCBjaGF0IGxpc3Qgb24gYmFjayBwcmVzcywgcGFzcyBmYWxzZSBpZiB5b3Ugd2FudCB0byBzaG93IGNoYXQgbGlzdCBvbiBiYWNrIHByZXNzXG4gICAqIH07XG4gICAqXG4gICAqIEBwYXJhbSBjb252ZXJzYXRpb25PYmplY3Qge2FueX0gdGhlIGNoYW5uZWwga2V5IGFuZCBvdGhlciBpbmZvcm1hdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxhdW5jaFBhcnRpY3VsYXJDb252ZXJzYXRpb24oY29udmVyc2F0aW9uT2JqZWN0OiBhbnkpOiBQcm9taXNlPGFueT4geyByZXR1cm47IH1cblxuICAvKipcbiAgICogU3RhcnQgYSBuZXcgY29udmVyc2F0aW9uLCBkZXRhaWxzIGFib3V0IHRoZSBjb252ZXJzYXRpb24gdG8gYmUgcGFzc2VkIGFzIHBhcmFtZXRlcnNcbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIGNvbnZlcmF0aW9uUGFyYW1zIHthbnl9IHRoZSB1c2VyIGRldGFpbHNcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdGFydE5ld0NvbnZlcnNhdGlvbihjb252ZXJzYXRpb25QYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7IHJldHVybjsgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIHB1c2ggbm90aWZpY2F0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0gZGF0YSB7YW55fSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZS9mYWxzZVxuICAgKi9cbiAgQENvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gIHByb2Nlc3NQdXNoTm90aWZpY2F0aW9uKGRhdGE6IGFueSk6IGJvb2xlYW4geyByZXR1cm47IH1cblxuICAvKipcbiAgICogTG9nb3V0IHRoZSBjdXJyZW50IHVzZXJcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBsb2dvdXQoKTogUHJvbWlzZTxhbnk+IHsgcmV0dXJuOyB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGEgc2luZ2xlIGNoYXQgKGNvbnZlcnNhdGlvbilcbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogQHBhcmFtIGRhdGEge2FueX0gdGhlIHVzZXIgZGV0YWlsc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0YXJ0U2luZ2xlQ2hhdChkYXRhOiBhbnkpOiBQcm9taXNlPGFueT4geyByZXR1cm47IH1cblxuICAvKipcbiAgICogTGF1bmNoZXMgYSBjb252ZXJzYXRpb24gd2l0aCB0aGUgcHJvcGVydGllcyBwYXNzZWQgaW4gdGhlIGNvbnZlcnNhdGlvbiBwYXJhbVxuICAgKlxuICAgKiB2YXIgY29udmVyc2F0aW9uT2JqZWN0ID0ge1xuICAgKiAgICdpc1VuaXF1ZScgOiBmYWxzZSxcbiAgICogICAnYWdlbnRJZHMnOlsnPEFHRU5UX0lEPiddLCAgLy9MaXN0IG9mIGFnZW50SWRzLiBBR0VOVF9JRCBpcyB0aGUgZW1haWxJRCB1c2VkIHRvIHNpZ251cCBvbiBLb21tdW5pY2F0ZVxuICAgKiAgICdib3RJZHMnOiBbJzxCT1RfSUQ+J10gIC8vTGlzdCBvZiBib3RJZHMuIEdvIHRvIE1hbmFnZSBCb3RzKGh0dHBzOi8vZGFzaGJvYXJkLmtvbW11bmljYXRlLmlvL2JvdHMvbWFuYWdlLWJvdHMpIC0+IENvcHkgYm90SURcbiAgICogfTtcbiAgICpcbiAgICogQHBhcmFtIGNvbnZlcnNhdGlvbk9iamVjdCB7YW55fSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY29udmVyc2F0aW9uQnVpbGRlcihjb252ZXJhdGlvbk9iamVjdDogYW55KTogUHJvbWlzZTxhbnk+IHsgcmV0dXJuOyB9XG5cbn1cbiJdfQ==