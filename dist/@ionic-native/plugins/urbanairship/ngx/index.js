var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
/**
 * Enum for notification types.
 * @readonly
 * @enum {number}
 */
export var NotificationType;
(function (NotificationType) {
    NotificationType[NotificationType["none"] = 0] = "none";
    NotificationType[NotificationType["badge"] = 1] = "badge";
    NotificationType[NotificationType["sound"] = 2] = "sound";
    NotificationType[NotificationType["alert"] = 4] = "alert";
})(NotificationType || (NotificationType = {}));
/**
 * Enum for presentation options.
 * @readonly
 * @enum {number}
 */
export var PresentationOptions;
(function (PresentationOptions) {
    PresentationOptions[PresentationOptions["none"] = 0] = "none";
    PresentationOptions[PresentationOptions["badge"] = 1] = "badge";
    PresentationOptions[PresentationOptions["sound"] = 2] = "sound";
    PresentationOptions[PresentationOptions["alert"] = 4] = "alert";
})(PresentationOptions || (PresentationOptions = {}));
var UrbanAirShip = /** @class */ (function (_super) {
    __extends(UrbanAirShip, _super);
    function UrbanAirShip() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UrbanAirShip.prototype.reattach = function () { return cordova(this, "reattach", {}, arguments); };
    UrbanAirShip.prototype.takeOff = function (config) { return cordova(this, "takeOff", {}, arguments); };
    UrbanAirShip.prototype.setAndroidNotificationConfig = function (config) { return cordova(this, "setAndroidNotificationConfig", {}, arguments); };
    UrbanAirShip.prototype.setAutoLaunchDefaultMessageCenter = function (enabled) { return cordova(this, "setAutoLaunchDefaultMessageCenter", {}, arguments); };
    UrbanAirShip.prototype.setUserNotificationsEnabled = function (enabled) { return cordova(this, "setUserNotificationsEnabled", {}, arguments); };
    UrbanAirShip.prototype.isUserNotificationsEnabled = function () { return cordova(this, "isUserNotificationsEnabled", {}, arguments); };
    UrbanAirShip.prototype.isAppNotificationsEnabled = function () { return cordova(this, "isAppNotificationsEnabled", {}, arguments); };
    UrbanAirShip.prototype.getChannelID = function () { return cordova(this, "getChannelID", {}, arguments); };
    UrbanAirShip.prototype.getLaunchNotification = function (clear) { return cordova(this, "getLaunchNotification", {}, arguments); };
    UrbanAirShip.prototype.getDeepLink = function (clear) { return cordova(this, "getDeepLink", {}, arguments); };
    UrbanAirShip.prototype.getTags = function () { return cordova(this, "getTags", {}, arguments); };
    UrbanAirShip.prototype.setTags = function (tags) { return cordova(this, "setTags", {}, arguments); };
    UrbanAirShip.prototype.getAlias = function () { return cordova(this, "getAlias", {}, arguments); };
    UrbanAirShip.prototype.setAlias = function (alias) { return cordova(this, "setAlias", {}, arguments); };
    UrbanAirShip.prototype.isQuietTimeEnabled = function () { return cordova(this, "isQuietTimeEnabled", {}, arguments); };
    UrbanAirShip.prototype.setQuietTimeEnabled = function (enabled) { return cordova(this, "setQuietTimeEnabled", {}, arguments); };
    UrbanAirShip.prototype.isInQuietTime = function () { return cordova(this, "isInQuietTime", {}, arguments); };
    UrbanAirShip.prototype.getQuietTime = function () { return cordova(this, "getQuietTime", {}, arguments); };
    UrbanAirShip.prototype.setQuietTime = function (startHour, startMinute, endHour, endMinute) { return cordova(this, "setQuietTime", {}, arguments); };
    UrbanAirShip.prototype.setAnalyticsEnabled = function (enabled) { return cordova(this, "setAnalyticsEnabled", {}, arguments); };
    UrbanAirShip.prototype.isAnalyticsEnabled = function () { return cordova(this, "isAnalyticsEnabled", {}, arguments); };
    UrbanAirShip.prototype.getNamedUser = function () { return cordova(this, "getNamedUser", {}, arguments); };
    UrbanAirShip.prototype.setNamedUser = function (namedUser) { return cordova(this, "setNamedUser", {}, arguments); };
    UrbanAirShip.prototype.runAction = function (actionName, actionValue) { return cordova(this, "runAction", {}, arguments); };
    UrbanAirShip.prototype.editNamedUserTagGroups = function () { return cordova(this, "editNamedUserTagGroups", {}, arguments); };
    UrbanAirShip.prototype.editChannelTagGroups = function () { return cordova(this, "editChannelTagGroups", {}, arguments); };
    UrbanAirShip.prototype.setAssociatedIdentifier = function (key, identifier) { return cordova(this, "setAssociatedIdentifier", {}, arguments); };
    UrbanAirShip.prototype.setLocationEnabled = function (enabled) { return cordova(this, "setLocationEnabled", {}, arguments); };
    UrbanAirShip.prototype.isLocationEnabled = function () { return cordova(this, "isLocationEnabled", {}, arguments); };
    UrbanAirShip.prototype.setBackgroundLocationEnabled = function (enabled) { return cordova(this, "setBackgroundLocationEnabled", {}, arguments); };
    UrbanAirShip.prototype.isBackgroundLocationEnabled = function () { return cordova(this, "isBackgroundLocationEnabled", {}, arguments); };
    UrbanAirShip.prototype.displayMessageCenter = function () { return cordova(this, "displayMessageCenter", {}, arguments); };
    UrbanAirShip.prototype.dismissMessageCenter = function () { return cordova(this, "dismissMessageCenter", {}, arguments); };
    UrbanAirShip.prototype.dismissInboxMessage = function () { return cordova(this, "dismissInboxMessage", {}, arguments); };
    UrbanAirShip.prototype.dismissOverlayInboxMessage = function () { return cordova(this, "dismissOverlayInboxMessage", {}, arguments); };
    UrbanAirShip.prototype.getInboxMessages = function () { return cordova(this, "getInboxMessages", {}, arguments); };
    UrbanAirShip.prototype.markInboxMessageRead = function (messageId) { return cordova(this, "markInboxMessageRead", {}, arguments); };
    UrbanAirShip.prototype.deleteInboxMessage = function (messageId) { return cordova(this, "deleteInboxMessage", {}, arguments); };
    UrbanAirShip.prototype.displayInboxMessage = function (messageId) { return cordova(this, "displayInboxMessage", {}, arguments); };
    UrbanAirShip.prototype.refreshInbox = function () { return cordova(this, "refreshInbox", {}, arguments); };
    UrbanAirShip.prototype.overlayInboxMessage = function (messageId) { return cordova(this, "overlayInboxMessage", {}, arguments); };
    UrbanAirShip.prototype.clearNotification = function (identifier) { return cordova(this, "clearNotification", {}, arguments); };
    UrbanAirShip.prototype.clearNotifications = function () { return cordova(this, "clearNotifications", {}, arguments); };
    UrbanAirShip.prototype.getActiveNotifications = function () { return cordova(this, "getActiveNotifications", {}, arguments); };
    UrbanAirShip.prototype.setAutobadgeEnabled = function (enabled) { return cordova(this, "setAutobadgeEnabled", {}, arguments); };
    UrbanAirShip.prototype.setBadgeNumber = function (count) { return cordova(this, "setBadgeNumber", {}, arguments); };
    UrbanAirShip.prototype.getBadgeNumber = function () { return cordova(this, "getBadgeNumber", {}, arguments); };
    UrbanAirShip.prototype.resetBadge = function () { return cordova(this, "resetBadge", {}, arguments); };
    UrbanAirShip.prototype.setNotificationTypes = function (types) { return cordova(this, "setNotificationTypes", {}, arguments); };
    UrbanAirShip.prototype.setPresentationOptions = function (options) { return cordova(this, "setPresentationOptions", {}, arguments); };
    UrbanAirShip.prototype.isSoundEnabled = function () { return cordova(this, "isSoundEnabled", {}, arguments); };
    UrbanAirShip.prototype.setSoundEnabled = function (enabled) { return cordova(this, "setSoundEnabled", {}, arguments); };
    UrbanAirShip.prototype.isVibrateEnabled = function () { return cordova(this, "isVibrateEnabled", {}, arguments); };
    UrbanAirShip.prototype.setVibrateEnabled = function (enabled) { return cordova(this, "setVibrateEnabled", {}, arguments); };
    UrbanAirShip.prototype.addCustomEvent = function (event) { return cordova(this, "addCustomEvent", {}, arguments); };
    UrbanAirShip.pluginName = "UrbanAirShip";
    UrbanAirShip.plugin = "urbanairship-cordova";
    UrbanAirShip.pluginRef = "window.UAirship";
    UrbanAirShip.repo = "https://www.npmjs.com/package/urbanairship-cordova";
    UrbanAirShip.install = "ionic cordova plugin add urbanairship-cordova";
    UrbanAirShip.platforms = ["Android", "iOS"];
    UrbanAirShip = __decorate([
        Injectable()
    ], UrbanAirShip);
    return UrbanAirShip;
}(IonicNativePlugin));
export { UrbanAirShip };
//# sourceMappingURL=data:application/json;base64,