var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
/**
 * Enum for notification types.
 * @readonly
 * @enum {number}
 */
export var NotificationType;
(function (NotificationType) {
    NotificationType[NotificationType["none"] = 0] = "none";
    NotificationType[NotificationType["badge"] = 1] = "badge";
    NotificationType[NotificationType["sound"] = 2] = "sound";
    NotificationType[NotificationType["alert"] = 4] = "alert";
})(NotificationType || (NotificationType = {}));
/**
 * Enum for presentation options.
 * @readonly
 * @enum {number}
 */
export var PresentationOptions;
(function (PresentationOptions) {
    PresentationOptions[PresentationOptions["none"] = 0] = "none";
    PresentationOptions[PresentationOptions["badge"] = 1] = "badge";
    PresentationOptions[PresentationOptions["sound"] = 2] = "sound";
    PresentationOptions[PresentationOptions["alert"] = 4] = "alert";
})(PresentationOptions || (PresentationOptions = {}));
var UrbanAirShipOriginal = /** @class */ (function (_super) {
    __extends(UrbanAirShipOriginal, _super);
    function UrbanAirShipOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UrbanAirShipOriginal.prototype.reattach = function () { return cordova(this, "reattach", {}, arguments); };
    UrbanAirShipOriginal.prototype.takeOff = function (config) { return cordova(this, "takeOff", {}, arguments); };
    UrbanAirShipOriginal.prototype.setAndroidNotificationConfig = function (config) { return cordova(this, "setAndroidNotificationConfig", {}, arguments); };
    UrbanAirShipOriginal.prototype.setAutoLaunchDefaultMessageCenter = function (enabled) { return cordova(this, "setAutoLaunchDefaultMessageCenter", {}, arguments); };
    UrbanAirShipOriginal.prototype.setUserNotificationsEnabled = function (enabled) { return cordova(this, "setUserNotificationsEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isUserNotificationsEnabled = function () { return cordova(this, "isUserNotificationsEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isAppNotificationsEnabled = function () { return cordova(this, "isAppNotificationsEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.getChannelID = function () { return cordova(this, "getChannelID", {}, arguments); };
    UrbanAirShipOriginal.prototype.getLaunchNotification = function (clear) { return cordova(this, "getLaunchNotification", {}, arguments); };
    UrbanAirShipOriginal.prototype.getDeepLink = function (clear) { return cordova(this, "getDeepLink", {}, arguments); };
    UrbanAirShipOriginal.prototype.getTags = function () { return cordova(this, "getTags", {}, arguments); };
    UrbanAirShipOriginal.prototype.setTags = function (tags) { return cordova(this, "setTags", {}, arguments); };
    UrbanAirShipOriginal.prototype.getAlias = function () { return cordova(this, "getAlias", {}, arguments); };
    UrbanAirShipOriginal.prototype.setAlias = function (alias) { return cordova(this, "setAlias", {}, arguments); };
    UrbanAirShipOriginal.prototype.isQuietTimeEnabled = function () { return cordova(this, "isQuietTimeEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.setQuietTimeEnabled = function (enabled) { return cordova(this, "setQuietTimeEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isInQuietTime = function () { return cordova(this, "isInQuietTime", {}, arguments); };
    UrbanAirShipOriginal.prototype.getQuietTime = function () { return cordova(this, "getQuietTime", {}, arguments); };
    UrbanAirShipOriginal.prototype.setQuietTime = function (startHour, startMinute, endHour, endMinute) { return cordova(this, "setQuietTime", {}, arguments); };
    UrbanAirShipOriginal.prototype.setAnalyticsEnabled = function (enabled) { return cordova(this, "setAnalyticsEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isAnalyticsEnabled = function () { return cordova(this, "isAnalyticsEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.getNamedUser = function () { return cordova(this, "getNamedUser", {}, arguments); };
    UrbanAirShipOriginal.prototype.setNamedUser = function (namedUser) { return cordova(this, "setNamedUser", {}, arguments); };
    UrbanAirShipOriginal.prototype.runAction = function (actionName, actionValue) { return cordova(this, "runAction", {}, arguments); };
    UrbanAirShipOriginal.prototype.editNamedUserTagGroups = function () { return cordova(this, "editNamedUserTagGroups", {}, arguments); };
    UrbanAirShipOriginal.prototype.editChannelTagGroups = function () { return cordova(this, "editChannelTagGroups", {}, arguments); };
    UrbanAirShipOriginal.prototype.setAssociatedIdentifier = function (key, identifier) { return cordova(this, "setAssociatedIdentifier", {}, arguments); };
    UrbanAirShipOriginal.prototype.setLocationEnabled = function (enabled) { return cordova(this, "setLocationEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isLocationEnabled = function () { return cordova(this, "isLocationEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.setBackgroundLocationEnabled = function (enabled) { return cordova(this, "setBackgroundLocationEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isBackgroundLocationEnabled = function () { return cordova(this, "isBackgroundLocationEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.displayMessageCenter = function () { return cordova(this, "displayMessageCenter", {}, arguments); };
    UrbanAirShipOriginal.prototype.dismissMessageCenter = function () { return cordova(this, "dismissMessageCenter", {}, arguments); };
    UrbanAirShipOriginal.prototype.dismissInboxMessage = function () { return cordova(this, "dismissInboxMessage", {}, arguments); };
    UrbanAirShipOriginal.prototype.dismissOverlayInboxMessage = function () { return cordova(this, "dismissOverlayInboxMessage", {}, arguments); };
    UrbanAirShipOriginal.prototype.getInboxMessages = function () { return cordova(this, "getInboxMessages", {}, arguments); };
    UrbanAirShipOriginal.prototype.markInboxMessageRead = function (messageId) { return cordova(this, "markInboxMessageRead", {}, arguments); };
    UrbanAirShipOriginal.prototype.deleteInboxMessage = function (messageId) { return cordova(this, "deleteInboxMessage", {}, arguments); };
    UrbanAirShipOriginal.prototype.displayInboxMessage = function (messageId) { return cordova(this, "displayInboxMessage", {}, arguments); };
    UrbanAirShipOriginal.prototype.refreshInbox = function () { return cordova(this, "refreshInbox", {}, arguments); };
    UrbanAirShipOriginal.prototype.overlayInboxMessage = function (messageId) { return cordova(this, "overlayInboxMessage", {}, arguments); };
    UrbanAirShipOriginal.prototype.clearNotification = function (identifier) { return cordova(this, "clearNotification", {}, arguments); };
    UrbanAirShipOriginal.prototype.clearNotifications = function () { return cordova(this, "clearNotifications", {}, arguments); };
    UrbanAirShipOriginal.prototype.getActiveNotifications = function () { return cordova(this, "getActiveNotifications", {}, arguments); };
    UrbanAirShipOriginal.prototype.setAutobadgeEnabled = function (enabled) { return cordova(this, "setAutobadgeEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.setBadgeNumber = function (count) { return cordova(this, "setBadgeNumber", {}, arguments); };
    UrbanAirShipOriginal.prototype.getBadgeNumber = function () { return cordova(this, "getBadgeNumber", {}, arguments); };
    UrbanAirShipOriginal.prototype.resetBadge = function () { return cordova(this, "resetBadge", {}, arguments); };
    UrbanAirShipOriginal.prototype.setNotificationTypes = function (types) { return cordova(this, "setNotificationTypes", {}, arguments); };
    UrbanAirShipOriginal.prototype.setPresentationOptions = function (options) { return cordova(this, "setPresentationOptions", {}, arguments); };
    UrbanAirShipOriginal.prototype.isSoundEnabled = function () { return cordova(this, "isSoundEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.setSoundEnabled = function (enabled) { return cordova(this, "setSoundEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.isVibrateEnabled = function () { return cordova(this, "isVibrateEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.setVibrateEnabled = function (enabled) { return cordova(this, "setVibrateEnabled", {}, arguments); };
    UrbanAirShipOriginal.prototype.addCustomEvent = function (event) { return cordova(this, "addCustomEvent", {}, arguments); };
    UrbanAirShipOriginal.pluginName = "UrbanAirShip";
    UrbanAirShipOriginal.plugin = "urbanairship-cordova";
    UrbanAirShipOriginal.pluginRef = "window.UAirship";
    UrbanAirShipOriginal.repo = "https://www.npmjs.com/package/urbanairship-cordova";
    UrbanAirShipOriginal.install = "ionic cordova plugin add urbanairship-cordova";
    UrbanAirShipOriginal.platforms = ["Android", "iOS"];
    return UrbanAirShipOriginal;
}(IonicNativePlugin));
var UrbanAirShip = new UrbanAirShipOriginal();
export { UrbanAirShip };
//# sourceMappingURL=data:application/json;base64,