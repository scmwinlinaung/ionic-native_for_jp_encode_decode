var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, cordovaFunctionOverride } from '@ionic-native/core';
import { Observable } from 'rxjs';
var GeofenceOriginal = /** @class */ (function (_super) {
    __extends(GeofenceOriginal, _super);
    function GeofenceOriginal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.TransitionType = {
            ENTER: 1,
            EXIT: 2,
            BOTH: 3
        };
        return _this;
    }
    GeofenceOriginal.prototype.onTransitionReceived = function () { return cordovaFunctionOverride(this, "onTransitionReceived", {}, arguments); };
    GeofenceOriginal.prototype.initialize = function () { return cordova(this, "initialize", {}, arguments); };
    GeofenceOriginal.prototype.addOrUpdate = function (geofences) { return cordova(this, "addOrUpdate", {}, arguments); };
    GeofenceOriginal.prototype.remove = function (geofenceId) { return cordova(this, "remove", {}, arguments); };
    GeofenceOriginal.prototype.removeAll = function () { return cordova(this, "removeAll", {}, arguments); };
    GeofenceOriginal.prototype.getWatched = function () { return cordova(this, "getWatched", {}, arguments); };
    /**
     * Called when the user clicks a geofence notification. iOS and Android only.
     *
     * @returns {Observable<any>}
     */
    GeofenceOriginal.prototype.onNotificationClicked = function () {
        return new Observable(function (observer) {
            typeof window !== 'undefined' &&
                window.geofence &&
                (window.geofence.onNotificationClicked = observer.next.bind(observer));
            return function () { return (window.geofence.onNotificationClicked = function () { }); };
        });
    };
    GeofenceOriginal.pluginName = "Geofence";
    GeofenceOriginal.plugin = "cordova-plugin-geofence";
    GeofenceOriginal.pluginRef = "geofence";
    GeofenceOriginal.repo = "https://github.com/cowbell/cordova-plugin-geofence";
    GeofenceOriginal.platforms = ["Android", "iOS", "Windows", "Windows Phone 8"];
    return GeofenceOriginal;
}(IonicNativePlugin));
var Geofence = new GeofenceOriginal();
export { Geofence };
//# sourceMappingURL=data:application/json;base64,