var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Admob = /** @class */ (function (_super) {
    __extends(Admob, _super);
    function Admob() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Admob.prototype.setOptions = function (options) { return cordova(this, "setOptions", {}, arguments); };
    Admob.prototype.createBannerView = function (options) { return cordova(this, "createBannerView", {}, arguments); };
    Admob.prototype.showBannerAd = function (show) { return cordova(this, "showBannerAd", {}, arguments); };
    Admob.prototype.destroyBannerView = function () { return cordova(this, "destroyBannerView", {}, arguments); };
    Admob.prototype.requestInterstitialAd = function (options) { return cordova(this, "requestInterstitialAd", {}, arguments); };
    Admob.prototype.showInterstitialAd = function () { return cordova(this, "showInterstitialAd", {}, arguments); };
    Admob.prototype.requestRewardedAd = function (options) { return cordova(this, "requestRewardedAd", {}, arguments); };
    Admob.prototype.showRewardedAd = function () { return cordova(this, "showRewardedAd", {}, arguments); };
    Admob.prototype.onAdLoaded = function () { return cordova(this, "onAdLoaded", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdLoaded", "element": "document" }, arguments); };
    Admob.prototype.onAdFailedToLoad = function () { return cordova(this, "onAdFailedToLoad", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdFailedToLoad", "element": "document" }, arguments); };
    Admob.prototype.onAdOpened = function () { return cordova(this, "onAdOpened", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdOpened", "element": "document" }, arguments); };
    Admob.prototype.onAdClosed = function () { return cordova(this, "onAdClosed", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdClosed", "element": "document" }, arguments); };
    Admob.prototype.onAdLeftApplication = function () { return cordova(this, "onAdLeftApplication", { "eventObservable": true, "event": "appfeel.cordova.admob.onAdLeftApplication", "element": "document" }, arguments); };
    Admob.prototype.onRewardedAd = function () { return cordova(this, "onRewardedAd", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAd", "element": "document" }, arguments); };
    Admob.prototype.onRewardedAdVideoStarted = function () { return cordova(this, "onRewardedAdVideoStarted", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAdVideoStarted", "element": "document" }, arguments); };
    Admob.prototype.onRewardedAdVideoCompleted = function () { return cordova(this, "onRewardedAdVideoCompleted", { "eventObservable": true, "event": "appfeel.cordova.admob.onRewardedAdVideoCompleted", "element": "document" }, arguments); };
    Object.defineProperty(Admob.prototype, "AD_SIZE", {
        get: function () { return cordovaPropertyGet(this, "AD_SIZE"); },
        set: function (value) { cordovaPropertySet(this, "AD_SIZE", value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Admob.prototype, "AD_TYPE", {
        get: function () { return cordovaPropertyGet(this, "AD_TYPE"); },
        set: function (value) { cordovaPropertySet(this, "AD_TYPE", value); },
        enumerable: true,
        configurable: true
    });
    Admob.pluginName = "Admob";
    Admob.plugin = "cordova-admob";
    Admob.pluginRef = "admob";
    Admob.repo = "https://github.com/appfeel/admob-google-cordova";
    Admob.platforms = ["Android", "iOS"];
    Admob = __decorate([
        Injectable()
    ], Admob);
    return Admob;
}(IonicNativePlugin));
export { Admob };
//# sourceMappingURL=data:application/json;base64,