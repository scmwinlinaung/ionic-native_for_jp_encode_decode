var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CleverTap = /** @class */ (function (_super) {
    __extends(CleverTap, _super);
    function CleverTap() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CleverTap.prototype.notifyDeviceReady = function () { return cordova(this, "notifyDeviceReady", {}, arguments); };
    CleverTap.prototype.enablePersonalization = function () { return cordova(this, "enablePersonalization", {}, arguments); };
    CleverTap.prototype.setOptOut = function (optOut) { return cordova(this, "setOptOut", {}, arguments); };
    CleverTap.prototype.enableDeviceNetworkInfoReporting = function (enable) { return cordova(this, "enableDeviceNetworkInfoReporting", {}, arguments); };
    CleverTap.prototype.registerPush = function () { return cordova(this, "registerPush", {}, arguments); };
    CleverTap.prototype.setPushToken = function (token) { return cordova(this, "setPushToken", {}, arguments); };
    CleverTap.prototype.createNotificationChannel = function (channelID, channelName, channelDescription, importance, showBadge) { return cordova(this, "createNotificationChannel", {}, arguments); };
    CleverTap.prototype.createNotificationChannelWithSound = function (channelID, channelName, channelDescription, importance, showBadge, sound) { return cordova(this, "createNotificationChannelWithSound", {}, arguments); };
    CleverTap.prototype.createNotificationChannelWithGroupId = function (channelID, channelName, channelDescription, importance, groupId, showBadge) { return cordova(this, "createNotificationChannelWithGroupId", {}, arguments); };
    CleverTap.prototype.createNotificationChannelWithGroupIdAndSound = function (channelID, channelName, channelDescription, importance, groupId, showBadge, sound) { return cordova(this, "createNotificationChannelWithGroupIdAndSound", {}, arguments); };
    CleverTap.prototype.createNotificationChannelGroup = function (groupID, groupName) { return cordova(this, "createNotificationChannelGroup", {}, arguments); };
    CleverTap.prototype.deleteNotificationChannel = function (channelID) { return cordova(this, "deleteNotificationChannel", {}, arguments); };
    CleverTap.prototype.deleteNotificationChannelGroup = function (groupID) { return cordova(this, "deleteNotificationChannelGroup", {}, arguments); };
    CleverTap.prototype.recordScreenView = function (screenName) { return cordova(this, "recordScreenView", {}, arguments); };
    CleverTap.prototype.recordEventWithName = function (eventName) { return cordova(this, "recordEventWithName", {}, arguments); };
    CleverTap.prototype.recordEventWithNameAndProps = function (eventName, eventProps) { return cordova(this, "recordEventWithNameAndProps", {}, arguments); };
    CleverTap.prototype.recordChargedEventWithDetailsAndItems = function (details, items) { return cordova(this, "recordChargedEventWithDetailsAndItems", {}, arguments); };
    CleverTap.prototype.eventGetFirstTime = function (eventName) { return cordova(this, "eventGetFirstTime", {}, arguments); };
    CleverTap.prototype.eventGetLastTime = function (eventName) { return cordova(this, "eventGetLastTime", {}, arguments); };
    CleverTap.prototype.eventGetOccurrences = function (eventName) { return cordova(this, "eventGetOccurrences", {}, arguments); };
    CleverTap.prototype.eventGetDetails = function (eventName) { return cordova(this, "eventGetDetails", {}, arguments); };
    CleverTap.prototype.getEventHistory = function () { return cordova(this, "getEventHistory", {}, arguments); };
    CleverTap.prototype.getLocation = function () { return cordova(this, "getLocation", {}, arguments); };
    CleverTap.prototype.setLocation = function (lat, lon) { return cordova(this, "setLocation", {}, arguments); };
    CleverTap.prototype.onUserLogin = function (profile) { return cordova(this, "onUserLogin", {}, arguments); };
    CleverTap.prototype.profileSet = function (profile) { return cordova(this, "profileSet", {}, arguments); };
    CleverTap.prototype.profileSetGraphUser = function (profile) { return cordova(this, "profileSetGraphUser", {}, arguments); };
    CleverTap.prototype.profileGooglePlusUser = function (profile) { return cordova(this, "profileGooglePlusUser", {}, arguments); };
    CleverTap.prototype.profileGetProperty = function (propertyName) { return cordova(this, "profileGetProperty", {}, arguments); };
    CleverTap.prototype.profileGetCleverTapAttributionIdentifier = function () { return cordova(this, "profileGetCleverTapAttributionIdentifier", {}, arguments); };
    CleverTap.prototype.profileGetCleverTapID = function () { return cordova(this, "profileGetCleverTapID", {}, arguments); };
    CleverTap.prototype.profileRemoveValueForKey = function (key) { return cordova(this, "profileRemoveValueForKey", {}, arguments); };
    CleverTap.prototype.profileSetMultiValues = function (key, values) { return cordova(this, "profileSetMultiValues", {}, arguments); };
    CleverTap.prototype.profileAddMultiValue = function (key, value) { return cordova(this, "profileAddMultiValue", {}, arguments); };
    CleverTap.prototype.profileAddMultiValues = function (key, values) { return cordova(this, "profileAddMultiValues", {}, arguments); };
    CleverTap.prototype.profileRemoveMultiValue = function (key, value) { return cordova(this, "profileRemoveMultiValue", {}, arguments); };
    CleverTap.prototype.profileRemoveMultiValues = function (key, values) { return cordova(this, "profileRemoveMultiValues", {}, arguments); };
    CleverTap.prototype.sessionGetTimeElapsed = function () { return cordova(this, "sessionGetTimeElapsed", {}, arguments); };
    CleverTap.prototype.sessionGetTotalVisits = function () { return cordova(this, "sessionGetTotalVisits", {}, arguments); };
    CleverTap.prototype.sessionGetScreenCount = function () { return cordova(this, "sessionGetScreenCount", {}, arguments); };
    CleverTap.prototype.sessionGetPreviousVisitTime = function () { return cordova(this, "sessionGetPreviousVisitTime", {}, arguments); };
    CleverTap.prototype.sessionGetUTMDetails = function () { return cordova(this, "sessionGetUTMDetails", {}, arguments); };
    CleverTap.prototype.pushInstallReferrer = function (source, medium, campaign) { return cordova(this, "pushInstallReferrer", {}, arguments); };
    CleverTap.prototype.initializeInbox = function () { return cordova(this, "initializeInbox", {}, arguments); };
    CleverTap.prototype.getInboxMessageUnreadCount = function () { return cordova(this, "getInboxMessageUnreadCount", {}, arguments); };
    CleverTap.prototype.getInboxMessageCount = function () { return cordova(this, "getInboxMessageCount", {}, arguments); };
    CleverTap.prototype.showInbox = function (styleConfig) { return cordova(this, "showInbox", {}, arguments); };
    CleverTap.prototype.setDebugLevel = function (level) { return cordova(this, "setDebugLevel", {}, arguments); };
    CleverTap.pluginName = "CleverTap";
    CleverTap.plugin = "clevertap-cordova";
    CleverTap.pluginRef = "CleverTap";
    CleverTap.repo = "https://github.com/CleverTap/clevertap-cordova";
    CleverTap.platforms = ["Android", "iOS"];
    CleverTap = __decorate([
        Injectable()
    ], CleverTap);
    return CleverTap;
}(IonicNativePlugin));
export { CleverTap };
//# sourceMappingURL=data:application/json;base64,