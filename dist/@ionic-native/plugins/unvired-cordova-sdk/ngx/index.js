var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
/**
 * Log levels supported in the sdk.
 */
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["important"] = 7] = "important";
    LogLevel[LogLevel["error"] = 8] = "error";
    LogLevel[LogLevel["debug"] = 9] = "debug";
})(LogLevel || (LogLevel = {}));
/**
 * AuthenticateAndActivateResultType Some Documentation
 */
export var AuthenticateAndActivateResultType;
(function (AuthenticateAndActivateResultType) {
    /**
     * This value indicates that UMP was able to validate users credentials & activation of the user is complete.
     * In mobile apps, this also means database is created & apps can proceed with their custom logic.
     */
    AuthenticateAndActivateResultType[AuthenticateAndActivateResultType["auth_activation_success"] = 2] = "auth_activation_success";
    /**
     * This value indicates that UMP was unable to validate users credentials.
     */
    AuthenticateAndActivateResultType[AuthenticateAndActivateResultType["auth_activation_error"] = 3] = "auth_activation_error";
})(AuthenticateAndActivateResultType || (AuthenticateAndActivateResultType = {}));
export var AuthenticateLocalResultType;
(function (AuthenticateLocalResultType) {
    /**
     * This value indicates that UnviredCordovaSDK was able to validate users credentials and apps can proceed with their custom logic.
     */
    AuthenticateLocalResultType[AuthenticateLocalResultType["login_success"] = 4] = "login_success";
    /**
     * This value indicates that UnviredCordovaSDK was unable to validate users credentials. You can retrieve the error information from AuthenticateLocalResult.
     */
    AuthenticateLocalResultType[AuthenticateLocalResultType["login_error"] = 5] = "login_error";
})(AuthenticateLocalResultType || (AuthenticateLocalResultType = {}));
export var LoginListenerType;
(function (LoginListenerType) {
    /**
     * This value indicates that there is no user account exists and user needs to authenticate & activate. Call authenticateAndActivate() api to activate the user.
     */
    LoginListenerType[LoginListenerType["auth_activation_required"] = 0] = "auth_activation_required";
    /**
     * Applicable for mobile.
     * This value indicates user needs to login before using the app. This depends on the setting LOCAL_PASSWORD which is set in UMP Admin Cockpit.
     * If LOCAL_PASSWORD is set to true, this type is set everytime user opens the app.
     */
    LoginListenerType[LoginListenerType["app_requires_login"] = 1] = "app_requires_login";
    /**
     * This value indicates app can proceed with its custom logic.
     */
    LoginListenerType[LoginListenerType["login_success"] = 4] = "login_success";
    /**
     * If there are multiple accounts active & no account is specified in the login(), then this value is returned indicating that a current account needs to be specified for the login().
     */
    LoginListenerType[LoginListenerType["app_requires_current_account"] = 6] = "app_requires_current_account";
})(LoginListenerType || (LoginListenerType = {}));
export var LoginType;
(function (LoginType) {
    /**
     * This value represents authentication using Unvired ID.
     * Example:
     * ```
     * loginParameters.username = 'USER_NAME'
     * loginParameters.password = 'password'
     * loginParameters.company = 'unvired'
     * loginParameters.loginType = LoginType.unvired
     * ```
     */
    LoginType["unvired"] = "UNVIRED_ID";
    /**
     * This value represents authentication using Active Directory Service (ADS).
     * Example:
     * ```
     * loginParameters.username = 'USER_NAME'
     * loginParameters.password = 'password'
     * loginParameters.company = 'unvired'
     * loginParameters.domain = 'ADS_DOMAIN'
     * loginParameters.loginType = LoginType.ads
     * ```
     */
    LoginType["ads"] = "ADS";
    /**
     * This value represents authentication using SAP ID.
     * Example:
     * ```
     * loginParameters.username = 'USER_NAME'
     * loginParameters.password = 'password'
     * loginParameters.company = 'unvired'
     * loginParameters.port = 'SAP_PORT_NAME'
     * loginParameters.domain = 'SAP_DOMAIN'
     * loginParameters.loginType = LoginType.sap
     * ```
     */
    LoginType["sap"] = "SAP";
    /**
     * EMAIL
     * Set the type to email to login based on email id.
     */
    LoginType["email"] = "EMAIL";
    /**
     * TODO:
     */
    LoginType["custom"] = "CUSTOM";
})(LoginType || (LoginType = {}));
export var ResultType;
(function (ResultType) {
    /**
     * This value indicates a succesful operation.
     */
    ResultType[ResultType["success"] = 0] = "success";
    /**
     * This value indicates an error.
     */
    ResultType[ResultType["error"] = 1] = "error";
})(ResultType || (ResultType = {}));
export var RequestType;
(function (RequestType) {
    /**
     * Set this type if the data exchange with UMP is 1:1. The header datastructure needs to be sent which also should be present in database prior to the call.
     * You can use UnviredCordovaSDK's db methods to insert data into database.
     */
    RequestType["RQST"] = "RQST";
    /**
     * Set this type if the data exchange with UMP is 1:N pr 0:N. Sending a datastructure is optional and is dependent on the process agent function.
     * If the process agent function is marked with metadata delete flag, then server data replaces the data in database.
     * If the process agent function is NOT marked with metadata delete flag, then this request type behaves the same as QUERY
     */
    RequestType["PULL"] = "PULL";
    /**
     * This request type is for those message which are initiated by the server. You typically do not set this request type in sync.. methods.
     */
    RequestType["PUSH"] = "PUSH";
    /**
     * Set this type if the data exchange with UMP is 1:N pr 0:N. Sending a datastructure is optional and is dependent on the process agent function.
     * Unlike PULL, this request type updates the data in database without deleting existing entries.
     */
    RequestType["QUERY"] = "QUERY";
    /**
     * Set this type if the data exchange with UMP is 1:0. This handles the case where no server response is expected.
     */
    RequestType["REQ"] = "REQ";
})(RequestType || (RequestType = {}));
export var NotificationListenerType;
(function (NotificationListenerType) {
    /**
     * Notify successful asynchronous send of data to the server. This type indicates that data has moved from outbox to sent items.
     */
    NotificationListenerType[NotificationListenerType["dataSend"] = 0] = "dataSend";
    /**
     * Notify data changes for each BusinessEntity when received data from server. This type indicates when data is removed from sent items table.
     */
    NotificationListenerType[NotificationListenerType["dataChanged"] = 1] = "dataChanged";
    /**
     * Notify data receive completion on receiving of all BusinessEntities from server. Data would get processed after this step.
     */
    NotificationListenerType[NotificationListenerType["dataReceived"] = 2] = "dataReceived";
    /**
     * Notify application data reset.
     */
    NotificationListenerType[NotificationListenerType["appReset"] = 3] = "appReset";
    /**
     * Notify application with error message and attchment item on attachment download success
     */
    NotificationListenerType[NotificationListenerType["attachmentDownloadSuccess"] = 4] = "attachmentDownloadSuccess";
    /**
     * Notify application with error message and attchment item on attachment download error
     */
    NotificationListenerType[NotificationListenerType["attachmentDownloadError"] = 5] = "attachmentDownloadError";
    /**
     * Notify application when incoming data handling finished
     */
    NotificationListenerType[NotificationListenerType["incomingDataProcessingFinished"] = 6] = "incomingDataProcessingFinished";
    /**
     * Notify application when incoming data handling finished
     */
    NotificationListenerType[NotificationListenerType["attachmentDownloadWaiting"] = 7] = "attachmentDownloadWaiting";
    /**
     * Notify application with any InfoMessages
     */
    NotificationListenerType[NotificationListenerType["infoMessage"] = 8] = "infoMessage";
    /**
     * Notify application with Server errors
     */
    NotificationListenerType[NotificationListenerType["serverError"] = 9] = "serverError";
    /**
     * Notify attachment downloads completed
     */
    NotificationListenerType[NotificationListenerType["attachmentDownloadCompleted"] = 10] = "attachmentDownloadCompleted";
})(NotificationListenerType || (NotificationListenerType = {}));
export var AttachmentItemStatus;
(function (AttachmentItemStatus) {
    AttachmentItemStatus[AttachmentItemStatus["DEFAULT"] = 0] = "DEFAULT";
    AttachmentItemStatus[AttachmentItemStatus["QUEUED_FOR_DOWNLOAD"] = 1] = "QUEUED_FOR_DOWNLOAD";
    AttachmentItemStatus[AttachmentItemStatus["DOWNLOADED"] = 2] = "DOWNLOADED";
    AttachmentItemStatus[AttachmentItemStatus["ERROR_IN_DOWNLOAD"] = 3] = "ERROR_IN_DOWNLOAD";
    AttachmentItemStatus[AttachmentItemStatus["SAVED_FOR_UPLOAD"] = 4] = "SAVED_FOR_UPLOAD";
    AttachmentItemStatus[AttachmentItemStatus["UPLOADED"] = 5] = "UPLOADED";
    AttachmentItemStatus[AttachmentItemStatus["ERROR_IN_UPLOAD"] = 6] = "ERROR_IN_UPLOAD";
    AttachmentItemStatus[AttachmentItemStatus["MARKED_FOR_DELETE"] = 7] = "MARKED_FOR_DELETE";
    AttachmentItemStatus[AttachmentItemStatus["EXTERNAL"] = 8] = "EXTERNAL";
})(AttachmentItemStatus || (AttachmentItemStatus = {}));
var Settings = /** @class */ (function () {
    function Settings() {
    }
    return Settings;
}());
export { Settings };
var UnviredResult = /** @class */ (function () {
    function UnviredResult() {
    }
    return UnviredResult;
}());
export { UnviredResult };
var LogResult = /** @class */ (function (_super) {
    __extends(LogResult, _super);
    function LogResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LogResult;
}(UnviredResult));
export { LogResult };
var LogDataResult = /** @class */ (function (_super) {
    __extends(LogDataResult, _super);
    function LogDataResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LogDataResult;
}(UnviredResult));
export { LogDataResult };
var NotifResult = /** @class */ (function (_super) {
    __extends(NotifResult, _super);
    function NotifResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return NotifResult;
}(UnviredResult));
export { NotifResult };
var SettingsResult = /** @class */ (function (_super) {
    __extends(SettingsResult, _super);
    function SettingsResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SettingsResult;
}(UnviredResult));
export { SettingsResult };
var SyncResult = /** @class */ (function (_super) {
    __extends(SyncResult, _super);
    function SyncResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SyncResult;
}(UnviredResult));
export { SyncResult };
var DbResult = /** @class */ (function (_super) {
    __extends(DbResult, _super);
    function DbResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DbResult;
}(UnviredResult));
export { DbResult };
var LoginParameters = /** @class */ (function () {
    function LoginParameters() {
    }
    return LoginParameters;
}());
export { LoginParameters };
var LoginResult = /** @class */ (function (_super) {
    __extends(LoginResult, _super);
    function LoginResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LoginResult;
}(UnviredResult));
export { LoginResult };
var AuthenticateActivateResult = /** @class */ (function (_super) {
    __extends(AuthenticateActivateResult, _super);
    function AuthenticateActivateResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AuthenticateActivateResult;
}(UnviredResult));
export { AuthenticateActivateResult };
var AuthenticateLocalResult = /** @class */ (function (_super) {
    __extends(AuthenticateLocalResult, _super);
    function AuthenticateLocalResult() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return AuthenticateLocalResult;
}(UnviredResult));
export { AuthenticateLocalResult };
var UnviredCordovaSDK = /** @class */ (function (_super) {
    __extends(UnviredCordovaSDK, _super);
    function UnviredCordovaSDK() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UnviredCordovaSDK.prototype.logDebug = function (sourceClass, method, message) { return cordova(this, "logDebug", {}, arguments); };
    UnviredCordovaSDK.prototype.logError = function (sourceClass, method, message) { return cordova(this, "logError", {}, arguments); };
    UnviredCordovaSDK.prototype.logInfo = function (sourceClass, method, message) { return cordova(this, "logInfo", {}, arguments); };
    UnviredCordovaSDK.prototype.logRead = function () { return cordova(this, "logRead", {}, arguments); };
    UnviredCordovaSDK.prototype.logDelete = function () { return cordova(this, "logDelete", {}, arguments); };
    UnviredCordovaSDK.prototype.sendLogToServer = function () { return cordova(this, "sendLogToServer", {}, arguments); };
    UnviredCordovaSDK.prototype.sendLogViaEmail = function () { return cordova(this, "sendLogViaEmail", {}, arguments); };
    UnviredCordovaSDK.prototype.getLogLevel = function () { return cordova(this, "getLogLevel", {}, arguments); };
    UnviredCordovaSDK.prototype.getLogFilePath = function () { return cordova(this, "getLogFilePath", {}, arguments); };
    UnviredCordovaSDK.prototype.setLogLevel = function (logLevel) { return cordova(this, "setLogLevel", {}, arguments); };
    UnviredCordovaSDK.prototype.login = function (loginParameters) { return cordova(this, "login", {}, arguments); };
    UnviredCordovaSDK.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    UnviredCordovaSDK.prototype.authenticateAndActivate = function (loginParameters) { return cordova(this, "authenticateAndActivate", {}, arguments); };
    UnviredCordovaSDK.prototype.authenticateLocal = function (loginParameters) { return cordova(this, "authenticateLocal", {}, arguments); };
    UnviredCordovaSDK.prototype.getAllAccounts = function () { return cordova(this, "getAllAccounts", {}, arguments); };
    UnviredCordovaSDK.prototype.switchAccount = function (account) { return cordova(this, "switchAccount", {}, arguments); };
    UnviredCordovaSDK.prototype.deleteAccount = function (account) { return cordova(this, "deleteAccount", {}, arguments); };
    UnviredCordovaSDK.prototype.getInfoMessages = function (headerName, lid) { return cordova(this, "getInfoMessages", {}, arguments); };
    UnviredCordovaSDK.prototype.showSettings = function () { return cordova(this, "showSettings", {}, arguments); };
    UnviredCordovaSDK.prototype.userSettings = function () { return cordova(this, "userSettings", {}, arguments); };
    UnviredCordovaSDK.prototype.updateSystemCredentials = function (credentials) { return cordova(this, "updateSystemCredentials", {}, arguments); };
    UnviredCordovaSDK.prototype.getSystemCredentials = function () { return cordova(this, "getSystemCredentials", {}, arguments); };
    UnviredCordovaSDK.prototype.getVersionNumbers = function () { return cordova(this, "getVersionNumbers", {}, arguments); };
    UnviredCordovaSDK.prototype.clearData = function () { return cordova(this, "clearData", {}, arguments); };
    UnviredCordovaSDK.prototype.hasInternet = function () { return cordova(this, "hasInternet", {}, arguments); };
    UnviredCordovaSDK.prototype.guid = function () { return cordova(this, "guid", { "sync": true }, arguments); };
    UnviredCordovaSDK.prototype.pullDb = function () { return cordova(this, "pullDb", {}, arguments); };
    UnviredCordovaSDK.prototype.pushDb = function () { return cordova(this, "pushDb", {}, arguments); };
    UnviredCordovaSDK.prototype.dbSelect = function (tableName, whereClause) { return cordova(this, "dbSelect", {}, arguments); };
    UnviredCordovaSDK.prototype.dbInsert = function (tableName, structureObject, isHeader) { return cordova(this, "dbInsert", {}, arguments); };
    UnviredCordovaSDK.prototype.dbInsertOrUpdate = function (tableName, structureObject, isHeader) { return cordova(this, "dbInsertOrUpdate", {}, arguments); };
    UnviredCordovaSDK.prototype.dbDelete = function (tableName, whereClause) { return cordova(this, "dbDelete", {}, arguments); };
    UnviredCordovaSDK.prototype.dbUpdate = function (tableName, updatedObject, whereClause) { return cordova(this, "dbUpdate", {}, arguments); };
    UnviredCordovaSDK.prototype.dbExecuteStatement = function (query) { return cordova(this, "dbExecuteStatement", {}, arguments); };
    UnviredCordovaSDK.prototype.dbCreateSavePoint = function (savePoint) { return cordova(this, "dbCreateSavePoint", {}, arguments); };
    UnviredCordovaSDK.prototype.dbReleaseSavePoint = function (savePoint) { return cordova(this, "dbReleaseSavePoint", {}, arguments); };
    UnviredCordovaSDK.prototype.dbRollbackToSavePoint = function (savePoint) { return cordova(this, "dbRollbackToSavePoint", {}, arguments); };
    UnviredCordovaSDK.prototype.dbBeginTransaction = function () { return cordova(this, "dbBeginTransaction", {}, arguments); };
    UnviredCordovaSDK.prototype.dbEndTransaction = function () { return cordova(this, "dbEndTransaction", {}, arguments); };
    UnviredCordovaSDK.prototype.launchFile = function (filePath) { return cordova(this, "launchFile", {}, arguments); };
    UnviredCordovaSDK.prototype.launchBase64 = function (base64string, fileName, extension) { return cordova(this, "launchBase64", {}, arguments); };
    UnviredCordovaSDK.prototype.unzip = function (srcPath, destPath) { return cordova(this, "unzip", {}, arguments); };
    UnviredCordovaSDK.prototype.getAttachmentFolderPath = function () { return cordova(this, "getAttachmentFolderPath", {}, arguments); };
    UnviredCordovaSDK.prototype.createAttachmentItem = function (tableName, structureObject) { return cordova(this, "createAttachmentItem", {}, arguments); };
    UnviredCordovaSDK.prototype.uploadAttachment = function (tableName, structureObject, isAsync) { return cordova(this, "uploadAttachment", {}, arguments); };
    UnviredCordovaSDK.prototype.downloadAttachment = function (tableName, structureObject) { return cordova(this, "downloadAttachment", {}, arguments); };
    UnviredCordovaSDK.prototype.syncForeground = function (reqype, header, customData, paFunction, autoSave) { return cordova(this, "syncForeground", {}, arguments); };
    UnviredCordovaSDK.prototype.syncBackground = function (reqype, header, customData, paFunction, beName, belid, bypassAttachment) { return cordova(this, "syncBackground", {}, arguments); };
    UnviredCordovaSDK.prototype.getSynchronizationState = function () { return cordova(this, "getSynchronizationState", { "observable": true }, arguments); };
    UnviredCordovaSDK.prototype.dbReload = function () { return cordova(this, "dbReload", {}, arguments); };
    UnviredCordovaSDK.prototype.generateUBJson = function (headerName, header, itemName, items) { return cordova(this, "generateUBJson", {}, arguments); };
    UnviredCordovaSDK.prototype.parseRawUBJson = function (json) { return cordova(this, "parseRawUBJson", {}, arguments); };
    UnviredCordovaSDK.prototype.dbGetCollection = function (tableName) { return cordova(this, "dbGetCollection", {}, arguments); };
    UnviredCordovaSDK.prototype.getMessages = function () { return cordova(this, "getMessages", {}, arguments); };
    UnviredCordovaSDK.prototype.registerNotifListener = function () { return cordova(this, "registerNotifListener", { "observable": true }, arguments); };
    UnviredCordovaSDK.prototype.isInOutBox = function (beLid) { return cordova(this, "isInOutBox", {}, arguments); };
    UnviredCordovaSDK.prototype.outBoxItemCount = function () { return cordova(this, "outBoxItemCount", {}, arguments); };
    UnviredCordovaSDK.prototype.isInSentItem = function (beLid) { return cordova(this, "isInSentItem", {}, arguments); };
    UnviredCordovaSDK.prototype.sentItemCount = function () { return cordova(this, "sentItemCount", {}, arguments); };
    UnviredCordovaSDK.prototype.inBoxItemCount = function () { return cordova(this, "inBoxItemCount", {}, arguments); };
    UnviredCordovaSDK.prototype.deleteOutBoxEntry = function (beLid) { return cordova(this, "deleteOutBoxEntry", {}, arguments); };
    UnviredCordovaSDK.prototype.resetApplicationSyncData = function () { return cordova(this, "resetApplicationSyncData", {}, arguments); };
    UnviredCordovaSDK.prototype.reCreateAppDB = function () { return cordova(this, "reCreateAppDB", {}, arguments); };
    UnviredCordovaSDK.prototype.startInboxHandler = function () { return cordova(this, "startInboxHandler", {}, arguments); };
    UnviredCordovaSDK.prototype.startDataSender = function () { return cordova(this, "startDataSender", {}, arguments); };
    UnviredCordovaSDK.prototype.platform = function () { return cordova(this, "platform", {}, arguments); };
    UnviredCordovaSDK.prototype.testPushNotification = function () { return cordova(this, "testPushNotification", {}, arguments); };
    UnviredCordovaSDK.pluginName = "UnviredCordovaSDK";
    UnviredCordovaSDK.plugin = "https://github.com/unvired/cordova-plugin-unvired-sdk";
    UnviredCordovaSDK.pluginRef = "ump";
    UnviredCordovaSDK.repo = "https://github.com/unvired/cordova-plugin-unvired-sdk/";
    UnviredCordovaSDK.install = "ionic cordova plugin add @ionic-native/unvired-cordova-sdk";
    UnviredCordovaSDK.installVariables = [];
    UnviredCordovaSDK.platforms = ["iOS", "Android", "Windows", "Browser"];
    UnviredCordovaSDK = __decorate([
        Injectable()
    ], UnviredCordovaSDK);
    return UnviredCordovaSDK;
}(IonicNativePlugin));
export { UnviredCordovaSDK };
//# sourceMappingURL=data:application/json;base64,