var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var PedometerOriginal = /** @class */ (function (_super) {
    __extends(PedometerOriginal, _super);
    function PedometerOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PedometerOriginal.prototype.isStepCountingAvailable = function () { return cordova(this, "isStepCountingAvailable", {}, arguments); };
    PedometerOriginal.prototype.isDistanceAvailable = function () { return cordova(this, "isDistanceAvailable", {}, arguments); };
    PedometerOriginal.prototype.isFloorCountingAvailable = function () { return cordova(this, "isFloorCountingAvailable", {}, arguments); };
    PedometerOriginal.prototype.startPedometerUpdates = function () { return cordova(this, "startPedometerUpdates", { "observable": true, "clearFunction": "stopPedometerUpdates" }, arguments); };
    PedometerOriginal.prototype.stopPedometerUpdates = function () { return cordova(this, "stopPedometerUpdates", {}, arguments); };
    PedometerOriginal.prototype.queryData = function (options) { return cordova(this, "queryData", { "callbackOrder": "reverse" }, arguments); };
    PedometerOriginal.pluginName = "Pedometer";
    PedometerOriginal.plugin = "cordova-plugin-pedometer";
    PedometerOriginal.pluginRef = "pedometer";
    PedometerOriginal.repo = "https://github.com/leecrossley/cordova-plugin-pedometer";
    PedometerOriginal.platforms = ["Android", "iOS"];
    return PedometerOriginal;
}(IonicNativePlugin));
var Pedometer = new PedometerOriginal();
export { Pedometer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3BlZG9tZXRlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQTJDSCw2QkFBaUI7Ozs7SUFNOUMsMkNBQXVCO0lBV3ZCLHVDQUFtQjtJQVduQiw0Q0FBd0I7SUFleEIseUNBQXFCO0lBU3JCLHdDQUFvQjtJQWVwQiw2QkFBUyxhQUFDLE9BR1Q7Ozs7OztvQkFsSEg7RUE0QytCLGlCQUFpQjtTQUFuQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogSW50ZXJmYWNlIG9mIGEgcGVkb21ldGVyIGRhdGEgb2JqZWN0IHdoaWNoIGlzIHJldHVybmVkIGJ5IHdhdGNoaW5nIGZvciBuZXcgZGF0YSBvciBieSByZWNpZXZpbmcgaGlzdG9yaWNhbCBkYXRhXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVBlZG9tZXRlckRhdGEge1xuICBzdGFydERhdGU/OiBudW1iZXI7XG4gIGVuZERhdGU/OiBudW1iZXI7XG4gIG51bWJlck9mU3RlcHM6IG51bWJlcjtcbiAgZGlzdGFuY2U6IG51bWJlcjtcbiAgZmxvb3JzQXNjZW5kZWQ6IG51bWJlcjtcbiAgZmxvb3JzRGVzY2VuZGVkOiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgUGVkb21ldGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZldGNoIHBlZGVzdHJpYW4tcmVsYXRlZCBwZWRvbWV0ZXIgZGF0YSxcbiAqIHN1Y2ggYXMgc3RlcCBjb3VudHMgYW5kIG90aGVyIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkaXN0YW5jZSB0cmF2ZWxsZWQuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBQZWRvbWV0ZXIgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3BlZG9tZXRlci9uZ3gnO1xuICpcbiAqIFBlZG9tZXRlci5pc0Rpc3RhbmNlQXZhaWxhYmxlKClcbiAqICAgLnRoZW4oKGF2YWlsYWJsZTogYm9vbGVhbikgPT4gY29uc29sZS5sb2coYXZhaWxhYmxlKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZyhlcnJvcikpO1xuICpcbiAqIFBlZG9tZXRlci5zdGFydFBlZG9tZXRlclVwZGF0ZXMoKVxuICogICAgLnN1YnNjcmliZSgoZGF0YTogSVBlZG9tZXRlckRhdGEpID0+IHtcbiAqICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gKiAgICB9KTtcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1BlZG9tZXRlcicsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXBlZG9tZXRlcicsXG4gIHBsdWdpblJlZjogJ3BlZG9tZXRlcicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbGVlY3Jvc3NsZXkvY29yZG92YS1wbHVnaW4tcGVkb21ldGVyJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGVkb21ldGVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ2hlY2tzIGlmIHN0ZXAgY291bnRpbmcgaXMgYXZhaWxhYmxlLiBPbmx5IHdvcmtzIG9uIGlPUy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGZlYXR1cmUgaXMgc3VwcG9ydGVkICh0cnVlKSBvciBub3Qgc3VwcG9ydGVkIChmYWxzZSlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNTdGVwQ291bnRpbmdBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3RhbmNlIGVzdGltYXRpb24gaW5kaWNhdGVzIHRoZSBhYmlsaXR5IHRvIHVzZSBzdGVwIGluZm9ybWF0aW9uIHRvIHN1cHBseSB0aGUgYXBwcm94aW1hdGUgZGlzdGFuY2UgdHJhdmVsbGVkIGJ5IHRoZSB1c2VyLlxuICAgKiBUaGlzIGNhcGFiaWxpdHkgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgZGV2aWNlcywgZXZlbiB3aXRoIGlPUyA4LlxuICAgKiBPbmx5IHdvcmtzIG9uIGlPUy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGZlYXR1cmUgaXMgc3VwcG9ydGVkICh0cnVlKSBvciBub3Qgc3VwcG9ydGVkIChmYWxzZSlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNEaXN0YW5jZUF2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRmxvb3IgY291bnRpbmcgaW5kaWNhdGVzIHRoZSBhYmlsaXR5IHRvIGNvdW50IHRoZSBudW1iZXIgb2YgZmxvb3JzIHRoZSB1c2VyIHdhbGtzIHVwIG9yIGRvd24gdXNpbmcgc3RhaXJzLlxuICAgKiBUaGlzIGNhcGFiaWxpdHkgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgZGV2aWNlcywgZXZlbiB3aXRoIGlPUyA4LlxuICAgKiBPbmx5IHdvcmtzIG9uIGlPUy5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIGZlYXR1cmUgaXMgc3VwcG9ydGVkICh0cnVlKSBvciBub3Qgc3VwcG9ydGVkIChmYWxzZSlcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNGbG9vckNvdW50aW5nQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGRlbGl2ZXJ5IG9mIHJlY2VudCBwZWRlc3RyaWFuLXJlbGF0ZWQgZGF0YSB0byB5b3VyIENvcmRvdmEgYXBwLlxuICAgKlxuICAgKiBXaGVuIHRoZSBhcHAgaXMgc3VzcGVuZGVkLCB0aGUgZGVsaXZlcnkgb2YgdXBkYXRlcyBzdG9wcyB0ZW1wb3JhcmlseS5cbiAgICogVXBvbiByZXR1cm5pbmcgdG8gZm9yZWdyb3VuZCBvciBiYWNrZ3JvdW5kIGV4ZWN1dGlvbiwgdGhlIHBlZG9tZXRlciBvYmplY3QgYmVnaW5zIHVwZGF0ZXMgYWdhaW4uXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8SVBlZG9tZXRlckRhdGE+fSBSZXR1cm5zIGEgT2JzZXJ2YWJsZSB0aGF0IHJlY2lldmVzIHJlcGVhdGx5IGRhdGEgZnJvbSBwZWRvbWV0ZXIgaW4gYmFja2dyb3VuZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICdzdG9wUGVkb21ldGVyVXBkYXRlcydcbiAgfSlcbiAgc3RhcnRQZWRvbWV0ZXJVcGRhdGVzKCk6IE9ic2VydmFibGU8SVBlZG9tZXRlckRhdGE+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RvcHMgdGhlIGRlbGl2ZXJ5IG9mIHJlY2VudCBwZWRlc3RyaWFuIGRhdGEgdXBkYXRlcyB0byB5b3VyIENvcmRvdmEgYXBwLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gcGVkb21ldGVyIHdhdGNoaW5nIHdhcyBzdG9wcGVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0b3BQZWRvbWV0ZXJVcGRhdGVzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgZGF0YSBiZXR3ZWVuIHRoZSBzcGVjaWZpZWQgc3RhcnQgYW5kIGVuZCBkYXRlcy5cbiAgICogVGhlIHN0YXJ0RGF0ZSBhbmQgZW5kRGF0ZSBvcHRpb25zIGFyZSByZXF1aXJlZCBhbmQgY2FuIGJlIGNvbnN0cnVjdGVkIGluIGFueSB2YWxpZCBKYXZhU2NyaXB0IHdheVxuICAgKiAoZS5nLiBuZXcgRGF0ZSgyMDE1LCA0LCAxLCAxNSwgMjAsIDAwKSBpcyBhbHNvIHZhbGlkLCBhcyBpcyBtaWxsaXNlY29uZHMpLlxuICAgKiBPbmx5IHdvcmtzIG9uIGlPUy5cbiAgICogQHBhcmFtIHthbnl9IG9wdGlvbnMgIHN0YXJ0IGRhdGUgYW5kIGVuIGRhdGUgd2hlcmUgeW91IHdhbnQgdG8gZ2V0IHBlZG9tZXRlciBkYXRhXG4gICAqIEByZXR1cm4ge1Byb21pc2U8SVBlZG9tZXRlckRhdGE+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gcGVkb21ldGVyIGRhdGEgZm91bmRcbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZSdcbiAgfSlcbiAgcXVlcnlEYXRhKG9wdGlvbnM6IHtcbiAgICBzdGFydERhdGU6IERhdGU7XG4gICAgZW5kRGF0ZTogRGF0ZTtcbiAgfSk6IFByb21pc2U8SVBlZG9tZXRlckRhdGE+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==