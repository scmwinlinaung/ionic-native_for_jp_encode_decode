var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Zoom = /** @class */ (function (_super) {
    __extends(Zoom, _super);
    function Zoom() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Zoom.prototype.initialize = function (appKey, appSecret) { return cordova(this, "initialize", {}, arguments); };
    Zoom.prototype.login = function (username, password) { return cordova(this, "login", {}, arguments); };
    Zoom.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    Zoom.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    Zoom.prototype.joinMeeting = function (meetingNo, meetingPassword, displayName, options) { return cordova(this, "joinMeeting", {}, arguments); };
    Zoom.prototype.startMeetingWithZAK = function (meetingNo, displayName, zoomToken, zoomAccessToken, userId, options) { return cordova(this, "startMeetingWithZAK", {}, arguments); };
    Zoom.prototype.startMeeting = function (meetingNo, options) { return cordova(this, "startMeeting", {}, arguments); };
    Zoom.prototype.startInstantMeeting = function (options) { return cordova(this, "startInstantMeeting", {}, arguments); };
    Zoom.prototype.setLocale = function (languageTag) { return cordova(this, "setLocale", {}, arguments); };
    Zoom.pluginName = "Zoom";
    Zoom.plugin = "cordova.plugin.zoom";
    Zoom.pluginRef = "cordova.plugins.Zoom";
    Zoom.repo = "https://github.com/zoom/zoom-sdk-ionic";
    Zoom.platforms = ["Android", "iOS"];
    Zoom = __decorate([
        Injectable()
    ], Zoom);
    return Zoom;
}(IonicNativePlugin));
export { Zoom };
//# sourceMappingURL=data:application/json;base64,