var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FirebaseXOriginal = /** @class */ (function (_super) {
    __extends(FirebaseXOriginal, _super);
    function FirebaseXOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FirebaseXOriginal.prototype.getToken = function () { return cordova(this, "getToken", {}, arguments); };
    FirebaseXOriginal.prototype.onTokenRefresh = function () { return cordova(this, "onTokenRefresh", { "observable": true }, arguments); };
    FirebaseXOriginal.prototype.getAPNSToken = function () { return cordova(this, "getAPNSToken", {}, arguments); };
    FirebaseXOriginal.prototype.onApnsTokenReceived = function () { return cordova(this, "onApnsTokenReceived", { "observable": true }, arguments); };
    FirebaseXOriginal.prototype.onMessageReceived = function () { return cordova(this, "onMessageReceived", { "observable": true }, arguments); };
    FirebaseXOriginal.prototype.grantPermission = function () { return cordova(this, "grantPermission", { "platforms": ["iOS"] }, arguments); };
    FirebaseXOriginal.prototype.hasPermission = function () { return cordova(this, "hasPermission", {}, arguments); };
    FirebaseXOriginal.prototype.unregister = function () { return cordova(this, "unregister", {}, arguments); };
    FirebaseXOriginal.prototype.setBadgeNumber = function (badgeNumber) { return cordova(this, "setBadgeNumber", {}, arguments); };
    FirebaseXOriginal.prototype.getBadgeNumber = function () { return cordova(this, "getBadgeNumber", {}, arguments); };
    FirebaseXOriginal.prototype.clearAllNotifications = function () { return cordova(this, "clearAllNotifications", { "platforms": ["Android"] }, arguments); };
    FirebaseXOriginal.prototype.subscribe = function (topic) { return cordova(this, "subscribe", {}, arguments); };
    FirebaseXOriginal.prototype.unsubscribe = function (topic) { return cordova(this, "unsubscribe", {}, arguments); };
    FirebaseXOriginal.prototype.createChannel = function (channelOptions) { return cordova(this, "createChannel", {}, arguments); };
    FirebaseXOriginal.prototype.setDefaultChannel = function (channelOptions) { return cordova(this, "setDefaultChannel", {}, arguments); };
    FirebaseXOriginal.prototype.deleteChannel = function (channelID) { return cordova(this, "deleteChannel", {}, arguments); };
    FirebaseXOriginal.prototype.listChannels = function () { return cordova(this, "listChannels", {}, arguments); };
    FirebaseXOriginal.prototype.setAnalyticsCollectionEnabled = function (enabled) { return cordova(this, "setAnalyticsCollectionEnabled", {}, arguments); };
    FirebaseXOriginal.prototype.logEvent = function (type, data) { return cordova(this, "logEvent", {}, arguments); };
    FirebaseXOriginal.prototype.setScreenName = function (name) { return cordova(this, "setScreenName", {}, arguments); };
    FirebaseXOriginal.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    FirebaseXOriginal.prototype.setUserProperty = function (name, value) { return cordova(this, "setUserProperty", {}, arguments); };
    FirebaseXOriginal.prototype.setCrashlyticsUserId = function (userId) { return cordova(this, "setCrashlyticsUserId", {}, arguments); };
    FirebaseXOriginal.prototype.sendCrash = function () { return cordova(this, "sendCrash", {}, arguments); };
    FirebaseXOriginal.prototype.logMessage = function (message) { return cordova(this, "logMessage", {}, arguments); };
    FirebaseXOriginal.prototype.logError = function (error) { return cordova(this, "logError", {}, arguments); };
    FirebaseXOriginal.prototype.verifyPhoneNumber = function (success, error, phoneNumber, timeoutDuration) {
        if (timeoutDuration === void 0) { timeoutDuration = 0; }
        return cordova(this, "verifyPhoneNumber", {}, arguments);
    };
    FirebaseXOriginal.prototype.signInWithCredential = function (verificationId, code, success, error) { return cordova(this, "signInWithCredential", {}, arguments); };
    FirebaseXOriginal.prototype.linkUserWithCredential = function (verificationId, code, success, error) { return cordova(this, "linkUserWithCredential", {}, arguments); };
    FirebaseXOriginal.prototype.fetch = function (cacheExpirationSeconds) { return cordova(this, "fetch", {}, arguments); };
    FirebaseXOriginal.prototype.activateFetched = function () { return cordova(this, "activateFetched", {}, arguments); };
    FirebaseXOriginal.prototype.getValue = function (key) { return cordova(this, "getValue", {}, arguments); };
    FirebaseXOriginal.prototype.getByteArray = function (key) { return cordova(this, "getByteArray", {}, arguments); };
    FirebaseXOriginal.prototype.getInfo = function () { return cordova(this, "getInfo", {}, arguments); };
    FirebaseXOriginal.prototype.setConfigSettings = function (settings) { return cordova(this, "setConfigSettings", {}, arguments); };
    FirebaseXOriginal.prototype.setDefaults = function (settings) { return cordova(this, "setDefaults", {}, arguments); };
    FirebaseXOriginal.prototype.startTrace = function (name) { return cordova(this, "startTrace", {}, arguments); };
    FirebaseXOriginal.prototype.incrementCounter = function (name) { return cordova(this, "incrementCounter", {}, arguments); };
    FirebaseXOriginal.prototype.stopTrace = function (name) { return cordova(this, "stopTrace", {}, arguments); };
    FirebaseXOriginal.pluginName = "FirebaseX";
    FirebaseXOriginal.plugin = "cordova-plugin-firebasex";
    FirebaseXOriginal.pluginRef = "FirebasePlugin";
    FirebaseXOriginal.repo = "https://github.com/dpa99c/cordova-plugin-firebasex";
    FirebaseXOriginal.platforms = ["Android", "iOS"];
    return FirebaseXOriginal;
}(IonicNativePlugin));
var FirebaseX = new FirebaseXOriginal();
export { FirebaseX };
//# sourceMappingURL=data:application/json;base64,