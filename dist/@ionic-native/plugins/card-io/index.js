var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CardIOOriginal = /** @class */ (function (_super) {
    __extends(CardIOOriginal, _super);
    function CardIOOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardIOOriginal.prototype.canScan = function () { return cordova(this, "canScan", {}, arguments); };
    CardIOOriginal.prototype.scan = function (options) { return cordova(this, "scan", {}, arguments); };
    CardIOOriginal.prototype.version = function () { return cordova(this, "version", {}, arguments); };
    CardIOOriginal.pluginName = "CardIO";
    CardIOOriginal.plugin = "card.io.cordova.mobilesdk";
    CardIOOriginal.pluginRef = "CardIO";
    CardIOOriginal.repo = "https://github.com/card-io/card.io-Cordova-Plugin";
    CardIOOriginal.platforms = ["Android", "iOS"];
    return CardIOOriginal;
}(IonicNativePlugin));
var CardIO = new CardIOOriginal();
export { CardIO };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2NhcmQtaW8vaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUNBLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0lBK0s1QywwQkFBaUI7Ozs7SUFRM0Msd0JBQU87SUFVUCxxQkFBSSxhQUFDLE9BQXVCO0lBUzVCLHdCQUFPOzs7Ozs7aUJBM01UO0VBZ0w0QixpQkFBaUI7U0FBaEMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENhcmRJT09wdGlvbnMge1xuICAvKipcbiAgICogU2V0IHRvIHRydWUgdG8gcmVxdWlyZSBleHBpcnkgZGF0ZVxuICAgKi9cbiAgcmVxdWlyZUV4cGlyeT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqICBUaGUgdXNlciB3aWxsIGJlIHByb21wdGVkIGZvciB0aGUgY2FyZCBDVlZcbiAgICovXG4gIHJlcXVpcmVDVlY/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgdXNlciB3aWxsIGJlIHByb21wdGVkIGZvciB0aGUgY2FyZCBiaWxsaW5nIHBvc3RhbCBjb2RlLlxuICAgKi9cbiAgcmVxdWlyZVBvc3RhbENvZGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiAgUmVtb3ZlcyB0aGUga2V5Ym9hcmQgYnV0dG9uIGZyb20gdGhlIHNjYW4gc2NyZWVuLlxuICAgKi9cbiAgc3VwcHJlc3NNYW51YWw/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgcG9zdGFsIGNvZGUgd2lsbCBvbmx5IGNvbGxlY3QgbnVtZXJpYyBpbnB1dC4gU2V0IHRoaXMgaWYgeW91IGtub3cgdGhlIGV4cGVjdGVkIGNvdW50cnkncyBwb3N0YWwgY29kZSBoYXMgb25seSBudW1lcmljIHBvc3RhbCBjb2Rlcy5cbiAgICovXG4gIHJlc3RyaWN0UG9zdGFsQ29kZVRvTnVtZXJpY09ubHk/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgdGhlbWUgZm9yIHRoZSBjYXJkLmlvIEFjdGl2aXR5J3Mgd2lsbCBiZSBzZXQgdG8gdGhlIHRoZW1lIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiAgICovXG4gIGtlZXBBcHBsaWNhdGlvblRoZW1lPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIHVzZXIgd2lsbCBiZSBwcm9tcHRlZCBmb3IgdGhlIGNhcmRob2xkZXIgbmFtZVxuICAgKi9cbiAgcmVxdWlyZUNhcmRob2xkZXJOYW1lPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVXNlZCB0byBkaXNwbGF5IGluc3RydWN0aW9ucyB0byB0aGUgdXNlciB3aGlsZSB0aGV5IGFyZSBzY2FubmluZyB0aGVpciBjYXJkLlxuICAgKi9cbiAgc2Nhbkluc3RydWN0aW9ucz86IHN0cmluZztcblxuICAvKipcbiAgICogIElmIHNldCwgdGhlIGNhcmQgd2lsbCBub3QgYmUgc2Nhbm5lZCB3aXRoIHRoZSBjYW1lcmEuXG4gICAqL1xuICBub0NhbWVyYT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIElmIHNjYW5FeHBpcnkgaXMgdHJ1ZSwgYW4gYXR0ZW1wdCB0byBleHRyYWN0IHRoZSBleHBpcnkgZnJvbSB0aGUgY2FyZCBpbWFnZSB3aWxsIGJlIG1hZGUuXG4gICAqL1xuICBzY2FuRXhwaXJ5PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogVGhlIHByZWZlcnJlZCBsYW5ndWFnZSBmb3IgYWxsIHN0cmluZ3MgYXBwZWFyaW5nIGluIHRoZSB1c2VyIGludGVyZmFjZS4gSWYgbm90IHNldCwgb3IgaWYgc2V0IHRvIG51bGwsIGRlZmF1bHRzIHRvIHRoZSBkZXZpY2UncyBjdXJyZW50IGxhbmd1YWdlIHNldHRpbmcuXG4gICAqL1xuICBsYW5ndWFnZU9yTG9jYWxlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBjb2xvciBvZiB0aGUgZ3VpZGUgb3ZlcmxheSBvbiB0aGUgY2FtZXJhLiBUaGUgY29sb3IgaXMgcHJvdmlkZWQgaW4gaGV4YWRlY2ltYWwgZm9ybWF0IChlLmcuIGAjRkZGRkZGYClcbiAgICovXG4gIGd1aWRlQ29sb3I/OiBzdHJpbmcgfCBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSB1c2VyIHdpbGwgbm90IGJlIHByb21wdGVkIHRvIGNvbmZpcm0gdGhlaXIgY2FyZCBudW1iZXIgYWZ0ZXIgcHJvY2Vzc2luZy5cbiAgICovXG4gIHN1cHJlc3NDb25maXJtYXRpb24/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgY2FyZC5pbyBsb2dvIHdpbGwgbm90IGJlIHNob3duIG92ZXJsYWlkIG9uIHRoZSBjYW1lcmEuXG4gICAqL1xuICBoaWRlQ2FyZElPTG9nbz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBjYXJkLmlvIGxvZ28gd2lsbCBiZSBzaG93biBpbnN0ZWFkIG9mIHRoZSBQYXlQYWwgbG9nby5cbiAgICovXG4gIHVzZUNhcmRJT0xvZ28/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBPbmNlIGEgY2FyZCBpbWFnZSBoYXMgYmVlbiBjYXB0dXJlZCBidXQgYmVmb3JlIGl0IGhhcyBiZWVuIHByb2Nlc3NlZCwgdGhpcyB2YWx1ZSB3aWxsIGRldGVybWluZSB3aGV0aGVyIHRvIGNvbnRpbnVlIHByb2Nlc3NpbmcgYXMgdXN1YWwuXG4gICAqL1xuICBzdXByZXNzU2Nhbj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FyZElPUmVzcG9uc2Uge1xuICAvKipcbiAgICogQ2FyZCB0eXBlXG4gICAqL1xuICBjYXJkVHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBNYXNrZWQgY2FyZCBudW1iZXIsIHNob3dpbmcgb25seSBsYXN0IDQgZGlnaXRzXG4gICAqL1xuICByZWRhY3RlZENhcmROdW1iZXI6IHN0cmluZztcblxuICAvKipcbiAgICogRnVsbCBjYXJkIG51bWJlclxuICAgKi9cbiAgY2FyZE51bWJlcjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBFeHBpcnkgbW9udGhcbiAgICovXG4gIGV4cGlyeU1vbnRoOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEV4cGlyeSB5ZWFyXG4gICAqL1xuICBleHBpcnlZZWFyOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENWVlxuICAgKi9cbiAgY3Z2OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFBvc3RhbCBjb2RlXG4gICAqL1xuICBwb3N0YWxDb2RlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENhcmRob2xkZXIgbmFtZVxuICAgKi9cbiAgY2FyZGhvbGRlck5hbWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBDYXJkIElPXG4gKiBAZGVzY3JpcHRpb25cbiAqIEB1c2FnZVxuICogVGhpcyBwbHVnLWluIGV4cG9zZXMgY2FyZC5pbyBjcmVkaXQgY2FyZCBzY2FubmluZy5cbiAqXG4gKiAqKk5PVEUqKjogSWYgeW91IHdvdWxkIGxpa2UgdG8gYWN0dWFsbHkgcHJvY2VzcyBhIGNyZWRpdCBjYXJkIGNoYXJnZSwgeW91IG1pZ2h0IGJlIGludGVyZXN0ZWQgaW4gdGhlIFtQYXlQYWwgQ29yZG92YSBQbHVnLWluXShodHRwczovL2dpdGh1Yi5jb20vcGF5cGFsL1BheVBhbC1Db3Jkb3ZhLVBsdWdpbikuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjYXJkLmlvLmNvcmRvdmEubW9iaWxlc2RrYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0NhcmQgSU8gcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9jYXJkLWlvL2NhcmQuaW8tQ29yZG92YS1QbHVnaW4pLlxuICpcbiAqIE5vdGU6IEZvciB1c2Ugd2l0aCBpT1MgMTAgKyBXaGVuIGJ1aWxkaW5nIHlvdXIgYXBwIHdpdGggdGhlIGlPUyAxMCBTREsgKywgeW91IGhhdmUgdG8gYWRkIHNvbWUgaW5mbyB0byB0aGUgaW5mby5wbGlzdCBmaWxlLiBUaGlzIGlzIGR1ZSB0byBpbmNyZWFzZWQgc2VjdXJpdHkgaW4gaU9TIDEwLiBHbyB0byB5b3VyIGFwcCBkaXJlY3RvcnkgYW5kIHNlYXJjaCBmb3IgdGhlIDx5b3VyIGFwcCBuYW1lPkluZm8ucGxpc3QgZmlsZS4gQWRkIHRoZSBmb2xsb3dpbmcgbGluZXMgaW4gdGhlIG1haW4gPGRpY3Q+IGVsZW1lbnQuXG4gKiBgYGB4bWxcbiAqIDxrZXk+TlNDYW1lcmFVc2FnZURlc2NyaXB0aW9uPC9rZXk+XG4gKiA8c3RyaW5nPlRvIHNjYW4gY3JlZGl0IGNhcmRzLjwvc3RyaW5nPlxuICogYGBgXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDYXJkSU8gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NhcmQtaW8vbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhcmRJTzogQ2FyZElPKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5jYXJkSU8uY2FuU2NhbigpXG4gKiAgIC50aGVuKFxuICogICAgIChyZXM6IGJvb2xlYW4pID0+IHtcbiAqICAgICAgIGlmKHJlcyl7XG4gKiAgICAgICAgIGxldCBvcHRpb25zID0ge1xuICogICAgICAgICAgIHJlcXVpcmVFeHBpcnk6IHRydWUsXG4gKiAgICAgICAgICAgcmVxdWlyZUNWVjogZmFsc2UsXG4gKiAgICAgICAgICAgcmVxdWlyZVBvc3RhbENvZGU6IGZhbHNlXG4gKiAgICAgICAgIH07XG4gKiAgICAgICAgIHRoaXMuY2FyZElPLnNjYW4ob3B0aW9ucyk7XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICApO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogQ2FyZElPT3B0aW9uc1xuICogQ2FyZElPUmVzcG9uc2VcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdDYXJkSU8nLFxuICBwbHVnaW46ICdjYXJkLmlvLmNvcmRvdmEubW9iaWxlc2RrJyxcbiAgcGx1Z2luUmVmOiAnQ2FyZElPJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jYXJkLWlvL2NhcmQuaW8tQ29yZG92YS1QbHVnaW4nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYXJkSU8gZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGNhcmQgc2Nhbm5pbmcgaXMgY3VycmVudGx5IGF2YWlsYWJsZS4gKE1heSB2YXJ5IGJ5XG4gICAqIGRldmljZSwgT1MgdmVyc2lvbiwgbmV0d29yayBjb25uZWN0aXZpdHksIGV0Yy4pXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjYW5TY2FuKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FuIGEgY3JlZGl0IGNhcmQgd2l0aCBjYXJkLmlvLlxuICAgKiBAcGFyYW0ge0NhcmRJT09wdGlvbnN9IFtvcHRpb25zXSBPcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgcGx1Z2luXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNjYW4ob3B0aW9ucz86IENhcmRJT09wdGlvbnMpOiBQcm9taXNlPENhcmRJT1Jlc3BvbnNlPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHRoZSB2ZXJzaW9uIG9mIHRoZSBjYXJkLmlvIGxpYnJhcnkuIFVzZWZ1bCB3aGVuIGNvbnRhY3Rpbmcgc3VwcG9ydC5cbiAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdmVyc2lvbigpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19