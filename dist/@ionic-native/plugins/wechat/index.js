var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var WechatOriginal = /** @class */ (function (_super) {
    __extends(WechatOriginal, _super);
    function WechatOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WechatOriginal.prototype.isInstalled = function () { return cordova(this, "isInstalled", {}, arguments); };
    WechatOriginal.prototype.share = function (params) { return cordova(this, "share", {}, arguments); };
    WechatOriginal.prototype.auth = function (scope, state) { return cordova(this, "auth", {}, arguments); };
    WechatOriginal.prototype.sendPaymentRequest = function (params) { return cordova(this, "sendPaymentRequest", {}, arguments); };
    WechatOriginal.prototype.jumpToWechat = function (url) { return cordova(this, "jumpToWechat", {}, arguments); };
    WechatOriginal.prototype.chooseInvoiceFromWX = function (params) { return cordova(this, "chooseInvoiceFromWX", {}, arguments); };
    WechatOriginal.pluginName = "Wechat";
    WechatOriginal.plugin = "cordova-plugin-wechat";
    WechatOriginal.pluginRef = "Wechat";
    WechatOriginal.repo = "https://github.com/xu-li/cordova-plugin-wechat.git";
    WechatOriginal.install = "cordova plugin add cordova-plugin-wechat --variable wechatappid=YOUR_WECHAT_APPID";
    WechatOriginal.installVariables = ["wechatappid"];
    WechatOriginal.platforms = ["Android", "iOS"];
    return WechatOriginal;
}(IonicNativePlugin));
var Wechat = new WechatOriginal();
export { Wechat };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3dlY2hhdC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFpQzVDLDBCQUFpQjs7OztJQWtCM0MsNEJBQVc7SUE4Qlgsc0JBQUssYUFBQyxNQUFXO0lBYWpCLHFCQUFJLGFBQUMsS0FBVSxFQUFFLEtBQVU7SUF5QjNCLG1DQUFrQixhQUFDLE1BQVc7SUE0QjlCLDZCQUFZLGFBQUMsR0FBVztJQWtCeEIsb0NBQW1CLGFBQUMsTUFBVzs7Ozs7Ozs7aUJBdEtqQztFQWtDNEIsaUJBQWlCO1NBQWhDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBXZWNoYXRcbiAqIEBkZXNjcmlwdGlvblxuICogQSBjb3Jkb3ZhIHBsdWdpbiwgYSBKUyB2ZXJzaW9uIG9mIFdlY2hhdCBTREtcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFdlY2hhdCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvd2VjaGF0L25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgd2VjaGF0OiBXZWNoYXQpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLndlY2hhdC5mdW5jdGlvbk5hbWUoJ0hlbGxvJywgMTIzKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKHJlcykpXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ1dlY2hhdCcsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXdlY2hhdCcsXG4gIHBsdWdpblJlZjogJ1dlY2hhdCcsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20veHUtbGkvY29yZG92YS1wbHVnaW4td2VjaGF0LmdpdCcsXG4gIGluc3RhbGw6ICdjb3Jkb3ZhIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4td2VjaGF0IC0tdmFyaWFibGUgd2VjaGF0YXBwaWQ9WU9VUl9XRUNIQVRfQVBQSUQnLFxuICBpbnN0YWxsVmFyaWFibGVzOiBbJ3dlY2hhdGFwcGlkJ10sXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFdlY2hhdCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgU2NlbmU6IHtcbiAgICBTRVNTSU9OOiAwOyAvLyDogYrlpKnnlYzpnaJcbiAgICBUSU1FTElORTogMTsgLy8g5pyL5Y+L5ZyIXG4gICAgRkFWT1JJVEU6IDI7IC8vIOaUtuiXj1xuICB9O1xuXG4gIFR5cGU6IHtcbiAgICBBUFA6IDE7XG4gICAgRU1PVElPTjogMjtcbiAgICBGSUxFOiAzO1xuICAgIElNQUdFOiA0O1xuICAgIE1VU0lDOiA1O1xuICAgIFZJREVPOiA2O1xuICAgIFdFQlBBR0U6IDc7XG4gIH07XG5cbiAgQENvcmRvdmEoKVxuICBpc0luc3RhbGxlZCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaGFyZSBhIG1lc3NhZ2UgdG8gd2VjaGF0IGFwcFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiA8Y29kZT5cbiAgICogdGhpcy53ZWNoYXQuc2hhcmUoe1xuICAgKiAgICAgbWVzc2FnZToge1xuICAgKiAgICAgICAgdGl0bGU6IFwiTWVzc2FnZSBUaXRsZVwiLFxuICAgKiAgICAgICAgZGVzY3JpcHRpb246IFwiTWVzc2FnZSBEZXNjcmlwdGlvbihvcHRpb25hbClcIixcbiAgICogICAgICAgIG1lZGlhVGFnTmFtZTogXCJNZWRpYSBUYWcgTmFtZShvcHRpb25hbClcIixcbiAgICogICAgICAgIHRodW1iOiBcImh0dHA6Ly9ZT1VSX1RIVU1CTkFJTF9JTUFHRVwiLFxuICAgKiAgICAgICAgbWVkaWE6IHtcbiAgICogICAgICAgICAgICB0eXBlOiBXZWNoYXQuVHlwZS5XRUJQQUdFLCAgIC8vIHdlYnBhZ2VcbiAgICogICAgICAgICAgICB3ZWJwYWdlVXJsOiBcImh0dHBzOi8vZ2l0aHViLmNvbS94dS1saS9jb3Jkb3ZhLXBsdWdpbi13ZWNoYXRcIiAgICAvLyB3ZWJwYWdlXG4gICAqICAgICAgICB9XG4gICAqICAgIH0sXG4gICAqICAgIHNjZW5lOiB0aGlzLndlY2hhdC5TY2VuZS5USU1FTElORSAgIC8vIHNoYXJlIHRvIFRpbWVsaW5lXG4gICAqIH0udGhlbigoKSA9PiB7XG4gICAqICAgICAgIGNvbnNvbGUubG9nKCdzaGFyZSBzdWNjZXNzJyk7XG4gICAqICAgIH0pXG4gICAqICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAqICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICogICAgfSk7XG4gICAqIDwvY29kZT5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2hhcmUocGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kaW5nIGFuIGF1dGggcmVxdWVzdCB0byBXZWNoYXRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPGNvZGU+XG4gICAqIHRoaXMud2VjaGF0LmF1dGgudGhlbigocmVzKSA9PiB7IGFsZXJ0KHJlcy5jb2RlKTsgfSk7XG4gICAqIDwvY29kZT5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgYXV0aChzY29wZTogYW55LCBzdGF0ZTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2VuZCBhIHBheW1lbnQgcmVxdWVzdFxuICAgKlxuICAgKiBAbGluayBodHRwczovL3BheS53ZWl4aW4ucXEuY29tL3dpa2kvZG9jL2FwaS9hcHAucGhwP2NoYXB0ZXI9OV8xXG4gICAqIEBleGFtcGxlXG4gICAqIDxjb2RlPlxuICAgKiB2YXIgcGFyYW1zID0ge1xuICAgKiAgICAgbWNoX2lkOiAnMTAwMDAxMDAnLCAvLyBtZXJjaGFudCBpZFxuICAgKiAgICAgcHJlcGF5X2lkOiAnd3gyMDE0MTExMDE2Mzk1MDdjYmY2ZmZkOGIwNzc5OTUwODc0JywgLy8gcHJlcGF5IGlkIHJldHVybmVkIGZyb20gc2VydmVyXG4gICAqICAgICBub25jZTogJzFhZGQxYTMwYWM4N2FhMmRiNzJmNTdhMjM3NWQ4ZmVjJywgLy8gbm9uY2Ugc3RyaW5nIHJldHVybmVkIGZyb20gc2VydmVyXG4gICAqICAgICB0aW1lc3RhbXA6ICcxNDM5NTMxMzY0JywgLy8gdGltZXN0YW1wXG4gICAqICAgICBzaWduOiAnMENCMDE1MzNCOEMxRUYxMDMwNjUxNzRGNTBCQ0EwMDEnLCAvLyBzaWduZWQgc3RyaW5nXG4gICAqIH07XG4gICAqIHRoaXMud2VjaGF0LnNlbmRQYXltZW50UmVxdWVzdChwYXJhbXMpLnRoZW4oKCkgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coXCJTdWNjZXNzXCIpO1xuICAgKiB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAqIH0pO1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNlbmRQYXltZW50UmVxdWVzdChwYXJhbXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIGp1bXBUb0JpelByb2ZpbGUg77yI6Lez6L2s5Yiw5p+Q5Liq5b6u5L+h5YWs5LyX5Y+377yJMjAxNi0xMS0xMSDmtYvor5XmmK/lpLHmlYjnmoTvvIzlm6dcbiAgICpcbiAgICogQGxpbmsgaHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNzIwNDYyNFxuICAgKiBAbGluayBodHRwczovL3NlZ21lbnRmYXVsdC5jb20vcS8xMDEwMDAwMDAzOTA3Nzk2XG4gICAqIEBleGFtcGxlXG4gICAqIDxjb2RlPlxuICAgKiB2YXIgcGFyYW1zID0ge1xuICAgKiAgICAgaW5mbzogJ2doX3h4eHh4eHgnLCAvLyDlhazkvJfluJDlj7fljp/lp4tJRFxuICAgKiAgICAgdHlwZTogICdOb3JtYWwnIC8vIOaZrumAmuWPt1xuICAgKiB9XG4gICAqIG9yXG4gICAqIHZhciBwYXJhbXMgPSB7XG4gICAqICAgICBpbmZvOiAnZXh0TXNnJywgLy8g55u45YWz55qE56Gs5Lu25LqM57u056CB5LiyXG4gICAqICAgICB0eXBlOiAgJ0RldmljZScgLy8g56Gs5Lu25Y+3XG4gICAqIH07XG4gICAqIHRoaXMud2VjaGF0Lmp1bXBUb0JpelByb2ZpbGUocGFyYW1zKS50aGVuKCgpPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coXCJTdWNjZXNzXCIpO1xuICAgKiB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAqIH0pO1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGp1bXBUb1dlY2hhdCh1cmw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIGNob29zZUludm9pY2VGcm9tV1ggZXhxOmNob29zZSBpbnZvaWNlcyBmcm9tIFdlY2hhdCBjYXJkIGxpc3RcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogPGNvZGU+XG4gICAqIHBhcmFtczogc2lnblR5cGUsIGNhcmRTaWduLCBub25jZVN0ciwgdGltZVN0YW1wICBhbGwgcmVxdWlyZWRcbiAgICogdGhpcy53ZWNoYXQuY2hvb3NlSW52b2ljZUZyb21XWChwYXJhbXMpLnRoZW4oKCkgPT4ge1xuICAgKiAgICAgY29uc29sZS5sb2coXCJTdWNjZXNzXCIpO1xuICAgKiB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAqICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAqIH0pO1xuICAgKiA8L2NvZGU+XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNob29zZUludm9pY2VGcm9tV1gocGFyYW1zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19