var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordovaFunctionOverride, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var IndexAppContentOriginal = /** @class */ (function (_super) {
    __extends(IndexAppContentOriginal, _super);
    function IndexAppContentOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IndexAppContentOriginal.prototype.isIndexingAvailable = function () { return cordova(this, "isIndexingAvailable", {}, arguments); };
    IndexAppContentOriginal.prototype.setItems = function (items) { return cordova(this, "setItems", {}, arguments); };
    IndexAppContentOriginal.prototype.clearItemsForDomains = function (domains) { return cordova(this, "clearItemsForDomains", {}, arguments); };
    IndexAppContentOriginal.prototype.clearItemsForIdentifiers = function (identifiers) { return cordova(this, "clearItemsForIdentifiers", {}, arguments); };
    IndexAppContentOriginal.prototype.onItemPressed = function () { return cordovaFunctionOverride(this, "onItemPressed", {}, arguments); };
    IndexAppContentOriginal.prototype.setIndexingInterval = function (intervalMinutes) { return cordova(this, "setIndexingInterval", {}, arguments); };
    IndexAppContentOriginal.pluginName = "IndexAppContent";
    IndexAppContentOriginal.plugin = "cordova-plugin-indexappcontent";
    IndexAppContentOriginal.pluginRef = "window.plugins.indexAppContent";
    IndexAppContentOriginal.repo = "https://github.com/johanblomgren/cordova-plugin-indexappcontent";
    IndexAppContentOriginal.platforms = ["iOS"];
    return IndexAppContentOriginal;
}(IonicNativePlugin));
var IndexAppContent = new IndexAppContentOriginal();
export { IndexAppContent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2luZGV4LWFwcC1jb250ZW50L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLHVEQUtOLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUF1RUcsbUNBQWlCOzs7O0lBT3BELDZDQUFtQjtJQVVuQixrQ0FBUSxhQUFDLEtBQWtCO0lBVTNCLDhDQUFvQixhQUFDLE9BQWlCO0lBVXRDLGtEQUF3QixhQUFDLFdBQXFCO0lBVTlDLHVDQUFhO0lBVWIsNkNBQW1CLGFBQUMsZUFBdUI7Ozs7OzswQkF2STdDO0VBOEVxQyxpQkFBaUI7U0FBekMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIENvcmRvdmEsXG4gIENvcmRvdmFGdW5jdGlvbk92ZXJyaWRlLFxuICBJb25pY05hdGl2ZVBsdWdpbixcbiAgUGx1Z2luXG59IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhJdGVtIHtcbiAgZG9tYWluOiBzdHJpbmc7XG4gIGlkZW50aWZpZXI6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcblxuICAvKipcbiAgICogVXJsIHRvIGltYWdlXG4gICAqL1xuICB1cmw6IHN0cmluZztcblxuICAvKipcbiAgICogSXRlbSBrZXl3b3Jkc1xuICAgKi9cbiAga2V5d29yZHM/OiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogTGlmZXRpbWUgaW4gbWludXRlc1xuICAgKi9cbiAgbGlmZXRpbWU/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQG5hbWUgSW5kZXggQXBwIENvbnRlbnRcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZ2l2ZXMgeW91IGEgSmF2YXNjcmlwdCBBUEkgdG8gaW50ZXJhY3Qgd2l0aCBDb3JlIFNwb3RsaWdodCBvbiBpT1MgKD0+IGlPUyA5KS5cbiAqIFlvdSBjYW4gYWRkLCB1cGRhdGUgYW5kIGRlbGV0ZSBpdGVtcyB0byB0aGUgc3BvdGxpZ2h0IHNlYXJjaCBpbmRleC5cbiAqIFNwb3RsaWdodCBTZWFyY2ggd2lsbCBpbmNsdWRlIHRoZXNlIGl0ZW1zIGluIHRoZSByZXN1bHQgbGlzdC4gWW91IGNhbiBkZWVwLWxpbmsgdGhlIHNlYXJjaCByZXN1bHRzIHdpdGggeW91ciBhcHAuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBJbmRleEFwcENvbnRlbnQgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2luZGV4LWFwcC1jb250ZW50L25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5kZXhBcHBDb250ZW50OiBJbmRleEFwcENvbnRlbnQpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIHZhciBpdGVtcyA9IFtcbiAqICAgICAge1xuICogICAgICAgIGRvbWFpbjogJ2NvbS5teS5kb21haW4nLFxuICogICAgICAgIGlkZW50aWZpZXI6ICc4OGFzZGY3ZHNmJyxcbiAqICAgICAgICB0aXRsZTogJ0ZvbycsXG4gKiAgICAgICAgZGVzY3JpcHRpb246ICdCYXInLFxuICogICAgICAgIHVybDogJ2h0dHA6Ly9sb2NhdGlvbi9vZi9teS9pbWFnZS5qcGcnLFxuICogICAgfSxcbiAqICAgIHtcbiAqICAgICAgICBkb21haW46ICdjb20ub3RoZXIuZG9tYWluJyxcbiAqICAgICAgICBpZGVudGlmaWVyOiAnOWFzZDY3ZzZhJyxcbiAqICAgICAgICB0aXRsZTogJ0JheicsXG4gKiAgICAgICAgZGVzY3JpcHRpb246ICdXb290JyxcbiAqICAgICAgICB1cmw6ICdodHRwOi8vbG9jYXRpb24vb2YvbXkvaW1hZ2UyLmpwZycsXG4gKiAgICAgfVxuICogXTtcbiAqXG4gKiB0aGlzLmluZGV4QXBwQ29udGVudC5zZXRJdGVtcyhpdGVtcylcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdJbmRleEFwcENvbnRlbnQnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1pbmRleGFwcGNvbnRlbnQnLFxuICBwbHVnaW5SZWY6ICd3aW5kb3cucGx1Z2lucy5pbmRleEFwcENvbnRlbnQnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2pvaGFuYmxvbWdyZW4vY29yZG92YS1wbHVnaW4taW5kZXhhcHBjb250ZW50JyxcbiAgcGxhdGZvcm1zOiBbJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEluZGV4QXBwQ29udGVudCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFRoZSBvcHRpb24gdG8gaW5kZXggYXBwIGNvbnRlbnQgbWlnaHQgbm90IGJlIGF2YWlsYWJsZSBhdCBhbGwgZHVlIHRvIGRldmljZSBsaW1pdGF0aW9ucyBvciB1c2VyIHNldHRpbmdzLlxuICAgKiBUaGVyZWZvcmUgaXQncyBoaWdobHkgcmVjb21tZW5kZWQgdG8gY2hlY2sgdXBmcm9udCBpZiBpbmRleGluZyBpcyBwb3NzaWJsZS5cbiAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRydWUgaWYgaW5kZXhpbmcgaXMgYXZhaWxhYmxlLCBmYWxzZSBpZiBub3RcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNJbmRleGluZ0F2YWlsYWJsZSgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQWRkIG9yIGNoYW5nZSBpdGVtcyB0byBzcG90bGlnaHQgaW5kZXhcbiAgICogQHBhcmFtIHtJbmRleEl0ZW1bXX0gaXRlbXMgQXJyYXkgb2YgaXRlbXMgdG8gaW5kZXhcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGlmIGluZGV4IHNldCB3YXMgc3VjY2Vzc2Z1bGx5XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldEl0ZW1zKGl0ZW1zOiBJbmRleEl0ZW1bXSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpdGVtcyBzdG9yZWQgZm9yIGEgZ2l2ZW4gYXJyYXkgb2YgZG9tYWluc1xuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBkb21haW5zIEFycmF5IG9mIGRvbWFpbnMgdG8gY2xlYXJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXNvbHZlIGlmIHN1Y2Nlc3NmdWxseVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjbGVhckl0ZW1zRm9yRG9tYWlucyhkb21haW5zOiBzdHJpbmdbXSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBpdGVtcyBzdG9yZWQgZm9yIGEgZ2l2ZW4gYXJyYXkgb2YgaWRlbnRpZmllcnNcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gaWRlbnRpZmllcnMgQXJyYXkgb2YgaWRlbnRpZmllcnMgdG8gY2xlYXJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXNvbHZlIGlmIHN1Y2Nlc3NmdWxseVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjbGVhckl0ZW1zRm9ySWRlbnRpZmllcnMoaWRlbnRpZmllcnM6IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSWYgdXNlciB0YXBzIG9uIGEgc2VhcmNoIHJlc3VsdCBpbiBzcG90bGlnaHQgdGhlbiB0aGUgYXBwIHdpbGwgYmUgbGF1bmNoZWQuXG4gICAqIFlvdSBjYW4gcmVnaXN0ZXIgYSBKYXZhc2NyaXB0IGhhbmRsZXIgdG8gZ2V0IGluZm9ybWVkIHdoZW4gdGhpcyBoYXBwZW5zLlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSByZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBub3RpZmllcyB5b3Ugd2hlbiBoZSB1c2VyIHByZXNzZXMgb24gdGhlIGhvbWUgc2NyZWVuIGljb25cbiAgICovXG4gIEBDb3Jkb3ZhRnVuY3Rpb25PdmVycmlkZSgpXG4gIG9uSXRlbVByZXNzZWQoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogWW91IG1pZ2h0IHdhbnQgdG8gYXZvaWQgdG8gdXBkYXRlIHNwb3RsaWdodCBpbmRleCB0b28gZnJlcXVlbnRseS5cbiAgICogV2l0aG91dCBjYWxsaW5nIHRoaXMgZnVuY3Rpb24gYSBzdWJzZXF1ZW50IGNhbGwgdG8gbWFuaXB1bGF0ZSB0aGUgaW5kZXggaXMgb25seSBwb3NzaWJsZSBhZnRlciAxNDQwIG1pbnV0ZXMgKD0gMjQgaG91cnMpIVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWxNaW51dGVzIHZhbHVlID0+IDBcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0SW5kZXhpbmdJbnRlcnZhbChpbnRlcnZhbE1pbnV0ZXM6IG51bWJlcikge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19