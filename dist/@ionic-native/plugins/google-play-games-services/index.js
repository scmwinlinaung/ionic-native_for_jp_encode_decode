var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var GooglePlayGamesServicesOriginal = /** @class */ (function (_super) {
    __extends(GooglePlayGamesServicesOriginal, _super);
    function GooglePlayGamesServicesOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GooglePlayGamesServicesOriginal.prototype.auth = function () { return cordova(this, "auth", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.signOut = function () { return cordova(this, "signOut", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.isSignedIn = function () { return cordova(this, "isSignedIn", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.showPlayer = function () { return cordova(this, "showPlayer", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.submitScore = function (data) { return cordova(this, "submitScore", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.submitScoreNow = function (data) { return cordova(this, "submitScoreNow", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.getPlayerScore = function (data) { return cordova(this, "getPlayerScore", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.showAllLeaderboards = function () { return cordova(this, "showAllLeaderboards", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.showLeaderboard = function (data) { return cordova(this, "showLeaderboard", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.unlockAchievement = function (data) { return cordova(this, "unlockAchievement", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.unlockAchievementNow = function (data) { return cordova(this, "unlockAchievementNow", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.incrementAchievement = function (data) { return cordova(this, "incrementAchievement", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.incrementAchievementNow = function (data) { return cordova(this, "incrementAchievementNow", {}, arguments); };
    GooglePlayGamesServicesOriginal.prototype.showAchievements = function () { return cordova(this, "showAchievements", {}, arguments); };
    GooglePlayGamesServicesOriginal.pluginName = "GooglePlayGamesServices";
    GooglePlayGamesServicesOriginal.plugin = "cordova-plugin-play-games-services";
    GooglePlayGamesServicesOriginal.pluginRef = "plugins.playGamesServices";
    GooglePlayGamesServicesOriginal.repo = "https://github.com/artberri/cordova-plugin-play-games-services";
    GooglePlayGamesServicesOriginal.platforms = ["Android"];
    GooglePlayGamesServicesOriginal.install = "ionic cordova plugin add cordova-plugin-play-games-services --variable APP_ID=\"YOUR_APP_ID";
    return GooglePlayGamesServicesOriginal;
}(IonicNativePlugin));
var GooglePlayGamesServices = new GooglePlayGamesServicesOriginal();
export { GooglePlayGamesServices };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2dvb2dsZS1wbGF5LWdhbWVzLXNlcnZpY2VzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQXFPM0IsMkNBQWlCOzs7O0lBUzVELHNDQUFJO0lBV0oseUNBQU87SUFXUCw0Q0FBVTtJQVdWLDRDQUFVO0lBYVYsNkNBQVcsYUFBQyxJQUFlO0lBYzNCLGdEQUFjLGFBQUMsSUFBZTtJQWE5QixnREFBYyxhQUFDLElBQXFCO0lBWXBDLHFEQUFtQjtJQWFuQixpREFBZSxhQUFDLElBQXFCO0lBWXJDLG1EQUFpQixhQUFDLElBQXFCO0lBWXZDLHNEQUFvQixhQUFDLElBQXFCO0lBWTFDLHNEQUFvQixhQUFDLElBQWtDO0lBWXZELHlEQUF1QixhQUFDLElBQWtDO0lBWTFELGtEQUFnQjs7Ozs7OztrQ0E3WWxCO0VBc082QyxpQkFBaUI7U0FBakQsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NvcmVEYXRhIHtcblxuICAvKipcbiAgICogVGhlIHNjb3JlIHRvIHN1Ym1pdC5cbiAgICovXG4gIHNjb3JlOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBsZWFkZXJib2FyZCBJRCBmcm9tIEdvb2dsZSBQbGF5IERldmVsb3BlciBjb25zb2xlLlxuICAgKi9cbiAgbGVhZGVyYm9hcmRJZDogc3RyaW5nO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWVyU2NvcmVEYXRhIHtcbiAgLyoqXG4gICAqIFRoZSBwbGF5ZXIgc2NvcmUuXG4gICAqL1xuICBwbGF5ZXJTY29yZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlYWRlcmJvYXJkRGF0YSB7XG5cbiAgLyoqXG4gICAqIFRoZSBsZWFkZXJib2FyZCBJRCBmcm9tIEdvb2xlIFBsYXkgRGV2ZWxvcGVyIGNvbnNvbGUuXG4gICAqL1xuICBsZWFkZXJib2FyZElkOiBzdHJpbmc7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY2hpZXZlbWVudERhdGEge1xuXG4gIC8qKlxuICAgKiBUaGUgYWNoaWV2ZW1lbnQgSUQgZnJvbSBHb29nbGUgUGxheSBEZXZlbG9wZXIgY29uc29sZS5cbiAgICovXG4gIGFjaGlldmVtZW50SWQ6IHN0cmluZztcblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluY3JlbWVudGFibGVBY2hpZXZlbWVudERhdGEgZXh0ZW5kcyBBY2hpZXZlbWVudERhdGEge1xuXG4gIC8qKlxuICAgKiBUaGUgYW1vdW50IHRvIGluY3JlbWVudCB0aGUgYWNoaWV2ZW1lbnQgYnkuXG4gICAqL1xuICBudW1TdGVwczogbnVtYmVyO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2lnbmVkSW5SZXNwb25zZSB7XG5cbiAgLyoqXG4gICAqIFRydWUgb3IgZmFsc2UgaXMgdGhlIHVzZSBpcyBzaWduZWQgaW4uXG4gICAqL1xuICBpc1NpZ25lZEluOiBib29sZWFuO1xuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWVyIHtcblxuICAvKipcbiAgICogVGhlIHBsYXllcnMgZGlzcGxheSBuYW1lLlxuICAgKi9cbiAgZGlzcGxheU5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIElEIGdpdmVuIHRvIHRoZSBwbGF5ZXIgYnkgUGxheSBHYW1lcyBTZXJ2aWNlcy5cbiAgICovXG4gIHBsYXllcklkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB0aXRsZSBvZiB0aGUgcGxheWVyIGJhc2VkIG9uIHRoZWlyIGdhbWVwbGF5IGFjdGl2aXR5LiBOb3RcbiAgICogYWxsIHBsYXllcnMgaGF2ZSB0aGlzIGFuZCBpdCBtYXkgY2hhbmdlIG92ZXIgdGltZS5cbiAgICovXG4gIHRpdGxlOiBzdHJpbmcgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIFVSSSBmb3IgbG9hZGluZyB0aGlzIHBsYXllcidzIGljb24tc2l6ZSBwcm9maWxlIGltYWdlLlxuICAgKiBSZXR1cm5zIG51bGwgaWYgdGhlIHBsYXllciBoYXMgbm8gcHJvZmlsZSBpbWFnZS5cbiAgICovXG4gIGljb25JbWFnZVVybDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIFVSSSBmb3IgbG9hZGluZyB0aGlzIHBsYXllcidzIGhpLXJlcyBwcm9maWxlIGltYWdlLiBSZXR1cm5zXG4gICAqIG51bGwgaWYgdGhlIHBsYXllciBoYXMgbm8gcHJvZmlsZSBpbWFnZS5cbiAgICovXG4gIGhpUmVzSWNvbkltYWdlVXJsOiBzdHJpbmc7XG5cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdWJtaXR0ZWRTY29yZURhdGEge1xuXG4gIC8qKlxuICAgKiBUaGUgbGVhZGVyYm9hcmQgSUQgZnJvbSBHb29sZSBQbGF5IERldmVsb3BlciBjb25zb2xlLlxuICAgKi9cbiAgbGVhZGVyYm9hcmRJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcGxheWVyIElEIGZyb20gR29vbGUgUGxheSBEZXZlbG9wZXIgY29uc29sZS5cbiAgICovXG4gIHBsYXllcklkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBzY29yZSBkYXRhIGluIGEgZGlzcGxheS1hcHByb3ByaWF0ZSBmb3JtYXQuXG4gICAqL1xuICBmb3JtYXR0ZWRTY29yZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0aGlzIHNjb3JlIHdhcyB0aGUgcGxheWVyJ3MgbmV3IGJlc3Qgc2NvcmUuXG4gICAqL1xuICBuZXdCZXN0OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgcmF3IHNjb3JlIHZhbHVlIG9mIHRoaXMgc2NvcmUgcmVzdWx0LlxuICAgKi9cbiAgcmF3U2NvcmU6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIHNjb3JlIHRhZyBhc3NvY2lhdGVkIHdpdGggdGhpcyByZXN1bHQsIGlmIGFueS5cbiAgICovXG4gIHNjb3JlVGFnOiBzdHJpbmc7XG5cbn1cblxuLyoqXG4gKiBAbmFtZSBHb29nbGUgUGxheSBHYW1lcyBTZXJ2aWNlc1xuICogQGRlc2NyaXB0aW9uXG4gKiBBIENvcmRvdmEgcGx1Z2luIHRoYXQgbGV0J3MgeW91IGludGVyYWN0IHdpdGggR29vZ2xlIFBsYXkgR2FtZXMgU2VydmljZXMuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBHb29nbGVQbGF5R2FtZXNTZXJ2aWNlcyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZ29vZ2xlLXBsYXktZ2FtZXMtc2VydmljZXMvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBnb29nbGVQbGF5R2FtZXNTZXJ2aWNlczogR29vZ2xlUGxheUdhbWVzU2VydmljZXMpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqIC8vIEF1dGhlbnRpY2F0ZSB3aXRoIFBsYXkgR2FtZXMgU2VydmljZXNcbiAqIHRoaXMuZ29vZ2xlUGxheUdhbWVzU2VydmljZXMuYXV0aCgpXG4gKiAgICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0xvZ2dlZCBpbiB0byBQbGF5IEdhbWVzIFNlcnZpY2VzJykpXG4gKiAgICAgLmNhdGNoKGUpID0+IGNvbnNvbGUubG9nKCdFcnJvciBsb2dnaW5nIGluIFBsYXkgR2FtZXMgU2VydmljZXMnLCBlKTtcbiAqXG4gKiAvLyBTaWduIG91dCBvZiBQbGF5IEdhbWVzIFNlcnZpY2VzLlxuICogdGhpcy5nb29nbGVQbGF5R2FtZXNTZXJ2aWNlcy5zaWduT3V0KClcbiAqICAgICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnTG9nZ2VkIG91dCBvZiBQbGF5IEdhbWVzIFNlcnZpY2VzJykpXG4gKiAgICAgLmNhdGNoKGUgPT4gY29uc29sZS5sb2coJ0Vycm9yIGxvZ2dpbmcgb3V0IG9mIFBsYXkgR2FtZXMgU2VydmljZXMnLCBlKTtcbiAqXG4gKiAvLyBDaGVjayBhdXRoIHN0YXR1cy5cbiAqIHRoaXMuZ29vZ2xlUGxheUdhbWVzU2VydmljZXMuaXNTaWduZWRJbigpXG4gKiAgICAgLnRoZW4oKHNpZ25lZEluOiBTaWduZWRJblJlc3BvbnNlKSA9PiB7XG4gKiAgICAgICAgIGlmIChzaWduZWRJbi5pc1NpZ25lZEluKSB7XG4gKiAgICAgICAgICAgICBoaWRlTG9naW5CdXR0b24oKTtcbiAqICAgICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqIC8vIEZldGNoIGN1cnJlbnRseSBhdXRoZW50aWNhdGVkIHVzZXIncyBkYXRhLlxuICogdGhpcy5nb29nbGVQbGF5R2FtZXNTZXJ2aWNlcy5zaG93UGxheWVyKCkudGhlbigoZGF0YTogUGxheWVyKSA9PiB7XG4gKiAgICBjb25zb2xlLmxvZygnUGxheWVyIGRhdGEnLCBkYXRhKTtcbiAqIH0pO1xuICpcbiAqIC8vIFN1Ym1pdCBhIHNjb3JlLlxuICogdGhpcy5nb29nbGVQbGF5R2FtZXNTZXJ2aWNlcy5zdWJtaXRTY29yZSh7XG4gKiAgICAgc2NvcmU6IDEwMCxcbiAqICAgICBsZWFkZXJib2FyZElkOiAnU29tZUxlYWRlcmJvYXJkSWQnXG4gKiB9KTtcbiAqXG4gKiAvLyBTdWJtaXQgYSBzY29yZSBhbmQgd2FpdCBmb3IgcmVwb25zZS5cbiAqIHRoaXMuZ29vZ2xlUGxheUdhbWVzU2VydmljZXMuc3VibWl0U2NvcmVOb3coe1xuICogICAgIHNjb3JlOiAxMDAsXG4gKiAgICAgbGVhZGVyYm9hcmRJZDogJ1NvbWVMZWFkZXJib2FyZElkJ1xuICogfSkudGhlbigoZGF0YTogU3VibWl0dGVkU2NvcmVEYXRhKSA9PiB7XG4gKiAgICBjb25zb2xlLmxvZygnU2NvcmUgcmVsYXRlZCBkYXRhJywgZGF0YSk7XG4gKiB9KTtcbiAqXG4gKiAvLyBHZXQgdGhlIHBsYXllciBzY29yZSBvbiBhIGxlYWRlcmJvYXJkLlxuICogdGhpcy5nb29nbGVQbGF5R2FtZXNTZXJ2aWNlcy5nZXRQbGF5ZXJTY29yZSh7XG4gKiAgICAgbGVhZGVyYm9hcmRJZDogJ1NvbWVMZWFkZXJCb2FyZElkJ1xuICogfSkudGhlbigoZGF0YTogUGxheWVyU2NvcmVEYXRhKSA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coJ1BsYXllciBzY29yZScsIGRhdGEpO1xuICogfSk7XG4gKlxuICogLy8gU2hvdyB0aGUgbmF0aXZlIGxlYWRlcmJvYXJkcyB3aW5kb3cuXG4gKiB0aGlzLmdvb2dsZVBsYXlHYW1lc1NlcnZpY2VzLnNob3dBbGxMZWFkZXJib2FyZHMoKVxuICogICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdUaGUgbGVhZGVyYm9hcmQgd2luZG93IGlzIHZpc2libGUuJykpO1xuICpcbiAqIC8vIFNob3cgYSBzaWdubGUgbmF0aXZlIGxlYWRlcmJvYXJkIHdpbmRvdy5cbiAqIHRoaXMuZ29vZ2xlUGxheUdhbWVzU2VydmljZXMuc2hvd0xlYWRlcmJvYXJkKHtcbiAqICAgICBsZWFkZXJib2FyZElkOiAnU29tZUxlYWRlckJvYXJkSWQnXG4gKiB9KS50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdUaGUgbGVhZGVyYm9hcmQgd2luZG93IGlzIHZpc2libGUuJykpO1xuICpcbiAqIC8vIFVubG9jayBhbiBhY2hpZXZlbWVudC5cbiAqIHRoaXMuZ29vZ2xlUGxheUdhbWVzU2VydmljZXMudW5sb2NrQWNoaWV2ZW1lbnQoe1xuICogICAgIGFjaGlldmVtZW50SWQ6ICdTb21lQWNoaWV2ZW1lbnRJZCdcbiAqIH0pLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0FjaGlldmVtZW50IHNlbnQnKSk7XG4gKlxuICogLy8gVW5sb2NrIGFuIGFjaGlldmVtZW50IGFuZCB3YWl0IGZvciByZXNwb25zZS5cbiAqIHRoaXMuZ29vZ2xlUGxheUdhbWVzU2VydmljZXMudW5sb2NrQWNoaWV2ZW1lbnROb3coe1xuICogICAgIGFjaGlldmVtZW50SWQ6ICdTb21lQWNoaWV2ZW1lbnRJZCdcbiAqIH0pLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0FjaGlldmVtZW50IHVubG9ja2VkJykpO1xuICpcbiAqIC8vIEluY3JlbWVtZW50IGFuIGFjaGlldmVtZW50LlxuICogdGhpcy5nb29nbGVQbGF5R2FtZXNTZXJ2aWNlcy5pbmNyZW1lbnRBY2hpZXZlbWVudCh7XG4gKiAgICAgc3RlcDogMSxcbiAqICAgICBhY2hpZXZlbWVudElkOiAnU29tZUFjaGlldmVtZW50SWQnXG4gKiB9KS50aGVuKCgpID0+IGNvbnNvbGUubG9nKCdBY2hpZXZlbWVudCBpbmNyZW1lbnQgc2VudCcpKTtcbiAqXG4gKiAvLyBJbmNyZW1lbWVudCBhbiBhY2hpZXZlbWVudCBhbmQgd2FpdCBmb3IgcmVzcG9uc2UuXG4gKiB0aGlzLmdvb2dsZVBsYXlHYW1lc1NlcnZpY2VzLmluY3JlbWVudEFjaGlldmVtZW50Tm93KHtcbiAqICAgICBzdGVwOiAxLFxuICogICAgIGFjaGlldmVtZW50SWQ6ICdTb21lQWNoaWV2ZW1lbnRJZCdcbiAqIH0pLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0FjaGlldmVtZW50IGluY3JlbWVudGVkJykpO1xuICpcbiAqIC8vIFNob3cgdGhlIG5hdGl2ZSBhY2hpZXZlbWVudHMgd2luZG93LlxuICogdGhpcy5nb29nbGVQbGF5R2FtZXNTZXJ2aWNlcy5zaG93QWNoaXZlbWVudHMoKVxuICogICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ1RoZSBhY2hpZXZlbWVudHMgd2luZG93IGlzIHZpc2libGUuJykpO1xuICpcbiAqIGBgYFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0dvb2dsZVBsYXlHYW1lc1NlcnZpY2VzJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tcGxheS1nYW1lcy1zZXJ2aWNlcycsXG4gIHBsdWdpblJlZjogJ3BsdWdpbnMucGxheUdhbWVzU2VydmljZXMnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FydGJlcnJpL2NvcmRvdmEtcGx1Z2luLXBsYXktZ2FtZXMtc2VydmljZXMnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxuICBpbnN0YWxsOiAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGNvcmRvdmEtcGx1Z2luLXBsYXktZ2FtZXMtc2VydmljZXMgLS12YXJpYWJsZSBBUFBfSUQ9XCJZT1VSX0FQUF9JRCcsXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdvb2dsZVBsYXlHYW1lc1NlcnZpY2VzIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBJbml0aWFsaXNlIG5hdGl2ZSBQbGF5IEdhbWVzIFNlcnZpY2UgbG9naW4gcHJvY2VkdXJlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcGxheWVyXG4gICAqIGlzIGF1dGhlbnRpY2F0ZWQgd2l0aCBQbGF5IEdhbWVzIFNlcnZpY2VzLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBhdXRoKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ24gb3V0IG9mIEdvb2dsZSBQbGF5IEdhbWVzIFNlcnZpY2VzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZSB3aGVuIHRoZSBwbGF5ZXJcbiAgICogc3VjY2Vzc2Z1bGx5IHNpZ25zIG91dC5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2lnbk91dCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB0aGUgdXNlciBpcyBzaWduZWQgaW4uXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8U2lnbmVkSW5SZXNwb25zZT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aFxuICAgKiB0aGUgc2lnbmVkIGluIHJlc3BvbnNlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpc1NpZ25lZEluKCk6IFByb21pc2U8U2lnbmVkSW5SZXNwb25zZT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjdXJyZW50bHkgYXV0aGVudGljYXRlZCBwbGF5ZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8UGxheWVyPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIFBsYXlcbiAgICogR2FtZXMgU2VydmljZXMgcmV0dXJucyB0aGUgYXV0aGVudGljYXRlZCBwbGF5ZXIuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNob3dQbGF5ZXIoKTogUHJvbWlzZTxQbGF5ZXI+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3VibWl0IGEgc2NvcmUgdG8gYSBsZWFkZXJib2FyZC4gWW91IHNob3VsZCBlbnN1cmUgdGhhdCB5b3UgaGF2ZSBhXG4gICAqIHN1Y2Nlc3NmdWwgcmV0dXJuIGZyb20gYXV0aCgpIGJlZm9yZSBzdWJtaXR0aW5nIGEgc2NvcmUuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIHtTY29yZURhdGF9IFRoZSBzY29yZSBkYXRhIHlvdSB3YW50IHRvIHN1Ym1pdC5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlXG4gICAqIHNjb3JlIGlzIHN1Ym1pdHRlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3VibWl0U2NvcmUoZGF0YTogU2NvcmVEYXRhKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3VibWl0IGEgc2NvcmUgdG8gYSBsZWFkZXJib2FyZCBhbmQgd2FpdHMgZm9yIHRoZSByZXNwb25zZSBmcm9tXG4gICAqIEdvb2dsZSBQbGF5IEdhbWVzLiBZb3Ugc2hvdWxkIGVuc3VyZSB0aGF0IHlvdSBoYXZlIGFcbiAgICogc3VjY2Vzc2Z1bCByZXR1cm4gZnJvbSBhdXRoKCkgYmVmb3JlIHN1Ym1pdHRpbmcgYSBzY29yZS5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEge1Njb3JlRGF0YX0gVGhlIHNjb3JlIGRhdGEgeW91IHdhbnQgdG8gc3VibWl0LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPFN1Ym1pdHRlZFNjb3JlRGF0YT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiBQbGF5XG4gICAqIEdhbWVzIFNlcnZpY2VzIHJldHVybnMgdGhlIHNjb3JlIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzdWJtaXRTY29yZU5vdyhkYXRhOiBTY29yZURhdGEpOiBQcm9taXNlPFN1Ym1pdHRlZFNjb3JlRGF0YT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHBsYXllciBzY29yZSBvbiBhIGxlYWRlcmJvYXJkLiBZb3Ugc2hvdWxkIGVuc3VyZSB0aGF0IHlvdSBoYXZlIGFcbiAgICogc3VjY2Vzc2Z1bCByZXR1cm4gZnJvbSBhdXRoKCkgYmVmb3JlIHJlcXVlc3RpbmcgYSBzY29yZS5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEge0xlYWRlcmJvYXJkRGF0YX0gVGhlIGxlYWRlcmJvYXJkIHNjb3JlIHlvdSB3YW50IHRvIHJlcXVlc3QuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8UGxheWVyU2NvcmVEYXRhPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIFBsYXlcbiAgICogR2FtZXMgU2VydmljZXMgcmV0dXJucyB0aGUgcGxheWVyIHNjb3JlLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRQbGF5ZXJTY29yZShkYXRhOiBMZWFkZXJib2FyZERhdGEpOiBQcm9taXNlPFBsYXllclNjb3JlRGF0YT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2hlcyB0aGUgbmF0aXZlIFBsYXkgR2FtZXMgbGVhZGVyYm9hcmQgdmlldyBjb250cm9sbGVyIHRvIHNob3cgYWxsIHRoZVxuICAgKiBsZWFkZXJib2FyZHMuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBuYXRpdmVcbiAgICogbGVhZGVyYm9hcmRzIHdpbmRvdyBvcGVucy5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2hvd0FsbExlYWRlcmJvYXJkcygpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2hlcyB0aGUgbmF0aXZlIFBsYXkgR2FtZXMgbGVhZGVyYm9hcmQgdmlldyBjb250cm9sbCB0byBzaG93IHRoZVxuICAgKiBzcGVjaWZpZWQgbGVhZGVyYm9hcmQuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIHtMZWFkZXJib2FyZERhdGF9IFRoZSBsZWFkZXJib2FyZCB5b3Ugd2FudCB0byBzaG93LlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgbmF0aXZlXG4gICAqIGxlYWRlcmJvYXJkIHdpbmRvdyBvcGVucy5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2hvd0xlYWRlcmJvYXJkKGRhdGE6IExlYWRlcmJvYXJkRGF0YSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFVubG9jayBhbiBhY2hpZXZlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEge0FjaGlldmVtZW50RGF0YX1cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlXG4gICAqIGFjaGlldmVtZW50IGlzIHNlbnQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVubG9ja0FjaGlldmVtZW50KGRhdGE6IEFjaGlldmVtZW50RGF0YSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFVubG9jayBhbiBhY2hpZXZlbWVudCBhbmQgd2FpdCBmb3IgcmVzcG9uc2UuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIHtBY2hpZXZlbWVudERhdGF9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBQbGF5XG4gICAqIEdhbWVzIFNlcnZpY2VzIHJldHVybnMgdGhhdCB0aGUgYWNoaWV2ZW1lbnQgaXMgdW5sb2NrZWQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVubG9ja0FjaGlldmVtZW50Tm93KGRhdGE6IEFjaGlldmVtZW50RGF0YSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIEluY3JlbWVudCBhbiBhY2hpZXZlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEge0luY3JlbWVudGFibGVBY2hpZXZlbWVudERhdGF9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZVxuICAgKiBhY2hpZXZlbWVudCBpcyBzZW50LlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbmNyZW1lbnRBY2hpZXZlbWVudChkYXRhOiBJbmNyZW1lbnRhYmxlQWNoaWV2ZW1lbnREYXRhKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogSW5jcmVtZW50IGFuIGFjaGlldmVtZW50IGFuZCB3YWl0IGZvciByZXNwb25zZS5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEge0luY3JlbWVudGFibGVBY2hpZXZlbWVudERhdGF9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBQbGF5XG4gICAqIEdhbWVzIFNlcnZpY2VzIHJldHVybnMgdGhhdCB0aGUgYWNoaWV2ZW1lbnQgaGFzIGJlZW4gaW5jcmVtZW50ZWQuXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGluY3JlbWVudEFjaGlldmVtZW50Tm93KGRhdGE6IEluY3JlbWVudGFibGVBY2hpZXZlbWVudERhdGEpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVjaGVzIHRoZSBuYXRpdmUgUGxheSBHYW1lcyBhY2hpZXZlbWVudHMgdmlldyBjb250cm9sbGVyIHRvIHNob3dcbiAgICogYWNoaWV2ZW1lbnRzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGVcbiAgICogYWNoaWV2ZW1lbnQgd2luZG93IG9wZW5zLlxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBzaG93QWNoaWV2ZW1lbnRzKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbn1cbiJdfQ==