var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var AppleWallet = /** @class */ (function (_super) {
    __extends(AppleWallet, _super);
    function AppleWallet() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AppleWallet.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    AppleWallet.prototype.checkCardEligibility = function (primaryAccountIdentifier) { return cordova(this, "checkCardEligibility", {}, arguments); };
    AppleWallet.prototype.checkCardEligibilityBySuffix = function (cardSuffix) { return cordova(this, "checkCardEligibilityBySuffix", {}, arguments); };
    AppleWallet.prototype.checkPairedDevices = function () { return cordova(this, "checkPairedDevices", {}, arguments); };
    AppleWallet.prototype.checkPairedDevicesBySuffix = function (cardSuffix) { return cordova(this, "checkPairedDevicesBySuffix", {}, arguments); };
    AppleWallet.prototype.startAddPaymentPass = function (data) { return cordova(this, "startAddPaymentPass", {}, arguments); };
    AppleWallet.prototype.completeAddPaymentPass = function (data) { return cordova(this, "completeAddPaymentPass", {}, arguments); };
    AppleWallet.pluginName = "AppleWallet";
    AppleWallet.plugin = "cordova-apple-wallet";
    AppleWallet.pluginRef = "AppleWallet";
    AppleWallet.repo = "https://github.com/tomavic/cordova-apple-wallet";
    AppleWallet.platforms = ["iOS"];
    AppleWallet = __decorate([
        Injectable()
    ], AppleWallet);
    return AppleWallet;
}(IonicNativePlugin));
export { AppleWallet };
//# sourceMappingURL=data:application/json;base64,