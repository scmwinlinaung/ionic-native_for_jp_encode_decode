var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var VideoCapturePlusOriginal = /** @class */ (function (_super) {
    __extends(VideoCapturePlusOriginal, _super);
    function VideoCapturePlusOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VideoCapturePlusOriginal.prototype.captureVideo = function (options) { return cordova(this, "captureVideo", { "callbackOrder": "reverse" }, arguments); };
    VideoCapturePlusOriginal.pluginName = "VideoCapturePlus";
    VideoCapturePlusOriginal.plugin = "cordova-plugin-video-capture-plus";
    VideoCapturePlusOriginal.pluginRef = "window.plugins.videocaptureplus";
    VideoCapturePlusOriginal.repo = "https://github.com/danielsogl/cordova-plugin-video-capture-plus";
    VideoCapturePlusOriginal.platforms = ["Android", "iOS"];
    return VideoCapturePlusOriginal;
}(IonicNativePlugin));
var VideoCapturePlus = new VideoCapturePlusOriginal();
export { VideoCapturePlus };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3ZpZGVvLWNhcHR1cmUtcGx1cy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUEySWxDLG9DQUFpQjs7OztJQVNyRCx1Q0FBWSxhQUFDLE9BQWlDOzs7Ozs7MkJBckpoRDtFQTRJc0MsaUJBQWlCO1NBQTFDLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lZGlhRmlsZSB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZmlsZSwgd2l0aG91dCBwYXRoIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGZ1bGwgcGF0aCBvZiB0aGUgZmlsZSwgaW5jbHVkaW5nIHRoZSBuYW1lLlxuICAgKi9cbiAgZnVsbFBhdGg6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBmaWxlJ3MgbWltZSB0eXBlXG4gICAqL1xuICB0eXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRlIGFuZCB0aW1lIHdoZW4gdGhlIGZpbGUgd2FzIGxhc3QgbW9kaWZpZWQuXG4gICAqL1xuICBsYXN0TW9kaWZpZWREYXRlOiBEYXRlO1xuXG4gIC8qKlxuICAgKiBUaGUgc2l6ZSBvZiB0aGUgZmlsZSwgaW4gYnl0ZXMuXG4gICAqL1xuICBzaXplOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgZm9ybWF0IGluZm9ybWF0aW9uIG9mIHRoZSBtZWRpYSBmaWxlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdWNjZXNzQ2FsbGJhY2tcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2Vycm9yQ2FsbGJhY2tdXG4gICAqL1xuICBnZXRGb3JtYXREYXRhKFxuICAgIHN1Y2Nlc3NDYWxsYmFjazogKGRhdGE6IE1lZGlhRmlsZURhdGEpID0+IGFueSxcbiAgICBlcnJvckNhbGxiYWNrPzogKGVycjogYW55KSA9PiBhbnlcbiAgKTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1lZGlhRmlsZURhdGEge1xuICAvKipcbiAgICogVGhlIGFjdHVhbCBmb3JtYXQgb2YgdGhlIGF1ZGlvIGFuZCB2aWRlbyBjb250ZW50LlxuICAgKi9cbiAgY29kZWNzOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgYXZlcmFnZSBiaXRyYXRlIG9mIHRoZSBjb250ZW50LiBUaGUgdmFsdWUgaXMgemVybyBmb3IgaW1hZ2VzLlxuICAgKi9cbiAgYml0cmF0ZTogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIGhlaWdodCBvZiB0aGUgaW1hZ2Ugb3IgdmlkZW8gaW4gcGl4ZWxzLiBUaGUgdmFsdWUgaXMgemVybyBmb3IgYXVkaW8gY2xpcHMuXG4gICAqL1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgaW1hZ2Ugb3IgdmlkZW8gaW4gcGl4ZWxzLiBUaGUgdmFsdWUgaXMgemVybyBmb3IgYXVkaW8gY2xpcHMuXG4gICAqL1xuICB3aWR0aDogbnVtYmVyO1xuICAvKipcbiAgICogVGhlIGxlbmd0aCBvZiB0aGUgdmlkZW8gb3Igc291bmQgY2xpcCBpbiBzZWNvbmRzLiBUaGUgdmFsdWUgaXMgemVybyBmb3IgaW1hZ2VzLlxuICAgKi9cbiAgZHVyYXRpb246IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBWaWRlb0NhcHR1cmVQbHVzT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHZpZGVvcyB0byByZWNvcmQsIGRlZmF1bHQgMSAob24gaU9TIGFsd2F5cyAxKVxuICAgKi9cbiAgbGltaXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE1heCBkdXJhdGlvbiBpbiBzZWNvbmRzLCBkZWZhdWx0IDAsIHdoaWNoIGlzICdmb3JldmVyJ1xuICAgKi9cbiAgZHVyYXRpb24/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGxvdyBxdWFsaXR5IHNldHRpbmdcbiAgICovXG4gIGhpZ2hxdWFsaXR5PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgYmFja2ZhY2luZyBjYW1lcmEgc2V0dGluZy5cbiAgICogWW91J2xsIHdhbnQgdG8gc25pZmYgdGhlIHVzZXJhZ2VudC9kZXZpY2UgYW5kIHBhc3MgdGhlIGJlc3Qgb3ZlcmxheSBiYXNlZCBvbiB0aGF0Li4gYXNzdW1pbmcgaXBob25lIGhlcmVcbiAgICovXG4gIGZyb250Y2FtZXJhPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogcHV0IHRoZSBwbmcgb3ZlcmxheSBpbiB5b3VyIGFzc2V0cyBmb2xkZXJcbiAgICovXG4gIHBvcnRyYWl0T3ZlcmxheT86IHN0cmluZztcblxuICAvKipcbiAgICogIG5vdCBwYXNzaW5nIGFuIG92ZXJsYXkgbWVhbnMgbm8gaW1hZ2UgaXMgc2hvd24gZm9yIHRoZSBsYW5kc2NhcGUgb3JpZW50YXRpb25cbiAgICovXG4gIGxhbmRzY2FwZU92ZXJsYXk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGlPUyBvbmx5XG4gICAqL1xuICBvdmVybGF5VGV4dD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAYmV0YVxuICogQG5hbWUgVmlkZW8gQ2FwdHVyZSBQbHVzXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIG9mZmVycyBzb21lIHVzZWZ1bCBleHRyYXMgb24gdG9wIG9mIHRoZSBkZWZhdWx0IE1lZGlhIENhcHR1cmUgUGx1Z2luIGNhcGFiaWxpdGllczpcbiAqIC0gSEQgcmVjb3JkaW5nLlxuICogLSBTdGFydGluZyB3aXRoIHRoZSBmcm9udCBjYW1lcmEuXG4gKiAtIEEgY3VzdG9tIG92ZXJsYXkgKGN1cnJlbnRseSBpT1Mgb25seSkuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBWaWRlb0NhcHR1cmVQbHVzLCBWaWRlb0NhcHR1cmVQbHVzT3B0aW9ucywgTWVkaWFGaWxlIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS92aWRlby1jYXB0dXJlLXBsdXMvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSB2aWRlb0NhcHR1cmVQbHVzOiBWaWRlb0NhcHR1cmVQbHVzKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiBjb25zdCBvcHRpb25zOiBWaWRlb0NhcHR1cmVQbHVzT3B0aW9ucyA9IHtcbiAqICAgIGxpbWl0OiAxLFxuICogICAgaGlnaHF1YWxpdHk6IHRydWUsXG4gKiAgICBwb3J0cmFpdE92ZXJsYXk6ICdhc3NldHMvaW1nL2NhbWVyYS9vdmVybGF5L3BvcnRyYWl0LnBuZycsXG4gKiAgICBsYW5kc2NhcGVPdmVybGF5OiAnYXNzZXRzL2ltZy9jYW1lcmEvb3ZlcmxheS9sYW5kc2NhcGUucG5nJ1xuICogfVxuICpcbiAqIHRoaXMudmlkZW9DYXB0dXJlUGx1cy5jYXB0dXJlVmlkZW8ob3B0aW9ucykudGhlbihtZWRpYWZpbGU6IE1lZGlhRmlsZVtdID0+IGNvbnNvbGUubG9nKG1lZGlhZmlsZSksIGVycm9yID0+IGNvbnNvbGUubG9nKCdTb21ldGhpbmcgd2VudCB3cm9uZycpKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBNZWRpYUZpbGVcbiAqIE1lZGlhRmlsZURhdGFcbiAqIFZpZGVvQ2FwdHVyZVBsdXNPcHRpb25zXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnVmlkZW9DYXB0dXJlUGx1cycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXZpZGVvLWNhcHR1cmUtcGx1cycsXG4gIHBsdWdpblJlZjogJ3dpbmRvdy5wbHVnaW5zLnZpZGVvY2FwdHVyZXBsdXMnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2RhbmllbHNvZ2wvY29yZG92YS1wbHVnaW4tdmlkZW8tY2FwdHVyZS1wbHVzJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVmlkZW9DYXB0dXJlUGx1cyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIFN0YXJ0cyByZWNvcmRpbmdzXG4gICAqIEBwYXJhbSBbb3B0aW9uc10ge1ZpZGVvQ2FwdHVyZVBsdXNPcHRpb25zfSBDb25maWd1cmUgb3B0aW9uc1xuICAgKiBAcmV0dXJuIHtQcm9taXNlPE1lZGlhRmlsZVtdPn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZSdcbiAgfSlcbiAgY2FwdHVyZVZpZGVvKG9wdGlvbnM/OiBWaWRlb0NhcHR1cmVQbHVzT3B0aW9ucyk6IFByb21pc2U8TWVkaWFGaWxlW10+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==