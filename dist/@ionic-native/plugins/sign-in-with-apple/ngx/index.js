var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var SignInWithApple = /** @class */ (function (_super) {
    __extends(SignInWithApple, _super);
    function SignInWithApple() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SignInWithApple.prototype.signin = function (arg0) {
        if (arg0 === void 0) { arg0 = null; }
        return cordova(this, "signin", {}, arguments);
    };
    SignInWithApple.pluginName = "Sign in with Apple";
    SignInWithApple.plugin = "cordova-plugin-sign-in-with-apple";
    SignInWithApple.pluginRef = "cordova.plugins.SignInWithApple";
    SignInWithApple.repo = "https://github.com/twogate/cordova-plugin-sign-in-with-apple";
    SignInWithApple.platforms = ["iOS"];
    SignInWithApple = __decorate([
        Injectable()
    ], SignInWithApple);
    return SignInWithApple;
}(IonicNativePlugin));
export { SignInWithApple };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NpZ24taW4td2l0aC1hcHBsZS9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUFrSm5DLG1DQUFpQjs7OztJQVVwRCxnQ0FBTSxhQUFDLElBQW1CO1FBQW5CLHFCQUFBLEVBQUEsV0FBbUI7Ozs7Ozs7O0lBVmYsZUFBZTtRQUQzQixVQUFVLEVBQUU7T0FDQSxlQUFlOzBCQW5KNUI7RUFtSnFDLGlCQUFpQjtTQUF6QyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbi8qKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9mb3VuZGF0aW9uL25zcGVyc29ubmFtZWNvbXBvbmVudHMvMTQxMjE5My1waG9uZXRpY3JlcHJlc2VudGF0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTlNQZXJzb25OYW1lQ29tcG9uZW50cyB7XG4gIC8qKlxuICAgKiBUaGUgcG9ydGlvbiBvZiBhIG5hbWXigJlzIGZ1bGwgZm9ybSBvZiBhZGRyZXNzIHRoYXQgcHJlY2VkZXMgdGhlIG5hbWUgaXRzZWxmIChmb3IgZXhhbXBsZSwgXCJEci4sXCIgXCJNci4sXCIgXCJNcy5cIilcbiAgICovXG4gIG5hbWVQcmVmaXg/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE5hbWUgYmVzdG93ZWQgdXBvbiBhbiBpbmRpdmlkdWFsIHRvIGRpZmZlcmVudGlhdGUgdGhlbSBmcm9tIG90aGVyIG1lbWJlcnMgb2YgYSBncm91cCB0aGF0IHNoYXJlIGEgZmFtaWx5IG5hbWUgKGZvciBleGFtcGxlLCBcIkpvaG5hdGhhblwiKVxuICAgKi9cbiAgZ2l2ZW5OYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZWNvbmRhcnkgbmFtZSBiZXN0b3dlZCB1cG9uIGFuIGluZGl2aWR1YWwgdG8gZGlmZmVyZW50aWF0ZSB0aGVtIGZyb20gb3RoZXJzIHRoYXQgaGF2ZSB0aGUgc2FtZSBnaXZlbiBuYW1lIChmb3IgZXhhbXBsZSwgXCJNYXBsZVwiKVxuICAgKi9cbiAgbWlkZGxlTmFtZT86IHN0cmluZztcblxuICAvKipcbiAgICogTmFtZSBiZXN0b3dlZCB1cG9uIGFuIGluZGl2aWR1YWwgdG8gZGVub3RlIG1lbWJlcnNoaXAgaW4gYSBncm91cCBvciBmYW1pbHkuIChmb3IgZXhhbXBsZSwgXCJBcHBsZXNlZWRcIilcbiAgICovXG4gIGZhbWlseU5hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwb3J0aW9uIG9mIGEgbmFtZeKAmXMgZnVsbCBmb3JtIG9mIGFkZHJlc3MgdGhhdCBmb2xsb3dzIHRoZSBuYW1lIGl0c2VsZiAoZm9yIGV4YW1wbGUsIFwiRXNxLixcIiBcIkpyLixcIiBcIlBoLkQuXCIpXG4gICAqL1xuICBuYW1lU3VmZml4Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBOYW1lIHN1YnN0aXR1dGVkIGZvciB0aGUgcHVycG9zZXMgb2YgZmFtaWxpYXJpdHkgKGZvciBleGFtcGxlLCBcIkpvaG5ueVwiKVxuICAgKi9cbiAgbmlja25hbWU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBwaG9uZXRpYyByZXByZXNlbnRhdGlvbiBuYW1lIGNvbXBvbmVudHMgb2YgdGhlIHJlY2VpdmVyXG4gICAqL1xuICBwaG9uZXRpY1JlcHJlc2VudGF0aW9uPzogTlNQZXJzb25OYW1lQ29tcG9uZW50cztcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL2F1dGhlbnRpY2F0aW9uc2VydmljZXMvYXNhdXRob3JpemF0aW9uYXBwbGVpZGNyZWRlbnRpYWxcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcHBsZVNpZ25JblJlc3BvbnNlIHtcbiAgLyoqXG4gICAqIFRoZSB1c2Vy4oCZcyBlbWFpbCBhZGRyZXNzIGkuZS4gYWJjQHByaXZhdGVyZWxheS5hcHBsZWlkLmNvbVxuICAgKi9cbiAgZW1haWw/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEFuIGFyYml0cmFyeSBzdHJpbmcgdGhhdCB5b3VyIGFwcCBwcm92aWRlZCB0byB0aGUgcmVxdWVzdCB0aGF0IGdlbmVyYXRlZCB0aGUgY3JlZGVudGlhbFxuICAgKi9cbiAgc3RhdGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgSlNPTiBXZWIgVG9rZW4gKEpXVCkgdGhhdCBzZWN1cmVseSBjb21tdW5pY2F0ZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIgdG8geW91ciBhcHBcbiAgICovXG4gIGlkZW50aXR5VG9rZW46IHN0cmluZztcblxuICAvKipcbiAgICogQSBzaG9ydC1saXZlZCB0b2tlbiB1c2VkIGJ5IHlvdXIgYXBwIGZvciBwcm9vZiBvZiBhdXRob3JpemF0aW9uIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgYXBwJ3Mgc2VydmVyIGNvdW50ZXJwYXJ0XG4gICAqL1xuICBhdXRob3JpemF0aW9uQ29kZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgdXNlcidzIG5hbWVcbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9mb3VuZGF0aW9uL25zcGVyc29ubmFtZWNvbXBvbmVudHM/bGFuZ3VhZ2U9b2JqY1xuICAgKi9cbiAgZnVsbE5hbWU/OiBOU1BlcnNvbk5hbWVDb21wb25lbnRzO1xuXG4gIC8qKlxuICAgKiBBbiBpZGVudGlmaWVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgYXV0aGVudGljYXRlZCB1c2VyXG4gICAqL1xuICB1c2VyPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vZm91bmRhdGlvbi9uc2Vycm9yXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTlNFcnJvciB7XG4gIC8qKlxuICAgKiBUaGUgZXJyb3IgY29kZVxuICAgKi9cbiAgY29kZT86IG51bWJlcjtcblxuICAvKipcbiAgICogQSBzdHJpbmcgY29udGFpbmluZyB0aGUgbG9jYWxpemVkIGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvclxuICAgKi9cbiAgbG9jYWxpemVkRGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIGxvY2FsaXplZCBleHBsYW5hdGlvbiBvZiB0aGUgcmVhc29uIGZvciB0aGUgZXJyb3JcbiAgICovXG4gIGxvY2FsaXplZEZhaWx1cmVSZWFzb24/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGVTaWduSW5FcnJvclJlc3BvbnNlIGV4dGVuZHMgTlNFcnJvciB7XG4gIC8qKlxuICAgKiBUaGUgZXJyb3IgaS5lLiBcIkFTQVVUSE9SSVpBVElPTl9FUlJPUlwiXG4gICAqL1xuICBlcnJvcj86IHN0cmluZztcbn1cblxuLyoqXG4gKiBAbmFtZSBTaWduIEluIFdpdGggQXBwbGVcbiAqIEBkZXNjcmlwdGlvblxuICogU2lnbiBpbiB3aXRoIEFwcGxlIG1ha2VzIGl0IGVhc3kgZm9yIHVzZXJzIHRvIHNpZ24gaW4gdG8geW91ciBhcHBzIGFuZCB3ZWJzaXRlcyB1c2luZyB0aGVpciBBcHBsZSBJRC5cbiAqIEluc3RlYWQgb2YgZmlsbGluZyBvdXQgZm9ybXMsIHZlcmlmeWluZyBlbWFpbCBhZGRyZXNzZXMsIGFuZCBjaG9vc2luZyBuZXcgcGFzc3dvcmRzLFxuICogdGhleSBjYW4gdXNlIFNpZ24gaW4gd2l0aCBBcHBsZSB0byBzZXQgdXAgYW4gYWNjb3VudCBhbmQgc3RhcnQgdXNpbmcgeW91ciBhcHAgcmlnaHQgYXdheS5cbiAqIEFsbCBhY2NvdW50cyBhcmUgcHJvdGVjdGVkIHdpdGggdHdvLWZhY3RvciBhdXRoZW50aWNhdGlvbiBmb3Igc3VwZXJpb3Igc2VjdXJpdHksXG4gKiBhbmQgQXBwbGUgd2lsbCBub3QgdHJhY2sgdXNlcnPigJkgYWN0aXZpdHkgaW4geW91ciBhcHAgb3Igd2Vic2l0ZS5cbiAqICpTb3VyY2U6KiBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vc2lnbi1pbi13aXRoLWFwcGxlL1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU2lnbkluV2l0aEFwcGxlLCBBcHBsZVNpZ25JblJlc3BvbnNlLCBBcHBsZVNpZ25JbkVycm9yUmVzcG9uc2UgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3NpZ24taW4td2l0aC1hcHBsZS9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNpZ25JbldpdGhBcHBsZTogU2lnbkluV2l0aEFwcGxlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKlxuICogdGhpcy5zaWduSW5XaXRoQXBwbGUuc2lnbmluKClcbiAqICAgLnRoZW4oKHJlczogQXBwbGVTaWduSW5SZXNwb25zZSkgPT4ge1xuICogICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL3NpZ25pbndpdGhhcHBsZXJlc3RhcGkvdmVyaWZ5aW5nX2FfdXNlclxuICogICAgIGFsZXJ0KCdTZW5kIHRva2VuIHRvIGFwcGxlIGZvciB2ZXJpZmljYXRpb246ICcgKyByZXMuaWRlbnRpdHlUb2tlbik7XG4gKiAgICAgY29uc29sZS5sb2cocmVzKTtcbiAqICAgfSlcbiAqICAgLmNhdGNoKChlcnJvcjogQXBwbGVTaWduSW5FcnJvclJlc3BvbnNlKSA9PiB7XG4gKiAgICAgYWxlcnQoZXJyb3IuY29kZSArICcgJyArIGVycm9yLmxvY2FsaXplZERlc2NyaXB0aW9uKTtcbiAqICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAqICAgfSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnU2lnbiBpbiB3aXRoIEFwcGxlJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc2lnbi1pbi13aXRoLWFwcGxlJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLlNpZ25JbldpdGhBcHBsZScsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vdHdvZ2F0ZS9jb3Jkb3ZhLXBsdWdpbi1zaWduLWluLXdpdGgtYXBwbGUnLFxuICBwbGF0Zm9ybXM6IFsnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2lnbkluV2l0aEFwcGxlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuXG4gIC8qKlxuICAgKiBTdGFydHMgdGhlIGF1dGhvcml6YXRpb24gZmxvd3MgbmFtZWQgZHVyaW5nIGNvbnRyb2xsZXIgaW5pdGlhbGl6YXRpb25cbiAgICogQHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi9hdXRoZW50aWNhdGlvbnNlcnZpY2VzL2FzYXV0aG9yaXphdGlvbmNvbnRyb2xsZXIvMzE1MzA0Ny1wZXJmb3JtcmVxdWVzdHNcbiAgICogQHJldHVybiB7UHJvbWlzZTxBcHBsZVNpZ25JblJlc3BvbnNlPn0gUmV0dXJucyBhIHByb21pc2Ugd2hlbiBhdXRob3JpemF0aW9uIHN1Y2NlZWRzXG4gICAqIEBwYXJhbSBhcmcwXG4gICAqIEB0aHJvd3MgQXBwbGVTaWduSW5FcnJvclJlc3BvbnNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNpZ25pbihhcmcwOiBvYmplY3QgPSBudWxsKTogUHJvbWlzZTxBcHBsZVNpZ25JblJlc3BvbnNlPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbn1cbiJdfQ==