var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var CouchbaseLite = /** @class */ (function (_super) {
    __extends(CouchbaseLite, _super);
    function CouchbaseLite() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CouchbaseLite.prototype.getURL = function () { return cordova(this, "getURL", { "callbackStyle": "node" }, arguments); };
    CouchbaseLite.pluginName = "CouchbaseLite";
    CouchbaseLite.plugin = "couchbase-lite-phonegap-plugin";
    CouchbaseLite.pluginRef = "cblite";
    CouchbaseLite.repo = "https://github.com/couchbaselabs/Couchbase-Lite-PhoneGap-Plugin";
    CouchbaseLite.platforms = ["Android", "iOS"];
    CouchbaseLite = __decorate([
        Injectable()
    ], CouchbaseLite);
    return CouchbaseLite;
}(IonicNativePlugin));
export { CouchbaseLite };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2NvdWNoYmFzZS1saXRlL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQXdIckMsaUNBQWlCOzs7O0lBUWxELDhCQUFNOzs7Ozs7SUFSSyxhQUFhO1FBRHpCLFVBQVUsRUFBRTtPQUNBLGFBQWE7d0JBekgxQjtFQXlIbUMsaUJBQWlCO1NBQXZDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcblxuLyoqXG4gKiBAbmFtZSBDb3VjaGJhc2UgTGl0ZVxuICogQGRlc2NyaXB0aW9uXG4gKiBQbHVnaW4gdG8gaW5zdGFsbCBDb3VjaGJhc2UgTGl0ZSBpbiB5b3VyIFBob25lR2FwIGFwcCBvbiBpT1Mgb3IgQW5kcm9pZCA8ZG9jcy1jYXJkIGhyZWY9XCJodHRwczovL2lvbmljZnJhbWV3b3JrLmNvbS9pbnRlZ3JhdGlvbnMvY291Y2hiYXNlLWxpdGVcIiBpb25pY29uPVwiYWxlcnRcIj5UaGlzIFBsdWdpbiBpcyBubyBsb25nZXIgc3VwcG9ydGVkIGJ5IENvdWNoYmFzZS4gUGxlYXNlIHNlZSBvdXIgQ291Y2hiYXNlIExpdGUgSW50ZWdyYXRpb248L2RvY3MtY2FyZD5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IENvdWNoYmFzZUxpdGUgfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvdWNoYmFzZS1saXRlL25neCc7XG4gKiBpbXBvcnQgeyBIdHRwIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG4gKiBpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcydcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgY291Y2hiYXNlOiBDb3VjaGJhc2VMaXRlLCBwcml2YXRlIHBsYXRmb3JtOlBsYXRmb3JtLHByaXZhdGUgX2h0dHA6SHR0cCkge1xuICogICAgdGhpcy5pbml0TWV0aG9kKCk7XG4gKiB9XG4gKiB1cmw6c3RyaW5nO1xuICogaW5pdE1ldGhvZCgpIHtcbiAqICAgIHRoaXMuY291Y2hiYXNlLmdldFVSTCgpLnRoZW4oKHVybCk9PiB7XG4gKiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gKiAgICB9KVxuICogfVxuICogZ2V0VXJsKCkge1xuICogICAgICByZXR1cm4gdGhpcy51cmw7XG4gKiB9XG4gKiAvLyBEQVRBQkFTRVMgLy9cbiAqIGNyZWF0ZURhdGFiYXNlKGRhdGFiYXNlX25hbWU6c3RyaW5nKSB7XG4gKiAgICAgIGxldCB1cmwgPSB0aGlzLmdldFVybCgpO1xuICogICAgICB1cmwgPSB1cmwrZGF0YWJhc2VfbmFtZTtcbiAqICAgICAgcmV0dXJuIHRoaXMuX2h0dHBcbiAqICAgICAgICAucHV0KHVybClcbiAqICAgICAgICAubWFwKGRhdGEgPT4geyB0aGlzLnJlc3VsdHMgPSBkYXRhWydyZXN1bHRzJ10gfSlcbiAqICAgICAgICAuY2F0Y2goKGVycm9yOmFueSkgPT4ge1xuICogICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yLmpzb24oKSB8fCAnQ291Y2hiYXNlIExpdGUgZXJyb3InKTtcbiAqICAgICAgICAgfSlcbiAqICB9XG4gKiBkZWxldGVEYXRhYmFzZShkYXRhYmFzZV9uYW1lOnN0cmluZykge1xuICogICAgICBsZXQgdXJsID0gdGhpcy5nZXRVcmwoKTtcbiAqICAgICAgdXJsID0gdXJsK2RhdGFiYXNlX25hbWU7XG4gKiAgICAgIHJldHVybiB0aGlzLl9odHRwXG4gKiAgICAgICAgLmRlbGV0ZSh1cmwpXG4gKiAgICAgICAgLm1hcChkYXRhID0+IHsgdGhpcy5yZXN1bHRzID0gZGF0YVsncmVzdWx0cyddIH0pXG4gKiAgICAgICAgLmNhdGNoKChlcnJvcjphbnkpID0+IHtcbiAqICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvci5qc29uKCkgfHwgJ0NvdWNoYmFzZSBMaXRlIGVycm9yJyk7XG4gKiAgICAgICAgfSlcbiAqIH1cbiAqIGdldEFsbERicygpIHtcbiAqICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0VXJsKCk7XG4gKiAgICAgIHVybCA9IHVybCsnX2FsbF9kYnMnO1xuICogICAgICByZXR1cm4gdGhpcy5faHR0cFxuICogICAgICAgIC5nZXQodXJsKVxuICogICAgICAgIC5tYXAoZGF0YSA9PiB7IHRoaXMucmVzdWx0cyA9IGRhdGFbJ3Jlc3VsdHMnXSB9KVxuICogICAgICAgIC5jYXRjaCgoZXJyb3I6YW55KSA9PiB7XG4gKiAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IuanNvbigpIHx8ICdDb3VjaGJhc2UgTGl0ZSBlcnJvcicpO1xuICogICAgICAgIH0pXG4gKiB9XG4gKiAvLyBET0NVTUVOVFMgLy9cbiAqIGdldEFsbERvY3VtZW50cyhkYXRhYmFzZV9uYW1lOnN0cmluZyl7XG4gKiAgICAgIGxldCB1cmwgPSB0aGlzLmdldFVybCgpO1xuICogICAgICAvLyBpbmNsdWRlX2RvY3M9dHJ1ZSB3aWxsIGluY2x1ZGUgYSBkb2MgaW5zaWRlIHJlc3BvbnNlLCBpdCBpcyBmYWxzZSBieSBkZWZhdWx0XG4gKiAgICAgIHVybCA9IHVybCArIGRhdGFiYXNlX25hbWUgKyAnL19hbGxfZG9jcz9pbmNsdWRlX2RvY3M9dHJ1ZSc7XG4gKiAgICAgIHJldHVybiB0aGlzLl9odHRwXG4gKiAgICAgICAgLmdldCh1cmwpXG4gKiAgICAgICAgLm1hcChkYXRhID0+IHsgdGhpcy5yZXN1bHRzID0gZGF0YVsncmVzdWx0cyddIH0pXG4gKiAgICAgICAgLmNhdGNoKChlcnJvcjphbnkpID0+IHtcbiAqICAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvci5qc29uKCkgfHwgJ0NvdWNoYmFzZSBMaXRlIGVycm9yJyk7XG4gKiAgICAgICAgfSkgICAgICAgIC5cbiAqIH1cbiAqIGNyZWF0ZURvY3VtZW50KGRhdGFiYXNlX25hbWU6c3RyaW5nLGRvY3VtZW50KXtcbiAqICAgICAgbGV0IHVybCA9IHRoaXMuZ2V0VXJsKCk7XG4gKiAgICAgIHVybCA9IHVybCArIGRhdGFiYXNlX25hbWU7XG4gKiAgICAgIHJldHVybiB0aGlzLl9odHRwXG4gKiAgICAgICAgLnBvc3QodXJsLGRvY3VtZW50KVxuICogICAgICAgIC5tYXAoZGF0YSA9PiB7IHRoaXMucmVzdWx0cyA9IGRhdGFbJ3Jlc3VsdHMnXSB9KVxuICogICAgICAgIC5jYXRjaCgoZXJyb3I6YW55KSA9PiB7XG4gKiAgICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IuanNvbigpIHx8ICdDb3VjaGJhc2UgTGl0ZSBlcnJvcicpO1xuICogICAgICAgIH0pICAgICAgICAuXG4gKiB9XG4gKiBsZXQgZG9jdW1lbnQgPSB7XG4gKiAgICBfaWQ6J1lvdSBjYW4gZWl0aGVyIHNwZWNpZnkgdGhlIGRvY3VtZW50IElEIChtdXN0IGJlIHN0cmluZykgZWxzZSBjb3VjaGJhc2UgZ2VuZXJhdGVzIG9uZSBmb3IgeW91ciBkb2MnLFxuICogICAgZGF0YTp7bmFtZTonc2FuZG1hbicsYWdlOjI1LGNpdHk6cHVuZX1cbiAqICB9XG4gKiBjcmVhdGVEb2N1bWVudCgnanVzdGJlJywgZG9jdW1lbnQpO1xuICogLy8gc3VjY2Vzc2Z1bCByZXNwb25zZVxuICogeyBcImlkXCI6IFwic3RyaW5nXCIsXCJyZXZcIjogXCJzdHJpbmdcIixcIm9rXCI6IHRydWUgfVxuICogdXBkYXRlRG9jdW1lbnQoZGF0YWJhc2VfbmFtZTpzdHJpbmcsZG9jdW1lbnQpe1xuICogICAgICBsZXQgdXJsID0gdGhpcy5nZXRVcmwoKTtcbiAqICAgICAgdXJsID0gdXJsICsgZGF0YWJhc2VfbmFtZSArICcvJyArIGRvY3VtZW50Ll9pZDtcbiAqICAgICAgcmV0dXJuIHRoaXMuX2h0dHBcbiAqICAgICAgICAucHV0KHVybCxkb2N1bWVudClcbiAqICAgICAgICAubWFwKGRhdGEgPT4geyB0aGlzLnJlc3VsdHMgPSBkYXRhWydyZXN1bHRzJ10gfSlcbiAqICAgICAgICAuY2F0Y2goKGVycm9yOmFueSkgPT4ge1xuICogICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yLmpzb24oKSB8fCAnQ291Y2hiYXNlIExpdGUgZXJyb3InKTtcbiAqICAgICAgICB9KSAgICAgICAgLlxuICogfVxuICogLy8gZm9yIHVwZGF0aW9uIG9mIGRvY3VtZW50IHlvdXIgZG9jdW1lbnQgbXVzdCBjb250YWluIG1vc3QgcmVjZW50IHJldihyZXZpc2lvbikgaWQuXG4gKiAvLyBmb3IgZWFjaCB1cGRhdGlvbiBvZiBkb2N1bWVudCBuZXcgcmV2IGlkIGlzIGdldCBnZW5lcmF0ZWRcbiAqIC8vIHN1Y2Nlc3NmdWwgcmVzcG9uc2VcbiAqIHsgXCJpZFwiOiBcInN0cmluZ1wiLFwicmV2XCI6IFwic3RyaW5nKG5ldyByZXZpc2lvbiBpZClcIixcIm9rXCI6IHRydWUgfVxuICogZGVsZXRlRG9jdW1lbnQoZGF0YWJhc2VfbmFtZTpzdHJpbmcsZG9jdW1lbnQpe1xuICogICAgICBsZXQgdXJsID0gdGhpcy5nZXRVcmwoKTtcbiAqICAgICAgdXJsID0gdXJsICsgZGF0YWJhc2VfbmFtZSArICcvJyArIGRvY3VtZW50Ll9pZCArJz9yZXY9Jytkb2MuX3JldjtcbiAqICAgICAgcmV0dXJuIHRoaXMuX2h0dHBcbiAqICAgICAgICAuZGVsZXRlKHVybClcbiAqICAgICAgICAubWFwKGRhdGEgPT4geyB0aGlzLnJlc3VsdHMgPSBkYXRhWydyZXN1bHRzJ10gfSlcbiAqICAgICAgICAuY2F0Y2goKGVycm9yOmFueSkgPT4ge1xuICogICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yLmpzb24oKSB8fCAnQ291Y2hiYXNlIExpdGUgZXJyb3InKTtcbiAqICAgICAgICB9KSAgICAgICAgLlxuICogfVxuICpcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdDb3VjaGJhc2VMaXRlJyxcbiAgcGx1Z2luOiAnY291Y2hiYXNlLWxpdGUtcGhvbmVnYXAtcGx1Z2luJyxcbiAgcGx1Z2luUmVmOiAnY2JsaXRlJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jb3VjaGJhc2VsYWJzL0NvdWNoYmFzZS1MaXRlLVBob25lR2FwLVBsdWdpbicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvdWNoYmFzZUxpdGUgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBHZXQgdGhlIGRhdGFiYXNlIHVybFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgbG9jYWwgZGF0YWJhc2UgdXJsXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgY2FsbGJhY2tTdHlsZTogJ25vZGUnXG4gIH0pXG4gIGdldFVSTCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19