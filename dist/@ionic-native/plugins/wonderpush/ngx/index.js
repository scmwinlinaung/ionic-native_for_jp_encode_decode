var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, getPromise } from '@ionic-native/core';
var NestedObject = /** @class */ (function () {
    function NestedObject(pluginObj) {
        this.pluginObj = pluginObj;
    }
    NestedObject.prototype.wrap = function (functionName, args) {
        var plugin = WonderPush.getPlugin();
        var userPreferences = plugin ? plugin.UserPreferences : null;
        if (!plugin || !userPreferences || !userPreferences[functionName]) {
            return getPromise(function (res, rej) {
                rej(new Error('Could not find plugin'));
            });
        }
        return getPromise(function (res, rej) {
            userPreferences[functionName].apply(userPreferences, args.concat([res]));
        });
    };
    return NestedObject;
}());
export { NestedObject };
var UserPreferencesMethods = /** @class */ (function (_super) {
    __extends(UserPreferencesMethods, _super);
    function UserPreferencesMethods() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Get the default channel id
     * @returns {Promise<string>}
     */
    UserPreferencesMethods.prototype.getDefaultChannelId = function () {
        return this.wrap('getDefaultChannelId', []);
    };
    /**
     * Set the default channel id
     * @param {string} id
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setDefaultChannelId = function (id) {
        return this.wrap('setDefaultChannelId', [id]);
    };
    /**
     * Get a channel group
     * @param {string} groupId
     * @returns {Promise<WonderPushChannelGroup | null>}
     */
    UserPreferencesMethods.prototype.getChannelGroup = function (groupId) {
        return this.wrap('getChannelGroup', [groupId]);
    };
    /**
     * Get a channel
     * @param {string} channelId
     * @returns {Promise<WonderPushChannel | null>}
     */
    UserPreferencesMethods.prototype.getChannel = function (channelId) {
        return this.wrap('getChannel', [channelId]);
    };
    /**
     * Create, update and remove channel existing groups to match the given channel groups
     * @param {WonderPushChannelGroup[]} channelGroups
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setChannelGroups = function (channelGroups) {
        return this.wrap('setChannelGroups', [channelGroups]);
    };
    /**
     * Create, update and remove channels to match the given channels
     * @param {WonderPushChannel[]} channels
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.setChannels = function (channels) {
        return this.wrap('setChannels', [channels]);
    };
    /**
     * Create or update a channel group
     * @param {WonderPushChannelGroup} channelGroup
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.putChannelGroup = function (channelGroup) {
        return this.wrap('putChannelGroup', [channelGroup]);
    };
    /**
     * Create or update a channel
     * @param {WonderPushChannel} channel
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.putChannel = function (channel) {
        return this.wrap('putChannel', [channel]);
    };
    /**
     * Remove a channel group
     * @param {string} groupId
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.removeChannelGroup = function (groupId) {
        return this.wrap('removeChannelGroup', [groupId]);
    };
    /**
     * Remove a channel
     * @param {string} channelId
     * @returns {Promise<any>}
     */
    UserPreferencesMethods.prototype.removeChannel = function (channelId) {
        return this.wrap('removeChannel', [channelId]);
    };
    return UserPreferencesMethods;
}(NestedObject));
export { UserPreferencesMethods };
var WonderPush = /** @class */ (function (_super) {
    __extends(WonderPush, _super);
    function WonderPush() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.UserPreferences = new UserPreferencesMethods(_this);
        return _this;
    }
    WonderPush.prototype.setUserId = function (userId) { return cordova(this, "setUserId", {}, arguments); };
    WonderPush.prototype.isReady = function () { return cordova(this, "isReady", {}, arguments); };
    WonderPush.prototype.setLogging = function (enabled) { return cordova(this, "setLogging", {}, arguments); };
    WonderPush.prototype.setDelegate = function (delegate) { return cordova(this, "setDelegate", {}, arguments); };
    WonderPush.prototype.getDelegate = function () { return cordova(this, "getDelegate", {}, arguments); };
    WonderPush.prototype.getUserId = function () { return cordova(this, "getUserId", {}, arguments); };
    WonderPush.prototype.getInstallationId = function () { return cordova(this, "getInstallationId", {}, arguments); };
    WonderPush.prototype.getDeviceId = function () { return cordova(this, "getDeviceId", {}, arguments); };
    WonderPush.prototype.getPushToken = function () { return cordova(this, "getPushToken", {}, arguments); };
    WonderPush.prototype.getAccessToken = function () { return cordova(this, "getAccessToken", {}, arguments); };
    WonderPush.prototype.trackEvent = function (type, attributes) { return cordova(this, "trackEvent", {}, arguments); };
    WonderPush.prototype.addTag = function (tag) { return cordova(this, "addTag", {}, arguments); };
    WonderPush.prototype.removeTag = function (tag) { return cordova(this, "removeTag", {}, arguments); };
    WonderPush.prototype.removeAllTags = function () { return cordova(this, "removeAllTags", {}, arguments); };
    WonderPush.prototype.getTags = function () { return cordova(this, "getTags", {}, arguments); };
    WonderPush.prototype.hasTag = function (tag) { return cordova(this, "hasTag", {}, arguments); };
    WonderPush.prototype.setProperty = function (field, value) { return cordova(this, "setProperty", {}, arguments); };
    WonderPush.prototype.unsetProperty = function (field) { return cordova(this, "unsetProperty", {}, arguments); };
    WonderPush.prototype.addProperty = function (field, value) { return cordova(this, "addProperty", {}, arguments); };
    WonderPush.prototype.removeProperty = function (field, value) { return cordova(this, "removeProperty", {}, arguments); };
    WonderPush.prototype.getPropertyValue = function (field) { return cordova(this, "getPropertyValue", {}, arguments); };
    WonderPush.prototype.getPropertyValues = function (field) { return cordova(this, "getPropertyValues", {}, arguments); };
    WonderPush.prototype.getProperties = function () { return cordova(this, "getProperties", {}, arguments); };
    WonderPush.prototype.putProperties = function (properties) { return cordova(this, "putProperties", {}, arguments); };
    WonderPush.prototype.subscribeToNotifications = function () { return cordova(this, "subscribeToNotifications", {}, arguments); };
    WonderPush.prototype.isSubscribedToNotifications = function () { return cordova(this, "isSubscribedToNotifications", {}, arguments); };
    WonderPush.prototype.unsubscribeFromNotifications = function () { return cordova(this, "unsubscribeFromNotifications", {}, arguments); };
    WonderPush.prototype.getUserConsent = function () { return cordova(this, "getUserConsent", {}, arguments); };
    WonderPush.prototype.setUserConsent = function (consent) { return cordova(this, "setUserConsent", {}, arguments); };
    WonderPush.prototype.clearAllData = function () { return cordova(this, "clearAllData", {}, arguments); };
    WonderPush.prototype.clearEventsHistory = function () { return cordova(this, "clearEventsHistory", {}, arguments); };
    WonderPush.prototype.clearPreferences = function () { return cordova(this, "clearPreferences", {}, arguments); };
    WonderPush.prototype.downloadAllData = function () { return cordova(this, "downloadAllData", {}, arguments); };
    WonderPush.pluginName = "WonderPush";
    WonderPush.plugin = "wonderpush-cordova-sdk";
    WonderPush.pluginRef = "WonderPush";
    WonderPush.repo = "https://github.com/wonderpush/wonderpush-cordova-sdk";
    WonderPush.install = "ionic cordova plugin add wonderpush-cordova-sdk --variable CLIENT_ID=YOUR_CLIENT_ID --variable CLIENT_SECRET=YOUR_CLIENT_SECRET ";
    WonderPush.installVariables = ["CLIENT_ID", "CLIENT_SECRET"];
    WonderPush.platforms = ["Android", "iOS"];
    WonderPush = __decorate([
        Injectable()
    ], WonderPush);
    return WonderPush;
}(IonicNativePlugin));
export { WonderPush };
//# sourceMappingURL=data:application/json;base64,