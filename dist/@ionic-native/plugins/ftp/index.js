var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FTPOriginal = /** @class */ (function (_super) {
    __extends(FTPOriginal, _super);
    function FTPOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FTPOriginal.prototype.connect = function (hostname, username, password) { return cordova(this, "connect", {}, arguments); };
    FTPOriginal.prototype.ls = function (path) { return cordova(this, "ls", {}, arguments); };
    FTPOriginal.prototype.mkdir = function (path) { return cordova(this, "mkdir", {}, arguments); };
    FTPOriginal.prototype.rmdir = function (path) { return cordova(this, "rmdir", {}, arguments); };
    FTPOriginal.prototype.rm = function (file) { return cordova(this, "rm", {}, arguments); };
    FTPOriginal.prototype.upload = function (localFile, remoteFile) { return cordova(this, "upload", { "observable": true }, arguments); };
    FTPOriginal.prototype.download = function (localFile, remoteFile) { return cordova(this, "download", { "observable": true }, arguments); };
    FTPOriginal.prototype.cancel = function () { return cordova(this, "cancel", {}, arguments); };
    FTPOriginal.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    FTPOriginal.pluginName = "FTP";
    FTPOriginal.plugin = "cordova-plugin-ftp";
    FTPOriginal.pluginRef = "cordova.plugin.ftp";
    FTPOriginal.repo = "https://github.com/xfally/cordova-plugin-ftp";
    FTPOriginal.platforms = ["Android", "iOS"];
    return FTPOriginal;
}(IonicNativePlugin));
var FTP = new FTPOriginal();
export { FTP };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Z0cC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQStCVCx1QkFBaUI7Ozs7SUFXeEMscUJBQU8sYUFBQyxRQUFnQixFQUFFLFFBQWdCLEVBQUUsUUFBZ0I7SUFtQjVELGdCQUFFLGFBQUMsSUFBWTtJQVdmLG1CQUFLLGFBQUMsSUFBWTtJQWFsQixtQkFBSyxhQUFDLElBQVk7SUFXbEIsZ0JBQUUsYUFBQyxJQUFZO0lBZ0JmLG9CQUFNLGFBQUMsU0FBaUIsRUFBRSxVQUFrQjtJQWdCNUMsc0JBQVEsYUFBQyxTQUFpQixFQUFFLFVBQWtCO0lBVTlDLG9CQUFNO0lBVU4sd0JBQVU7Ozs7OztjQXRKWjtFQWlDeUIsaUJBQWlCO1NBQTdCLEdBQUciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBAbmFtZSBGVFBcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBjb3Jkb3ZhIHBsdWdpbiBpcyBjcmVhdGVkIHRvIHVzZSBmdHAgKGNsaWVudCkgaW4gd2ViL2pzLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRlRQIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9mdHAvbmd4JztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBmVFA6IEZUUCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICpcbiAqIHRoaXMuZlRQLmNvbm5lY3QoJ2Z0cF9ob3N0JywgJ2Z0cF91c2VyJywgJ2Z0cF9wYXNzd29yZCcpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2coJ0xvZ2luIHN1Y2Nlc3NmdWwnLCByZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdGVFAnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1mdHAnLFxuICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbi5mdHAnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3hmYWxseS9jb3Jkb3ZhLXBsdWdpbi1mdHAnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXVxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGVFAgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDb25uZWN0IHRvIG9uZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBKdXN0IG5lZWQgdG8gaW5pdCB0aGUgY29ubmVjdGlvbiBvbmNlLiBJZiBzdWNjZXNzLCB5b3UgY2FuIGRvIGFueSBmdHAgYWN0aW9ucyBsYXRlci5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGhvc3RuYW1lIFRoZSBmdHAgc2VydmVyIHVybC4gTGlrZSBpcCB3aXRob3V0IHByb3RvY29sIHByZWZpeCwgZS5nLiBcIjE5Mi4xNjguMS4xXCIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1c2VybmFtZSBUaGUgZnRwIGxvZ2luIHVzZXJuYW1lLiBJZiBpdCBhbmQgYHBhc3N3b3JkYCBhcmUgYWxsIGJsYW5rL3VuZGVmaW5lZCwgdGhlIGRlZmF1bHQgdXNlcm5hbWUgXCJhbm9ueW1vdXNcIiBpcyB1c2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIGZ0cCBsb2dpbiBwYXNzd29yZC4gSWYgaXQgYW5kIGB1c2VybmFtZWAgYXJlIGFsbCBibGFuay91bmRlZmluZWQsIHRoZSBkZWZhdWx0IHBhc3N3b3JkIFwiYW5vbnltb3VzQFwiIGlzIHVzZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gVGhlIHN1Y2Nlc3MgY2FsbGJhY2suIE5vdGljZTogRm9yIGlPUywgaWYgdHJpZ2dlcmVkLCBtZWFucyBgaW5pdGAgc3VjY2VzcywgYnV0IE5PVCBtZWFucyB0aGUgbGF0ZXIgYWN0aW9uLCBlLmcuIGBsc2AuLi4gYGRvd25sb2FkYCB3aWxsIHN1Y2Nlc3MhXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNvbm5lY3QoaG9zdG5hbWU6IHN0cmluZywgdXNlcm5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3QgZmlsZXMgKHdpdGggaW5mbyBvZiBgbmFtZWAsIGB0eXBlYCwgYGxpbmtgLCBgc2l6ZWAsIGBtb2RpZmllZERhdGVgKSB1bmRlciBvbmUgZGlyZWN0b3J5IG9uIHRoZSBmdHAgc2VydmVyLlxuICAgKiBZb3UgY2FuIGdldCBvbmUgZmlsZSdzIG5hbWUgdXNpbmcgYGZpbGVMaXN0W3hdLm5hbWVgIChgeGAgaXMgdGhlIGxvY2F0aW9uIGluIGFycmF5KS5cbiAgICpcbiAgICogRXhwbGFpbiBrZXk6XG4gICAqIC0gbmFtZTogZmlsZSBuYW1lICh1dGYtOCkuXG4gICAqIC0gdHlwZTogZmlsZSB0eXBlLiBudW1iZXIgYDBgIG1lYW5zIHJlZ3VsYXIgZmlsZSwgYDFgIG1lYW5zIGRpcmVjdG9yeSwgYDJgIG1lYW5zIHN5bWJvbGljIGxpbmssIGAtMWAgbWVhbnMgdW5rbm93biB0eXBlIChtYXliZSBibG9jayBkZXYsIGNoYXIgZGV2Li4uKS5cbiAgICogLSBsaW5rOiBpZiB0aGUgZmlsZSBpcyBhIHN5bWJvbGljIGxpbmssIHRoZW4gdGhpcyBmaWVsZCBzdG9yZSBzeW1ib2xpYyBsaW5rIGluZm9ybWF0aW9uICh1dGYtOCksIGVsc2UgaXQncyBhIGJsYW5rIHN0cmluZy5cbiAgICogLSBzaXplOiBmaWxlIHNpemUgaW4gYnl0ZXMuXG4gICAqIC0gbW9kaWZpZWREYXRlOiBtb2RpZmllZCBkYXRlIG9mIHRoaXMgZmlsZS4gZGF0ZSBmb3JtYXQgaXMgYHl5eXktTU0tZGQgSEg6bW06c3Mgenp6YCwgZS5nIFwiMjAxNS0xMi0wMSAyMDo0NTowMCBHTVQrOFwiLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvbiB0aGUgZnRwIHNlcnZlci4gZS5nLiBcIi9hZGYvMTIzL1wiLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxzKHBhdGg6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBvbmUgZGlyZWN0b3J5IG9uIHRoZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvbiB0aGUgZnRwIHNlcnZlci4gZS5nLiBcIi9hZGYvMTIzL1wiLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIG1rZGlyKHBhdGg6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBvbmUgZGlyZWN0b3J5IG9uIHRoZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBUaXA6IEFzIG1hbnkgZnRwIHNlcnZlciBjb3VsZCBub3Qgcm0gZGlyIHdoZW4gaXQncyBub3QgZW1wdHksIHNvIHJtIGFsbCBmaWxlcyB1bmRlciB0aGUgZGlyIGF0IGZpcnN0IGlzIHJlY29tbWVuZGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIGRlbGV0ZS4gZS5nLiBcIi9hZGYvMTIzL25ld0Rpci9teUZpbGVcIi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBybWRpcihwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgb25lIGZpbGUgb24gdGhlIGZ0cCBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlIFRoZSBmaWxlICh3aXRoIGZ1bGwgcGF0aCkgeW91IHdhbnQgdG8gZGVsZXRlLiBlLmcuIFwiL2FkZi8xMjMvbmV3RGlyL215RmlsZVwiLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJtKGZpbGU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwbG9hZCBvbmUgbG9jYWwgZmlsZSB0byB0aGUgZnRwIHNlcnZlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsRmlsZSBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIHVwbG9hZC4gZS5nLiBcIi9sb2NhbC9wYXRoL3RvL2xvY2FsRmlsZVwiLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVtb3RlRmlsZSBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIGxvY2F0ZWQgb24gdGhlIGZ0cCBzZXJ2ZXIuIGUuZy4gXCIvYWRmLzEyMy9uZXdEaXIvcmVtb3RlRmlsZVwiLlxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICBJdCB3aWxsIGJlIHRyaWdnZXJlZCBtYW55IHRpbWVzIGFjY29yZGluZyB0aGUgZmlsZSdzIHNpemUuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGFyZyBgMGAsIGAwLjF4eGAsIGAwLjJ4eGAgLi4uIGAxYCBtZWFucyB0aGUgdXBsb2FkIHBlcmNlbnQuIFdoZW4gaXQgcmVhY2ggYDFgLCBtZWFucyBzdWNjZXNzLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWVcbiAgfSlcbiAgdXBsb2FkKGxvY2FsRmlsZTogc3RyaW5nLCByZW1vdGVGaWxlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEb3dubG9hZCBvbmUgcmVtb3RlIGZpbGUgb24gdGhlIGZ0cCBzZXJ2ZXIgdG8gbG9jYWwgcGF0aC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsRmlsZSBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIHVwbG9hZC4gZS5nLiBcIi9sb2NhbC9wYXRoL3RvL2xvY2FsRmlsZVwiLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVtb3RlRmlsZSBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIGxvY2F0ZWQgb24gdGhlIGZ0cCBzZXJ2ZXIuIGUuZy4gXCIvYWRmLzEyMy9uZXdEaXIvcmVtb3RlRmlsZVwiLlxuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICBJdCB3aWxsIGJlIHRyaWdnZXJlZCBtYW55IHRpbWVzIGFjY29yZGluZyB0aGUgZmlsZSdzIHNpemUuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGFyZyBgMGAsIGAwLjF4eGAsIGAwLjJ4eGAgLi4uIGAxYCBtZWFucyB0aGUgdXBsb2FkIHBlcmNlbnQuIFdoZW4gaXQgcmVhY2ggYDFgLCBtZWFucyBzdWNjZXNzLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWVcbiAgfSlcbiAgZG93bmxvYWQobG9jYWxGaWxlOiBzdHJpbmcsIHJlbW90ZUZpbGU6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbmNlbCBhbGwgcmVxdWVzdHMuIEFsd2F5cyBzdWNjZXNzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNhbmNlbCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNjb25uZWN0IGZyb20gZnRwIHNlcnZlci5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBkaXNjb25uZWN0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=