var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var FTP = /** @class */ (function (_super) {
    __extends(FTP, _super);
    function FTP() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FTP.prototype.connect = function (hostname, username, password) { return cordova(this, "connect", {}, arguments); };
    FTP.prototype.ls = function (path) { return cordova(this, "ls", {}, arguments); };
    FTP.prototype.mkdir = function (path) { return cordova(this, "mkdir", {}, arguments); };
    FTP.prototype.rmdir = function (path) { return cordova(this, "rmdir", {}, arguments); };
    FTP.prototype.rm = function (file) { return cordova(this, "rm", {}, arguments); };
    FTP.prototype.upload = function (localFile, remoteFile) { return cordova(this, "upload", { "observable": true }, arguments); };
    FTP.prototype.download = function (localFile, remoteFile) { return cordova(this, "download", { "observable": true }, arguments); };
    FTP.prototype.cancel = function () { return cordova(this, "cancel", {}, arguments); };
    FTP.prototype.disconnect = function () { return cordova(this, "disconnect", {}, arguments); };
    FTP.pluginName = "FTP";
    FTP.plugin = "cordova-plugin-ftp";
    FTP.pluginRef = "cordova.plugin.ftp";
    FTP.repo = "https://github.com/xfally/cordova-plugin-ftp";
    FTP.platforms = ["Android", "iOS"];
    FTP = __decorate([
        Injectable()
    ], FTP);
    return FTP;
}(IonicNativePlugin));
export { FTP };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Z0cC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQStCVCx1QkFBaUI7Ozs7SUFXeEMscUJBQU8sYUFBQyxRQUFnQixFQUFFLFFBQWdCLEVBQUUsUUFBZ0I7SUFtQjVELGdCQUFFLGFBQUMsSUFBWTtJQVdmLG1CQUFLLGFBQUMsSUFBWTtJQWFsQixtQkFBSyxhQUFDLElBQVk7SUFXbEIsZ0JBQUUsYUFBQyxJQUFZO0lBZ0JmLG9CQUFNLGFBQUMsU0FBaUIsRUFBRSxVQUFrQjtJQWdCNUMsc0JBQVEsYUFBQyxTQUFpQixFQUFFLFVBQWtCO0lBVTlDLG9CQUFNO0lBVU4sd0JBQVU7Ozs7OztJQXJIQyxHQUFHO1FBRGYsVUFBVSxFQUFFO09BQ0EsR0FBRztjQWpDaEI7RUFpQ3lCLGlCQUFpQjtTQUE3QixHQUFHIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogQG5hbWUgRlRQXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgY29yZG92YSBwbHVnaW4gaXMgY3JlYXRlZCB0byB1c2UgZnRwIChjbGllbnQpIGluIHdlYi9qcy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEZUUCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZnRwL25neCc7XG4gKlxuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgZlRQOiBGVFApIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmZUUC5jb25uZWN0KCdmdHBfaG9zdCcsICdmdHBfdXNlcicsICdmdHBfcGFzc3dvcmQnKVxuICogICAudGhlbigocmVzOiBhbnkpID0+IGNvbnNvbGUubG9nKCdMb2dpbiBzdWNjZXNzZnVsJywgcmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRlRQJyxcbiAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZnRwJyxcbiAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW4uZnRwJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS94ZmFsbHkvY29yZG92YS1wbHVnaW4tZnRwJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRlRQIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogQ29ubmVjdCB0byBvbmUgZnRwIHNlcnZlci5cbiAgICpcbiAgICogSnVzdCBuZWVkIHRvIGluaXQgdGhlIGNvbm5lY3Rpb24gb25jZS4gSWYgc3VjY2VzcywgeW91IGNhbiBkbyBhbnkgZnRwIGFjdGlvbnMgbGF0ZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBob3N0bmFtZSBUaGUgZnRwIHNlcnZlciB1cmwuIExpa2UgaXAgd2l0aG91dCBwcm90b2NvbCBwcmVmaXgsIGUuZy4gXCIxOTIuMTY4LjEuMVwiLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcm5hbWUgVGhlIGZ0cCBsb2dpbiB1c2VybmFtZS4gSWYgaXQgYW5kIGBwYXNzd29yZGAgYXJlIGFsbCBibGFuay91bmRlZmluZWQsIHRoZSBkZWZhdWx0IHVzZXJuYW1lIFwiYW5vbnltb3VzXCIgaXMgdXNlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFRoZSBmdHAgbG9naW4gcGFzc3dvcmQuIElmIGl0IGFuZCBgdXNlcm5hbWVgIGFyZSBhbGwgYmxhbmsvdW5kZWZpbmVkLCB0aGUgZGVmYXVsdCBwYXNzd29yZCBcImFub255bW91c0BcIiBpcyB1c2VkLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFRoZSBzdWNjZXNzIGNhbGxiYWNrLiBOb3RpY2U6IEZvciBpT1MsIGlmIHRyaWdnZXJlZCwgbWVhbnMgYGluaXRgIHN1Y2Nlc3MsIGJ1dCBOT1QgbWVhbnMgdGhlIGxhdGVyIGFjdGlvbiwgZS5nLiBgbHNgLi4uIGBkb3dubG9hZGAgd2lsbCBzdWNjZXNzIVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjb25uZWN0KGhvc3RuYW1lOiBzdHJpbmcsIHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMaXN0IGZpbGVzICh3aXRoIGluZm8gb2YgYG5hbWVgLCBgdHlwZWAsIGBsaW5rYCwgYHNpemVgLCBgbW9kaWZpZWREYXRlYCkgdW5kZXIgb25lIGRpcmVjdG9yeSBvbiB0aGUgZnRwIHNlcnZlci5cbiAgICogWW91IGNhbiBnZXQgb25lIGZpbGUncyBuYW1lIHVzaW5nIGBmaWxlTGlzdFt4XS5uYW1lYCAoYHhgIGlzIHRoZSBsb2NhdGlvbiBpbiBhcnJheSkuXG4gICAqXG4gICAqIEV4cGxhaW4ga2V5OlxuICAgKiAtIG5hbWU6IGZpbGUgbmFtZSAodXRmLTgpLlxuICAgKiAtIHR5cGU6IGZpbGUgdHlwZS4gbnVtYmVyIGAwYCBtZWFucyByZWd1bGFyIGZpbGUsIGAxYCBtZWFucyBkaXJlY3RvcnksIGAyYCBtZWFucyBzeW1ib2xpYyBsaW5rLCBgLTFgIG1lYW5zIHVua25vd24gdHlwZSAobWF5YmUgYmxvY2sgZGV2LCBjaGFyIGRldi4uLikuXG4gICAqIC0gbGluazogaWYgdGhlIGZpbGUgaXMgYSBzeW1ib2xpYyBsaW5rLCB0aGVuIHRoaXMgZmllbGQgc3RvcmUgc3ltYm9saWMgbGluayBpbmZvcm1hdGlvbiAodXRmLTgpLCBlbHNlIGl0J3MgYSBibGFuayBzdHJpbmcuXG4gICAqIC0gc2l6ZTogZmlsZSBzaXplIGluIGJ5dGVzLlxuICAgKiAtIG1vZGlmaWVkRGF0ZTogbW9kaWZpZWQgZGF0ZSBvZiB0aGlzIGZpbGUuIGRhdGUgZm9ybWF0IGlzIGB5eXl5LU1NLWRkIEhIOm1tOnNzIHp6emAsIGUuZyBcIjIwMTUtMTItMDEgMjA6NDU6MDAgR01UKzhcIi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb24gdGhlIGZ0cCBzZXJ2ZXIuIGUuZy4gXCIvYWRmLzEyMy9cIi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBscyhwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgb25lIGRpcmVjdG9yeSBvbiB0aGUgZnRwIHNlcnZlci5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb24gdGhlIGZ0cCBzZXJ2ZXIuIGUuZy4gXCIvYWRmLzEyMy9cIi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBta2RpcihwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgb25lIGRpcmVjdG9yeSBvbiB0aGUgZnRwIHNlcnZlci5cbiAgICpcbiAgICogVGlwOiBBcyBtYW55IGZ0cCBzZXJ2ZXIgY291bGQgbm90IHJtIGRpciB3aGVuIGl0J3Mgbm90IGVtcHR5LCBzbyBybSBhbGwgZmlsZXMgdW5kZXIgdGhlIGRpciBhdCBmaXJzdCBpcyByZWNvbW1lbmRlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byBkZWxldGUuIGUuZy4gXCIvYWRmLzEyMy9uZXdEaXIvbXlGaWxlXCIuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcm1kaXIocGF0aDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGVsZXRlIG9uZSBmaWxlIG9uIHRoZSBmdHAgc2VydmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZSBUaGUgZmlsZSAod2l0aCBmdWxsIHBhdGgpIHlvdSB3YW50IHRvIGRlbGV0ZS4gZS5nLiBcIi9hZGYvMTIzL25ld0Rpci9teUZpbGVcIi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBybShmaWxlOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGxvYWQgb25lIGxvY2FsIGZpbGUgdG8gdGhlIGZ0cCBzZXJ2ZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbEZpbGUgVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byB1cGxvYWQuIGUuZy4gXCIvbG9jYWwvcGF0aC90by9sb2NhbEZpbGVcIi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlbW90ZUZpbGUgVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byBsb2NhdGVkIG9uIHRoZSBmdHAgc2VydmVyLiBlLmcuIFwiL2FkZi8xMjMvbmV3RGlyL3JlbW90ZUZpbGVcIi5cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgSXQgd2lsbCBiZSB0cmlnZ2VyZWQgbWFueSB0aW1lcyBhY2NvcmRpbmcgdGhlIGZpbGUncyBzaXplLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBhcmcgYDBgLCBgMC4xeHhgLCBgMC4yeHhgIC4uLiBgMWAgbWVhbnMgdGhlIHVwbG9hZCBwZXJjZW50LiBXaGVuIGl0IHJlYWNoIGAxYCwgbWVhbnMgc3VjY2Vzcy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlXG4gIH0pXG4gIHVwbG9hZChsb2NhbEZpbGU6IHN0cmluZywgcmVtb3RlRmlsZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRG93bmxvYWQgb25lIHJlbW90ZSBmaWxlIG9uIHRoZSBmdHAgc2VydmVyIHRvIGxvY2FsIHBhdGguXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbEZpbGUgVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byB1cGxvYWQuIGUuZy4gXCIvbG9jYWwvcGF0aC90by9sb2NhbEZpbGVcIi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlbW90ZUZpbGUgVGhlIGZpbGUgKHdpdGggZnVsbCBwYXRoKSB5b3Ugd2FudCB0byBsb2NhdGVkIG9uIHRoZSBmdHAgc2VydmVyLiBlLmcuIFwiL2FkZi8xMjMvbmV3RGlyL3JlbW90ZUZpbGVcIi5cbiAgICogQHJldHVybiB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgSXQgd2lsbCBiZSB0cmlnZ2VyZWQgbWFueSB0aW1lcyBhY2NvcmRpbmcgdGhlIGZpbGUncyBzaXplLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBhcmcgYDBgLCBgMC4xeHhgLCBgMC4yeHhgIC4uLiBgMWAgbWVhbnMgdGhlIHVwbG9hZCBwZXJjZW50LiBXaGVuIGl0IHJlYWNoIGAxYCwgbWVhbnMgc3VjY2Vzcy5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlXG4gIH0pXG4gIGRvd25sb2FkKGxvY2FsRmlsZTogc3RyaW5nLCByZW1vdGVGaWxlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW5jZWwgYWxsIHJlcXVlc3RzLiBBbHdheXMgc3VjY2Vzcy5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBjYW5jZWwoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogRGlzY29ubmVjdCBmcm9tIGZ0cCBzZXJ2ZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGlzY29ubmVjdCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19