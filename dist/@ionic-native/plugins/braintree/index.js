var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var BraintreeOriginal = /** @class */ (function (_super) {
    __extends(BraintreeOriginal, _super);
    function BraintreeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BraintreeOriginal.prototype.initialize = function (token) { return cordova(this, "initialize", { "platforms": ["Android", "iOS"] }, arguments); };
    BraintreeOriginal.prototype.setupApplePay = function (options) { return cordova(this, "setupApplePay", { "platforms": ["iOS"] }, arguments); };
    BraintreeOriginal.prototype.presentDropInPaymentUI = function (options) { return cordova(this, "presentDropInPaymentUI", { "platforms": ["Android", "iOS"] }, arguments); };
    BraintreeOriginal.pluginName = "Braintree";
    BraintreeOriginal.plugin = "cordova-plugin-braintree";
    BraintreeOriginal.pluginRef = "BraintreePlugin";
    BraintreeOriginal.repo = "https://github.com/taracque/cordova-plugin-braintree";
    BraintreeOriginal.platforms = ["Android", "iOS"];
    BraintreeOriginal.install = "ionic cordova plugin add https://github.com/taracque/cordova-plugin-braintree";
    BraintreeOriginal.installVariables = [];
    return BraintreeOriginal;
}(IonicNativePlugin));
var Braintree = new BraintreeOriginal();
export { Braintree };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2JyYWludHJlZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUE4TXpDLDZCQUFpQjs7OztJQVc5Qyw4QkFBVSxhQUFDLEtBQWE7SUFtQnhCLGlDQUFhLGFBQUMsT0FBd0I7SUFjdEMsMENBQXNCLGFBQ3BCLE9BQTBCOzs7Ozs7OztvQkE1UDlCO0VBK00rQixpQkFBaUI7U0FBbkMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHRoZSBzZXR1cEFwcGxlUGF5IG1ldGhvZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBcHBsZVBheU9wdGlvbnMge1xuICAvKipcbiAgICogQXBwbGUgTWVyY2hhbnQgSUQgLSBjYW4gYmUgb2J0YWluZWQgZnJvbSB0aGUgQXBwbGUgRGV2ZWxvcGVyIFBvcnRhbC5cbiAgICovXG4gIG1lcmNoYW50SWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGN1cnJlbmN5IGluIHdoaWNoIHRvIHJlY2VpdmUgcGF5bWVudC5cbiAgICogVGhpcyBpcyBhIDMgbGV0dGVyIGN1cnJlbmN5IGNvZGUgKElTTy00MjE3KSAtIGUuZy4gXCJHQlBcIiwgXCJVU0RcIiwgXCJNWE5cIiwgZXRjLlxuICAgKi9cbiAgY3VycmVuY3k6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGxvY2FsZSBpbiB3aGljaCBwYXltZW50IGlzIGFjY2VwdGVkLlxuICAgKiBUaGlzIGlzIGEgMiBsZXR0ZXIgY291bnRyeSBjb2RlIChJU08tMzE2Ni0xKSAtIGUuZy4gXCJHQlwiLCBcIlVTXCIsIFwiTVhcIlxuICAgKi9cbiAgY291bnRyeTogc3RyaW5nO1xufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHRoZSBwcmVzZW50RHJvcEluUGF5bWVudFVJIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXltZW50VUlPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBhbW91bnQgb2YgdGhlIHRyYW5zYWN0aW9uIHRvIHNob3cgaW4gdGhlIGRyb3AtaW4gVUkgb24gdGhlXG4gICAqIHN1bW1hcnkgcm93IGFzIHdlbGwgYXMgdGhlIGNhbGwtdG8tYWN0aW9uIGJ1dHRvbiwgYXMgYSBzdHJpbmcuXG4gICAqIElmIG5vdCBwcm92aWRlZCwgdGhpcyB2YWx1ZSB3aWxsIGRlZmF1bHQgdG8gXCIwLjAwXCIsIGUuZy4gZnJlZS5cbiAgICogVW5sZXNzIHlvdSBhcmUgc2ltcGx5IGNhcHR1cmluZyBhdXRob3JpemF0aW9ucywgeW91IHByb2JhYmx5XG4gICAqIHdhbnQgdG8gZmlsbCB0aGlzIHZhbHVlIGluIVxuICAgKi9cbiAgYW1vdW50Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVzY3JpcHRpb24gb2YgdGhlIHRyYW5zYWN0aW9uIHRvIHNob3cgaW4gdGhlIGRyb3AtaW4gVUkgb24gdGhlIHN1bW1hcnkgcm93LlxuICAgKiBEZWZhdWx0cyB0byBlbXB0eSBzdHJpbmcuXG4gICAqL1xuICBwcmltYXJ5RGVzY3JpcHRpb24/OiBzdHJpbmc7XG59XG5cbi8qKlxuICogU3VjY2Vzc2Z1bCBjYWxsYmFjayByZXN1bHQgZm9yIHRoZSBwcmVzZW50RHJvcEluUGF5bWVudFVJIG1ldGhvZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXltZW50VUlSZXN1bHQge1xuICAvKipcbiAgICogSW5kaWNhdGVzIGlmIHRoZSB1c2VyIHVzZWQgdGhlIGNhbmNlbCBidXR0b24gdG8gY2xvc2UgdGhlIGRpYWxvZyB3aXRob3V0XG4gICAqIGNvbXBsZXRpbmcgdGhlIHBheW1lbnQuXG4gICAqL1xuICB1c2VyQ2FuY2VsbGVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGUgbm9uY2UgcmV0dXJuZWQgZm9yIHRoZSBwYXltZW50IHRyYW5zYWN0aW9uIChpZiBhIHBheW1lbnQgd2FzIGNvbXBsZXRlZCkuXG4gICAqL1xuICBub25jZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcGF5bWVudCB0eXBlIChpZiBhIHBheW1lbnQgd2FzIGNvbXBsZXRlZCkgKGNyZWRpdCBjYXJkLCBjaGVjaywgcGF5cGFsLCBldGMpLlxuICAgKi9cbiAgdHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBIGRlc2NyaXB0aW9uIG9mIHRoZSBwYXltZW50IG1ldGhvZCAoaWYgYSBwYXltZW50IHdhcyBjb21wbGV0ZWQpLlxuICAgKi9cbiAgbG9jYWxpemVkRGVzY3JpcHRpb246IHN0cmluZztcblxuICAvKipcbiAgICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIGNyZWRpdCBjYXJkIHVzZWQgdG8gY29tcGxldGUgYSBwYXltZW50IChpZiBhIGNyZWRpdCBjYXJkIHdhcyB1c2VkKS5cbiAgICovXG4gIGNhcmQ6IHtcbiAgICAvKipcbiAgICAgKiBUaGUgbGFzdCB0d28gZGlnaXRzIG9mIHRoZSBjcmVkaXQgY2FyZCB1c2VkLlxuICAgICAqL1xuICAgIGxhc3RUd286IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEFuIGVudW1lcmF0ZWQgdmFsdWUgdXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBjcmVkaXQgY2FyZCB1c2VkLlxuICAgICAqXG4gICAgICogQ2FuIGJlIG9uZSBvZiB0aGUgZm9sbG93aW5nIHZhbHVlczpcbiAgICAgKlxuICAgICAqIEJUQ2FyZE5ldHdvcmtVbmtub3duXG4gICAgICogQlRDYXJkTmV0d29ya0FNRVhcbiAgICAgKiBCVENhcmROZXR3b3JrRGluZXJzQ2x1YlxuICAgICAqIEJUQ2FyZE5ldHdvcmtEaXNjb3ZlclxuICAgICAqIEJUQ2FyZE5ldHdvcmtNYXN0ZXJDYXJkXG4gICAgICogQlRDYXJkTmV0d29ya1Zpc2FcbiAgICAgKiBCVENhcmROZXR3b3JrSkNCXG4gICAgICogQlRDYXJkTmV0d29ya0xhc2VyXG4gICAgICogQlRDYXJkTmV0d29ya01hZXN0cm9cbiAgICAgKiBCVENhcmROZXR3b3JrVW5pb25QYXlcbiAgICAgKiBCVENhcmROZXR3b3JrU29sb1xuICAgICAqIEJUQ2FyZE5ldHdvcmtTd2l0Y2hcbiAgICAgKiBCVENhcmROZXR3b3JrVUtNYWVzdHJvXG4gICAgICovXG4gICAgbmV0d29yazogc3RyaW5nO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgUGF5UGFsIGFjY291bnQgdXNlZCB0byBjb21wbGV0ZSBhIHBheW1lbnQgKGlmIGEgUGF5UGFsIGFjY291bnQgd2FzIHVzZWQpLlxuICAgKi9cbiAgcGF5UGFsQWNjb3VudDoge1xuICAgIGVtYWlsOiBzdHJpbmc7XG4gICAgZmlyc3ROYW1lOiBzdHJpbmc7XG4gICAgbGFzdE5hbWU6IHN0cmluZztcbiAgICBwaG9uZTogc3RyaW5nO1xuICAgIGJpbGxpbmdBZGRyZXNzOiBzdHJpbmc7XG4gICAgc2hpcHBpbmdBZGRyZXNzOiBzdHJpbmc7XG4gICAgY2xpZW50TWV0YWRhdGFJZDogc3RyaW5nO1xuICAgIHBheWVySWQ6IHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogSW5mb3JtYXRpb24gYWJvdXQgdGhlIEFwcGxlIFBheSBjYXJkIHVzZWQgdG8gY29tcGxldGUgYSBwYXltZW50IChpZiBBcHBsZSBQYXkgd2FzIHVzZWQpLlxuICAgKi9cbiAgYXBwbGVQYXljYXJkOiB7fTtcblxuICAvKipcbiAgICogSW5mb3JtYXRpb24gYWJvdXQgM0QgU2VjdXJlIGNhcmQgdXNlZCB0byBjb21wbGV0ZSBhIHBheW1lbnQgKGlmIDNEIFNlY3VyZSB3YXMgdXNlZCkuXG4gICAqL1xuICB0aHJlZURTZWN1cmVDYXJkOiB7XG4gICAgbGlhYmlsaXR5U2hpZnRlZDogYm9vbGVhbjtcbiAgICBsaWFiaWxpdHlTaGlmdFBvc3NpYmxlOiBib29sZWFuO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCBWZW5tbyBhY2NvdW50IHVzZWQgdG8gY29tcGxldGUgYSBwYXltZW50IChpZiBhIFZlbm1vIGFjY291bnQgd2FzIHVzZWQpLlxuICAgKi9cbiAgdmVubW9BY2NvdW50OiB7XG4gICAgdXNlcm5hbWU6IHN0cmluZztcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmFtZSBCcmFpbnRyZWVcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZW5hYmxlcyB0aGUgdXNlIG9mIHRoZSBCcmFpbnRyZWUgRHJvcC1JbiBQYXltZW50cyBVSSBpbiB5b3VyIElvbmljIGFwcGxpY2F0aW9ucyBvbiBBbmRyb2lkIGFuZCBpT1MsIHVzaW5nIHRoZSBuYXRpdmUgRHJvcC1JbiBVSSBmb3IgZWFjaCBwbGF0Zm9ybSAobm90IHRoZSBKYXZhc2NyaXB0IFNESykuXG4gKlxuICogIElvbmljIE5hdGl2ZSB1dGlsaXplcyBbYSBtYWludGFpbmVkIGZvcmtdKGh0dHBzOi8vZ2l0aHViLmNvbS90YXJhY3F1ZS9jb3Jkb3ZhLXBsdWdpbi1icmFpbnRyZWUpIG9mIHRoZSBvcmlnaW5hbCBgY29yZG92YS1wbHVnaW4tYnJhaW50cmVlYFxuICpcbiAqICBGb3IgaW5mb3JtYXRpb24gb24gaG93IHRvIHVzZSBBcHBsZSBQYXkgd2l0aCB0aGlzIHBsdWdpbiwgcGxlYXNlIHJlZmVyIHRvIHRoZSBbcGx1Z2luIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9UYXJhY3F1ZS9jb3Jkb3ZhLXBsdWdpbi1icmFpbnRyZWUjYXBwbGUtcGF5LWlvcy1vbmx5KVxuICpcbiAqICoqTk9URSoqOiBUaGlzIGlzIG5vdCBhIGNvbXBsZXRlIHBheW1lbnRzIHNvbHV0aW9uLiBBbGwgb2YgdGhlIEJyYWludHJlZSBjbGllbnQtc2lkZSBVSXMgc2ltcGx5IGdlbmVyYXRlIGEgcGF5bWVudCBub25jZSB0aGF0IG11c3QgdGhlbiBiZSBwcm9jZXNzZWQgYnkgeW91ciBzZXJ2ZXIgdG8gY29tcGxldGUgdGhlIHBheW1lbnQuXG4gKiBTZWUgdGhlIFtCcmFpbnRyZWUgTm9kZSBzZXJ2ZXIgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXJzLmJyYWludHJlZXBheW1lbnRzLmNvbS9zdGFydC9oZWxsby1zZXJ2ZXIvbm9kZSkgZm9yIGRldGFpbHMgYW5kIGEgW3NhbXBsZSBFeHByZXNzIHNlcnZlcl0oaHR0cHM6Ly9naXRodWIuY29tL2JyYWludHJlZS9icmFpbnRyZWVfZXhwcmVzc19leGFtcGxlKSB0aGF0IGltcGxlbWVudHMgdGhlIHJlcXVpcmVkIGZ1bmN0aW9uYWxpdHkuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCcmFpbnRyZWUsIEFwcGxlUGF5T3B0aW9ucywgUGF5bWVudFVJT3B0aW9ucyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvYnJhaW50cmVlL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBicmFpbnRyZWU6IEJyYWludHJlZSkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogLy8gWW91ciBCcmFpbnRyZWUgYFRva2VuaXphdGlvbiBLZXlgIGZyb20gdGhlIEJyYWludHJlZSBkYXNoYm9hcmQuXG4gKiAvLyBBbHRlcm5hdGl2ZWx5IHlvdSBjYW4gYWxzbyBnZW5lcmF0ZSB0aGlzIHRva2VuIHNlcnZlci1zaWRlXG4gKiAvLyB1c2luZyBhIGNsaWVudCBJRCBpbiBvcmRlciB0byBhbGxvdyB1c2VycyB0byB1c2Ugc3RvcmVkIHBheW1lbnQgbWV0aG9kcy5cbiAqIC8vIFNlZSB0aGUgW0JyYWludHJlZSBDbGllbnQgVG9rZW4gZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXJzLmJyYWludHJlZXBheW1lbnRzLmNvbS9yZWZlcmVuY2UvcmVxdWVzdC9jbGllbnQtdG9rZW4vZ2VuZXJhdGUvbm9kZSNjdXN0b21lcl9pZCkgZm9yIGRldGFpbHMuXG4gKiBjb25zdCBCUkFJTlRSRUVfVE9LRU4gPSAnPFlPVVJfQlJBSU5UUkVFX1RPS0VOPic7XG4gKlxuICogLy8gTk9URTogRG8gbm90IHByb3ZpZGUgdGhpcyB1bmxlc3MgeW91IGhhdmUgY29uZmlndXJlZCB5b3VyIEFwcGxlIERldmVsb3BlciBhY2NvdW50XG4gKiAvLyBhcyB3ZWxsIGFzIHlvdXIgQnJhaW50cmVlIG1lcmNoYW50IGFjY291bnQsIG90aGVyd2lzZSB0aGUgQnJhaW50cmVlIG1vZHVsZSB3aWxsIGZhaWwuXG4gKiBjb25zdCBhcHBsZU9wdGlvbnM6IEFwcGxlUGF5T3B0aW9ucyA9IHtcbiAqICAgbWVyY2hhbnRJZDogJzxZT1VSIE1FUkNIQU5UIElEPicsXG4gKiAgIGN1cnJlbmN5OiAnVVNEJyxcbiAqICAgY291bnRyeTogJ1VTJ1xuICogfVxuICpcbiAqIGNvbnN0IHBheW1lbnRPcHRpb25zOiBQYXltZW50VUlPcHRpb25zID0ge1xuICogICBhbW91bnQ6ICcxNC45OScsXG4gKiAgIHByaW1hcnlEZXNjcmlwdGlvbjogJ1lvdXIgcHJvZHVjdCBvciBzZXJ2aWNlIChwZXIgL2l0ZW0sIC9tb250aCwgL3dlZWssIGV0YyknLFxuICogfVxuICpcbiAqIHRoaXMuYnJhaW50cmVlLmluaXRpYWxpemUoQlJBSU5UUkVFX1RPS0VOKVxuICogICAudGhlbigoKSA9PiB0aGlzLmJyYWludHJlZS5zZXR1cEFwcGxlUGF5KGFwcGxlT3B0aW9ucykpXG4gKiAgIC50aGVuKCgpID0+IHRoaXMuYnJhaW50cmVlLnByZXNlbnREcm9wSW5QYXltZW50VUkocGF5bWVudE9wdGlvbnMpKVxuICogICAudGhlbigocmVzdWx0OiBQYXltZW50VUlSZXN1bHQpID0+IHtcbiAqICAgICBpZiAocmVzdWx0LnVzZXJDYW5jZWxsZWQpIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKFwiVXNlciBjYW5jZWxsZWQgcGF5bWVudCBkaWFsb2cuXCIpO1xuICogICAgIH0gZWxzZSB7XG4gKiAgICAgICBjb25zb2xlLmxvZyhcIlVzZXIgc3VjY2Vzc2Z1bGx5IGNvbXBsZXRlZCBwYXltZW50IVwiKTtcbiAqICAgICAgIGNvbnNvbGUubG9nKFwiUGF5bWVudCBOb25jZTogXCIgKyByZXN1bHQubm9uY2UpO1xuICogICAgICAgY29uc29sZS5sb2coXCJQYXltZW50IFJlc3VsdC5cIiwgcmVzdWx0KTtcbiAqICAgICB9XG4gKiAgIH0pXG4gKiAgIC5jYXRjaCgoZXJyb3I6IHN0cmluZykgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqIGBgYFxuICpcbiAqIEBpbnRlcmZhY2VzXG4gKiBBcHBsZVBheU9wdGlvbnNcbiAqIFBheW1lbnRVSU9wdGlvbnNcbiAqIFBheW1lbnRVSVJlc3VsdFxuICovXG5AUGx1Z2luKHtcbiAgcGx1Z2luTmFtZTogJ0JyYWludHJlZScsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWJyYWludHJlZScsXG4gIHBsdWdpblJlZjogJ0JyYWludHJlZVBsdWdpbicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vdGFyYWNxdWUvY29yZG92YS1wbHVnaW4tYnJhaW50cmVlJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG4gIGluc3RhbGw6XG4gICAgJ2lvbmljIGNvcmRvdmEgcGx1Z2luIGFkZCBodHRwczovL2dpdGh1Yi5jb20vdGFyYWNxdWUvY29yZG92YS1wbHVnaW4tYnJhaW50cmVlJyxcbiAgaW5zdGFsbFZhcmlhYmxlczogW11cbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQnJhaW50cmVlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogVXNlZCB0byBpbml0aWFsaXplIHRoZSBCcmFpbnRyZWUgY2xpZW50LiBUaGlzIGZ1bmN0aW9uIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBvdGhlciBtZXRob2RzIGNhbiBiZSB1c2VkLlxuICAgKiAgQXMgdGhlIGluaXRpYWxpemUgY29kZSBpcyBhc3luYywgYmUgc3VyZSB5b3UgY2FsbCBhbGwgQnJhaW50cmVlIHJlbGF0ZWQgbWV0aG9kcyBhZnRlciB0aGUgaW5pdGlhbGl6ZSBwcm9taXNlIGhhcyByZXNvbHZlZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRva2VuIFRoZSBjbGllbnQgdG9rZW4gb3IgdG9rZW5pemF0aW9uIGtleSB0byB1c2Ugd2l0aCB0aGUgQnJhaW50cmVlIGNsaWVudC5cbiAgICogQHJldHVybiB7UHJvbWlzZTx1bmRlZmluZWQgfCBzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdW5kZWZpbmVkIG9uIHN1Y2Nlc3NmdWwgaW5pdGlhbGl6YXRpb24sIG9yIHJlamVjdHMgd2l0aCBhIHN0cmluZyBtZXNzYWdlIGRlc2NyaWJpbmcgdGhlIGZhaWx1cmUuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbiAgfSlcbiAgaW5pdGlhbGl6ZSh0b2tlbjogc3RyaW5nKTogUHJvbWlzZTx1bmRlZmluZWQgfCBzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBjb25maWd1cmUgQXBwbGUgUGF5IG9uIGlPUy5cbiAgICogIEluIG9yZGVyIGZvciBBcHBsZSBQYXkgcGF5bWVudHMgdG8gYXBwZWFyIG9uIHRoZSBEcm9wLUluIFBheW1lbnRzIFVJLCB5b3UgbXVzdCBpbml0aWFsaXplIHRoZSBBcHBsZSBQYXkgZnJhbWV3b3JrIGJlZm9yZSB1c2luZyB0aGUgRHJvcC1JbiBQYXltZW50cyBVSS5cbiAgICpcbiAgICogIERvIG5vdCB0dXJuIG9uIEFwcGxlIFBheSBpbiBCcmFpbnRyZWUgaWYgeW91IGRvbid0IGhhdmUgQXBwbGUgUGF5IGVudGl0bGVtZW50cyAtIHRoZSBCcmFpbnRyZWUgbW9kdWxlIHdpbGwgcmVqZWN0IHRoZSBhdHRlbXB0IHRvIHNldCB1cCBBcHBsZSBQYXkuXG4gICAqICBQbGVhc2UgcmVmZXIgdG8gdGhlIFtCcmFpbnRyZWUgTWVyY2hhbnQgRG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXJzLmJyYWludHJlZXBheW1lbnRzLmNvbS9ndWlkZXMvYXBwbGUtcGF5L2NvbmZpZ3VyYXRpb24vaW9zL3Y0I2FwcGxlLXBheS1jZXJ0aWZpY2F0ZS1yZXF1ZXN0LWFuZC1wcm92aXNpb25pbmcpIHRvIHNldCB1cCBhIE1lcmNoYW50IEFjY291bnQuXG4gICAqXG4gICAqICBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gb24gQW5kcm9pZCBpcyBhIGBub29wYCBzbyB5b3UgY2FuIGNhbGwgaXQgd2l0aG91dCBoYXZpbmcgdG8gY2hlY2sgd2hpY2ggY29yZG92YSBwbGF0Zm9ybSB5b3UgYXJlIG9uISA6RFxuICAgKlxuICAgKiBAcGFyYW0ge0FwcGxlUGF5T3B0aW9uc31vcHRpb25zIFRoZSBvcHRpb25zIHVzZWQgdG8gY29uZmlndXJlIEFwcGxlIFBheS5cbiAgICogQHJldHVybiB7UHJvbWlzZTx1bmRlZmluZWQgfCBzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdW5kZWZpbmVkIG9uIHN1Y2Nlc3NmdWwgaW5pdGlhbGl6YXRpb24sIG9yIHJlamVjdHMgd2l0aCBhIHN0cmluZyBtZXNzYWdlIGRlc2NyaWJpbmcgdGhlIGZhaWx1cmUuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ2lPUyddXG4gIH0pXG4gIHNldHVwQXBwbGVQYXkob3B0aW9uczogQXBwbGVQYXlPcHRpb25zKTogUHJvbWlzZTx1bmRlZmluZWQgfCBzdHJpbmc+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU2hvd3MgQnJhaW50cmVlJ3MgRHJvcC1JbiBQYXltZW50cyBVSS5cbiAgICogIEFwcGxlIFBheSBpcyBvbmx5IHNob3duIGluIHRoZSBEcm9wIEluIFVJIGlmIHlvdSBoYXZlIHByZXZpb3VzbHkgY2FsbGVkIGBzZXR1cEFwcGxlUGF5YC5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMge1BheW1lbnRVSU9wdGlvbnN9IEFuIG9wdGlvbmFsIGFyZ3VtZW50IHVzZWQgdG8gY29uZmlndXJlIHRoZSBwYXltZW50IFVJOyBzZWUgdHlwZSBkZWZpbml0aW9uIGZvciBwYXJhbWV0ZXJzLiBJZiBub3QgcHJvdmlkZWQsIHRoZSBVSSB3aWxsIHNob3cgXCIwLjAwXCIgYXMgdGhlIHByaWNlIGFuZCBhbiBlbXB0eSBkZXNjcmlwdGlvbi5cbiAgICogQHJldHVybiB7UHJvbWlzZTxQYXltZW50VUlSZXN1bHQgfCBzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBQYXltZW50VUlSZXN1bHQgb2JqZWN0IG9uIHN1Y2Nlc3NmdWwgcGF5bWVudCAob3IgdGhlIHVzZXIgY2FuY2VscyksIG9yIHJlamVjdHMgd2l0aCBhIHN0cmluZyBtZXNzYWdlIGRlc2NyaWJpbmcgdGhlIGZhaWx1cmUuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbiAgfSlcbiAgcHJlc2VudERyb3BJblBheW1lbnRVSShcbiAgICBvcHRpb25zPzogUGF5bWVudFVJT3B0aW9uc1xuICApOiBQcm9taXNlPFBheW1lbnRVSVJlc3VsdCB8IHN0cmluZz4ge1xuICAgIHJldHVybjtcbiAgfVxufVxuIl19