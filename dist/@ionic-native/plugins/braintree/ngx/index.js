var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Braintree = /** @class */ (function (_super) {
    __extends(Braintree, _super);
    function Braintree() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Braintree.prototype.initialize = function (token) { return cordova(this, "initialize", { "platforms": ["Android", "iOS"] }, arguments); };
    Braintree.prototype.setupApplePay = function (options) { return cordova(this, "setupApplePay", { "platforms": ["iOS"] }, arguments); };
    Braintree.prototype.presentDropInPaymentUI = function (options) { return cordova(this, "presentDropInPaymentUI", { "platforms": ["Android", "iOS"] }, arguments); };
    Braintree.pluginName = "Braintree";
    Braintree.plugin = "cordova-plugin-braintree";
    Braintree.pluginRef = "BraintreePlugin";
    Braintree.repo = "https://github.com/taracque/cordova-plugin-braintree";
    Braintree.platforms = ["Android", "iOS"];
    Braintree.install = "ionic cordova plugin add https://github.com/taracque/cordova-plugin-braintree";
    Braintree.installVariables = [];
    Braintree = __decorate([
        Injectable()
    ], Braintree);
    return Braintree;
}(IonicNativePlugin));
export { Braintree };
//# sourceMappingURL=data:application/json;base64,