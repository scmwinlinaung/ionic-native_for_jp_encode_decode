var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var LuxandOriginal = /** @class */ (function (_super) {
    __extends(LuxandOriginal, _super);
    function LuxandOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LuxandOriginal.prototype.init = function (config) { return cordova(this, "init", {}, arguments); };
    LuxandOriginal.prototype.register = function (params) { return cordova(this, "register", {}, arguments); };
    LuxandOriginal.prototype.login = function (params) { return cordova(this, "login", {}, arguments); };
    LuxandOriginal.prototype.clear = function (id) { return cordova(this, "clear", {}, arguments); };
    LuxandOriginal.prototype.clearMemory = function () { return cordova(this, "clearMemory", {}, arguments); };
    LuxandOriginal.pluginName = "Luxand";
    LuxandOriginal.plugin = "codova-plugin-luxand";
    LuxandOriginal.pluginRef = "window.Luxand";
    LuxandOriginal.repo = "https://github.com/molobala/cordova-plugin-luxand";
    LuxandOriginal.platforms = ["Android", "iOS"];
    return LuxandOriginal;
}(IonicNativePlugin));
var Luxand = new LuxandOriginal();
export { Luxand };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2x1eGFuZC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQzs7SUEyRjVDLDBCQUFpQjs7OztJQVEzQyxxQkFBSSxhQUFDLE1BQW9CO0lBU3pCLHlCQUFRLGFBQUMsTUFBeUI7SUFTbEMsc0JBQUssYUFBQyxNQUF5QjtJQVMvQixzQkFBSyxhQUFDLEVBQVU7SUFRaEIsNEJBQVc7Ozs7OztpQkF2SWI7RUE0RjRCLGlCQUFpQjtTQUFoQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTHV4YW5kQ29uZmlnIHtcbiAgLyoqIFRoZSBsaWNlbmNlIGtleSBnb3QgZnJvbSBMdXhhbmQgKi9cbiAgbGljZW5jZTogc3RyaW5nO1xuICAvKiogVGhlIGludGVybmFsIGRhdGFiYXNlIG5hbWUgdGhlIHRyYWNrZXIgc2hvdWxkIHVzZSAqL1xuICBkYm5hbWU6IHN0cmluZztcbiAgLyoqIHRoZSBudW1iZXIgb2YgcmV0cnkgd2hlbiByZWdpc3RlcmluZyBvZiBpZGVudGlmeWluZyBhIGZhY2UgKi9cbiAgbG9naW5UcnlDb3VudDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9NTEZhY2lhbERhdGEge1xuICAvKiogVGhlIHN0YXR1cyBtZXNzYWdlICovXG4gIHN0YXR1czogc3RyaW5nO1xuICAvKiogVGhlIG1lc3NhZ2UgcmV0dXJuZWQgYnkgdGhlIHBsdWdpbiAqL1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIC8qKiBUaGUgdW5pcXVlIG5hbWUgZ2VuZXJhdGVkIGFuZCBhc3NvY2lhdGVkIHRvIGEgZmFjZSB3aGVuIHJlZ2lzdGVyaW5nICovXG4gIG5hbWU6IHN0cmluZztcbiAgLyoqIFRoZSB1bmlxdWUgaWQgTHV4YW5kIEZhY2UgU0RLIHRyYWNrZXIgYXNzb2NpYXRlIHRvIGEgZmFjZSBpbiBpdCdzIGludGVybmFsIGRhdGFiYXNlICovXG4gIGlkOiBudW1iZXI7XG4gIC8qKiBFeHRyYSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZmFjZSBpbmNsdWRpbmcgYWdlLCBleHByZXNzaW9ucyAqL1xuICBleHRyYToge1xuICAgIEFHRT86IGFueTtcbiAgICBHRU5ERVI/OiBhbnk7XG4gICAgRVlFU09QRU5FRD86IGFueTtcbiAgICBTTUlMRTogYW55O1xuICB9O1xufVxuXG4vKipcbiAqIEBuYW1lIEx1eGFuZFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBsZXQgeW91IGludGVncmF0IEx1eGFuZCBGYWNlIFNESyBpbnRvIHlvdXIgaW9uaWMgcHJvamVjdHMsIHNvIHlvdSBjYW4gaW1wbGVtZW50cyBmYWNlIGF1dGhlbnRpY2F0aW9uIGVhc2lseSBpbiB5b3VyIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEx1eGFuZCB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbHV4YW5kJztcbiAqXG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBsdXhhbmQ6IEx1eGFuZCkgeyB9XG4gKlxuICogLi4uXG4gKlxuICogLy9pbml0IEx1eGFuZCAgRmFjZSBTREtcbiAqXG4gKiB0aGlzLmx1eGFuZC5pbml0KHtcbiAqICBsaWNlbmNlOiBcIlwiLFxuICogIGRibmFtZTogXCJkYXRhLmRhdFwiLFxuICogIGxvZ2luVHJ5Q291bnQ6IDNcbiAqIH0pXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2cocmVzKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKiAvLyByZWdpc3RlciBhIGZhY2VcbiAqIHRoaXMubHV4YW5kLnJlZ2lzdGVyKHtcbiAqICB0aW1lb3V0OiAyMDAwMC8vMjAgc2Vjb25kc1xuICogfSlcbiAqIC50aGVuKHI9PntcbiAqICBjb25zb2xlLmxvZyhcIllvdXIgRkFDRSBJRDpcIiwgci5pZCk7XG4gKiAgY29uc29sZS5sb2coXCJZb3VyIEFHRTpcIiwgci5leHRyYS5BR0UpO1xuICogIGNvbnNvbGUubG9nKFwiWW91ciBHRU5ERVI6XCIsIHIuZXh0cmEuR0VOREVSKTtcbiAqICBjb25zb2xlLmxvZyhcIlNJTUlMSU5HOlwiLCByLmV4dHJhLlNNSUxFPjM1PyBcIllFU1wiOiBcIk5PXCIpO1xuICogIGNvbnNvbGUubG9nKFwiRVlFIE9QRU5FRDpcIiwgci5leHRyYS5FWUVTT1BFTkVEPjQ1PyBcIllFU1wiOiBcIk5PXCIpO1xuICogfSlcbiAqIC5jYXRjaChlcnI9PntcbiAqICBpZihlcnIubWVzc2dhZSA9PT0gXCJBbHJlYWR5IHJlZ2lzdGVyZWRcIikge1xuICogICAgLy9leHRyYSBkYXRhIGF2YWlsYWJsZVxuICogICAgY29uc29sZS5sb2coXCJZb3VyIEFHRTpcIiwgci5leHRyYS5BR0UpO1xuICogICAgY29uc29sZS5sb2coXCJZb3VyIEdFTkRFUjpcIiwgci5leHRyYS5HRU5ERVIpO1xuICogICAgY29uc29sZS5sb2coXCJTSU1JTElORzpcIiwgci5leHRyYS5TTUlMRT4zNT8gXCJZRVNcIjogXCJOT1wiKTtcbiAqICAgIGNvbnNvbGUubG9nKFwiRVlFIE9QRU5FRDpcIiwgci5leHRyYS5FWUVTT1BFTkVEPjQ1PyBcIllFU1wiOiBcIk5PXCIpO1xuICogIH1cbiAqIH0pXG4gKiAvL3RvIGxvZ2luIHVzaW5nIGEgZmFjZVxuICogdGhpcy5sdXhhbmQubG9naW4oe1xuICogdGltZW91dDogMjAwMDBcbiAqIH0pLnRoZW4ocj0+Y29uc29sZS5sb2cocikpXG4gKiAuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBPTUxGYWNpYWxEYXRhXG4gKiBMdXhhbmRDb25maWdcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdMdXhhbmQnLFxuICBwbHVnaW46ICdjb2RvdmEtcGx1Z2luLWx1eGFuZCcsXG4gIHBsdWdpblJlZjogJ3dpbmRvdy5MdXhhbmQnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL21vbG9iYWxhL2NvcmRvdmEtcGx1Z2luLWx1eGFuZCcsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEx1eGFuZCBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBMdXhhbmQgU0RLXG4gICAqIEBwYXJhbSBjb25maWcge0x1eGFuZENvbmZpZ30gTHV4YW5kQ29uZmlnIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRvIHVzZSB0byBpbml0IHRoZSBTREtcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSAvLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIEx1eGFuZCBGYWNlU0RLIGlzIGluaXRpYWxpemVkIHN1Y2Nlc2ZmdWxseVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbml0KGNvbmZpZzogTHV4YW5kQ29uZmlnKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIElkZW50aWZ5IG1ldGhvZGUsIHRyeSB0byByZWdpc3RlciBhIGZhY2UgaW4gaW50ZXJuYWwgZGF0YSBiYXNlXG4gICAqIEBwYXJhbSBwYXJhbXMge2FueX0gQWxsb3cgdG8gc3BlY2lmeSB0aGUgdGltZW91dCB2YWx1ZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPE9NTEZhY2lhbERhdGE+fSAvLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmUgaWYgYSBmYWNlIGhhcyBiZWVuIGRldGVjdGVkIGFuZCBzYXZlZCBieSB0aGUgdHJhY2tlciBpbiB0aGUgaW50ZXJuYWwgZGF0YWJhc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVnaXN0ZXIocGFyYW1zOiB7dGltZW91dDogbnVtYmVyfSk6IFByb21pc2U8T01MRmFjaWFsRGF0YT4ge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogTG9naW4gbWV0aG9kLCB0cnkgdG8gYXV0aGVudGljYXRlZCBhIGZhY2VcbiAgICogQHBhcmFtIHBhcmFtcyB7YW55fSBBbGxvdyB0byBzcGVjaWZ5IHRoZSB0aW1lb3V0IHZhbHVlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8T01MRmFjaWFsRGF0YT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvZ2luKHBhcmFtczoge3RpbWVvdXQ6IG51bWJlcn0pOiBQcm9taXNlPE9NTEZhY2lhbERhdGE+IHtcbiAgICByZXR1cm47IC8vIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZSBpZiBhIGZhY2UgaXMgcmVjb2duaXplIHN1Y2Nlc3NmdWxseVxuICB9XG4gIC8qKlxuICAgKiBjbGVhciBtZXRob2QsIHRyeSB0byByZW1vdmUgYSBmYWNlIGZyb20gaW50ZXJuYWwgZGF0YWJhc2VcbiAgICogQHBhcmFtIGlkIHtudW1iZXJ9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY2xlYXIoaWQ6IG51bWJlcik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBjbGVhck1lbW9yeSBtZXRob2QsIHRyeSB0byBjbGVhciBpbnRlcm5hbCBkYXRhYmFzZVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNsZWFyTWVtb3J5KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG5cbiJdfQ==