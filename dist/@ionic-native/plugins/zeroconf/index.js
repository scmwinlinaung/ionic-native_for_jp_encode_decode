var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var ZeroconfOriginal = /** @class */ (function (_super) {
    __extends(ZeroconfOriginal, _super);
    function ZeroconfOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZeroconfOriginal.prototype.getHostname = function () { return cordova(this, "getHostname", {}, arguments); };
    ZeroconfOriginal.prototype.register = function (type, domain, name, port, txtRecord) { return cordova(this, "register", {}, arguments); };
    ZeroconfOriginal.prototype.unregister = function (type, domain, name) { return cordova(this, "unregister", {}, arguments); };
    ZeroconfOriginal.prototype.stop = function () { return cordova(this, "stop", {}, arguments); };
    ZeroconfOriginal.prototype.watch = function (type, domain) { return cordova(this, "watch", { "observable": true, "clearFunction": "unwatch", "clearWithArgs": true }, arguments); };
    ZeroconfOriginal.prototype.unwatch = function (type, domain) { return cordova(this, "unwatch", {}, arguments); };
    ZeroconfOriginal.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    ZeroconfOriginal.prototype.reInit = function () { return cordova(this, "reInit", {}, arguments); };
    ZeroconfOriginal.pluginName = "Zeroconf";
    ZeroconfOriginal.plugin = "cordova-plugin-zeroconf";
    ZeroconfOriginal.pluginRef = "cordova.plugins.zeroconf";
    ZeroconfOriginal.repo = "https://github.com/becvert/cordova-plugin-zeroconf";
    ZeroconfOriginal.platforms = ["Android", "iOS"];
    return ZeroconfOriginal;
}(IonicNativePlugin));
var Zeroconf = new ZeroconfOriginal();
export { Zeroconf };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3plcm9jb25mL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDQSxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0lBMkRKLDRCQUFpQjs7OztJQU03Qyw4QkFBVztJQWNYLDJCQUFRLGFBQ04sSUFBWSxFQUNaLE1BQWMsRUFDZCxJQUFZLEVBQ1osSUFBWSxFQUNaLFNBQWM7SUFhaEIsNkJBQVUsYUFBQyxJQUFZLEVBQUUsTUFBYyxFQUFFLElBQVk7SUFTckQsdUJBQUk7SUFlSix3QkFBSyxhQUFDLElBQVksRUFBRSxNQUFjO0lBV2xDLDBCQUFPLGFBQUMsSUFBWSxFQUFFLE1BQWM7SUFTcEMsd0JBQUs7SUFTTCx5QkFBTTs7Ozs7O21CQXhKUjtFQTZEOEIsaUJBQWlCO1NBQWxDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGludGVyZmFjZSBaZXJvY29uZlNlcnZpY2Uge1xuICBkb21haW46IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIHBvcnQ6IG51bWJlcjtcbiAgaG9zdG5hbWU6IHN0cmluZztcbiAgaXB2NEFkZHJlc3Nlczogc3RyaW5nW107XG4gIGlwdjZBZGRyZXNzZXM6IHN0cmluZ1tdO1xuICB0eHRSZWNvcmQ6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBaZXJvY29uZlJlc3VsdCB7XG4gIGFjdGlvbjogJ3JlZ2lzdGVyZWQnIHwgJ2FkZGVkJyB8ICdyZW1vdmVkJyB8ICdyZXNvbHZlZCc7XG4gIHNlcnZpY2U6IFplcm9jb25mU2VydmljZTtcbn1cblxuLyoqXG4gKiBAbmFtZSBaZXJvY29uZlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBhbGxvd3MgeW91IHRvIGJyb3dzZSBhbmQgcHVibGlzaCBaZXJvY29uZi9Cb25qb3VyL21ETlMgc2VydmljZXMuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFplcm9jb25mIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS96ZXJvY29uZi9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgemVyb2NvbmY6IFplcm9jb25mKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiAvLyB3YXRjaCBmb3Igc2VydmljZXMgb2YgYSBzcGVjaWZpZWQgdHlwZVxuICogdGhpcy56ZXJvY29uZi53YXRjaCgnX2h0dHAuX3RjcC4nLCAnbG9jYWwuJykuc3Vic2NyaWJlKHJlc3VsdCA9PiB7XG4gKiAgIGlmIChyZXN1bHQuYWN0aW9uID09ICdhZGRlZCcpIHtcbiAqICAgICBjb25zb2xlLmxvZygnc2VydmljZSBhZGRlZCcsIHJlc3VsdC5zZXJ2aWNlKTtcbiAqICAgfSBlbHNlIHtcbiAqICAgICBjb25zb2xlLmxvZygnc2VydmljZSByZW1vdmVkJywgcmVzdWx0LnNlcnZpY2UpO1xuICogICB9XG4gKiB9KTtcbiAqXG4gKiAvLyBwdWJsaXNoIGEgemVyb2NvbmYgc2VydmljZSBvZiB5b3VyIG93blxuICogdGhpcy56ZXJvY29uZi5yZWdpc3RlcignX2h0dHAuX3RjcC4nLCAnbG9jYWwuJywgJ0JlY3ZlcnRcXCdzIGlQYWQnLCA4MCwge1xuICogICAnZm9vJzogJ2JhcidcbiAqIH0pLnRoZW4ocmVzdWx0ID0+IHtcbiAqICAgY29uc29sZS5sb2coJ1NlcnZpY2UgcmVnaXN0ZXJlZCcsIHJlc3VsdC5zZXJ2aWNlKTtcbiAqIH0pO1xuICpcbiAqXG4gKiAvLyB1bnJlZ2lzdGVyIHlvdXIgc2VydmljZVxuICogdGhpcy56ZXJvY29uZi51bnJlZ2lzdGVyKCdfaHR0cC5fdGNwLicsICdsb2NhbC4nLCAnQmVjdmVydFxcJ3MgaVBhZCcpO1xuICogYGBgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnWmVyb2NvbmYnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi16ZXJvY29uZicsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy56ZXJvY29uZicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYmVjdmVydC9jb3Jkb3ZhLXBsdWdpbi16ZXJvY29uZicsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFplcm9jb25mIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGlzIGRldmljZSdzIGhvc3RuYW1lLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHN0cmluZz59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGdldEhvc3RuYW1lKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFB1Ymxpc2hlcyBhIG5ldyBzZXJ2aWNlLlxuICAgKiBAcGFyYW0gdHlwZSB7c3RyaW5nfSBTZXJ2aWNlIHR5cGUgbmFtZSwgZS5nLiBcIl9odHRwLl90Y3BcIi5cbiAgICogQHBhcmFtIGRvbWFpbiB7c3RyaW5nfSBEb21haW4gc2NvcGUgb2YgdGhlIHNlcnZpY2UsIHR5cGljYWxseSBcImxvY2FsLlwiLlxuICAgKiBAcGFyYW0gbmFtZSB7c3RyaW5nfSBVbnF1YWxpZmllZCBzZXJ2aWNlIGluc3RhbmNlIG5hbWUuXG4gICAqIEBwYXJhbSBwb3J0IHtudW1iZXJ9IExvY2FsIHBvcnQgb24gd2hpY2ggdGhlIHNlcnZpY2UgcnVucy5cbiAgICogQHBhcmFtIHR4dFJlY29yZCB7YW55fSBBcmJpdHJhcnkga2V5L3ZhbHVlIHBhaXJzIGRlc2NyaWJpbmcgdGhlIHNlcnZpY2UuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8WmVyb2NvbmZSZXN1bHQ+fSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHJlZ2lzdGVyZWQgc2VydmljZS5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVnaXN0ZXIoXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIGRvbWFpbjogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBwb3J0OiBudW1iZXIsXG4gICAgdHh0UmVjb3JkOiBhbnlcbiAgKTogUHJvbWlzZTxaZXJvY29uZlJlc3VsdD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVycyBhIHNlcnZpY2UuXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXG4gICAqIEBwYXJhbSBuYW1lIHtzdHJpbmd9IFVucXVhbGlmaWVkIHNlcnZpY2UgaW5zdGFuY2UgbmFtZS5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdW5yZWdpc3Rlcih0eXBlOiBzdHJpbmcsIGRvbWFpbjogc3RyaW5nLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlcnMgYWxsIHB1Ymxpc2hlZCBzZXJ2aWNlcy5cbiAgICogQHJldHVybiB7UHJvbWlzZTx2b2lkPn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RvcCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHdhdGNoaW5nIGZvciBzZXJ2aWNlcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUuXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXG4gICAqIEByZXR1cm4ge09ic2VydmFibGU8WmVyb2NvbmZSZXN1bHQ+fSBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBub3RpZmllcyBvZiBlYWNoIHNlcnZpY2UgYWRkZWQgb3IgcmVtb3ZlZC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgIGNsZWFyRnVuY3Rpb246ICd1bndhdGNoJyxcbiAgICBjbGVhcldpdGhBcmdzOiB0cnVlXG4gIH0pXG4gIHdhdGNoKHR5cGU6IHN0cmluZywgZG9tYWluOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFplcm9jb25mUmVzdWx0PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3BzIHdhdGNoaW5nIGZvciBzZXJ2aWNlcyBvZiB0aGUgc3BlY2lmaWVkIHR5cGUuXG4gICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFNlcnZpY2UgdHlwZSBuYW1lLCBlLmcuIFwiX2h0dHAuX3RjcFwiLlxuICAgKiBAcGFyYW0gZG9tYWluIHtzdHJpbmd9IERvbWFpbiBzY29wZSBvZiB0aGUgc2VydmljZSwgdHlwaWNhbGx5IFwibG9jYWwuXCIuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVud2F0Y2godHlwZTogc3RyaW5nLCBkb21haW46IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHNlcnZpY2UgYnJvd3NlciBhbmQgc3RvcHMgd2F0Y2hpbmcuXG4gICAqIEByZXR1cm4ge1Byb21pc2U8dm9pZD59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNsb3NlKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZS1pbml0aWFsaXplcyB0aGUgcGx1Z2luIHRvIGNsZWFuIHNlcnZpY2UgJiBicm93c2VyIHN0YXRlLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPHZvaWQ+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZUluaXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8qKlxuICAgKiBGYW1pbHkgb2YgYWRkcmVzc2VzIHRvIHJlZ2lzdGVyOiBpcHY0LCBpcHY2IG9yIGFueS5cbiAgICovXG4gIHJlZ2lzdGVyQWRkcmVzc0ZhbWlseTogJ2lwdjQnIHwgJ2lwdjYnIHwgJ2FueSc7XG4gIC8qKlxuICAgKiBGYW1pbHkgb2YgYWRkcmVzc2VzIHRvIHdhdGNoIGZvcjogaXB2NCwgaXB2NiBvciBhbnkuXG4gICAqL1xuICB3YXRjaEFkZHJlc3NGYW1pbHk6ICdpcHY0JyB8ICdpcHY2JyB8ICdhbnknO1xufVxuIl19