var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, checkAvailability } from '@ionic-native/core';
var AbbyyRTR = /** @class */ (function (_super) {
    __extends(AbbyyRTR, _super);
    function AbbyyRTR() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AbbyyRTR.prototype.startTextCapture = function (options) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new Promise(function (resolve, reject) {
                    AbbyyRtrSdk.startTextCapture(function (result) {
                        if (result.error) {
                            reject(result);
                        }
                        else {
                            resolve(result);
                        }
                    }, options);
                });
            }
        })();
    };
    AbbyyRTR.prototype.startDataCapture = function (options) {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return new Promise(function (resolve, reject) {
                    AbbyyRtrSdk.startDataCapture(function (result) {
                        if (result.error) {
                            reject(result);
                        }
                        else {
                            resolve(result);
                        }
                    }, options);
                });
            }
        })();
    };
    AbbyyRTR.pluginName = "AbbyyRTR";
    AbbyyRTR.plugin = "cordova-plugin-abbyy-rtr-sdk";
    AbbyyRTR.pluginRef = "AbbyyRtrSdk";
    AbbyyRTR.repo = "https://github.com/abbyysdk/RTR-SDK.Cordova";
    AbbyyRTR.install = "ionic cordova plugin add cordova-plugin-abbyy-rtr-sdk";
    AbbyyRTR.platforms = ["Android", "iOS"];
    AbbyyRTR = __decorate([
        Injectable()
    ], AbbyyRTR);
    return AbbyyRTR;
}(IonicNativePlugin));
export { AbbyyRTR };
//# sourceMappingURL=data:application/json;base64,