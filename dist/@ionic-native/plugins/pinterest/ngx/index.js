var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
var Pinterest = /** @class */ (function (_super) {
    __extends(Pinterest, _super);
    function Pinterest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Pinterest.prototype.login = function (scopes) { return cordova(this, "login", {}, arguments); };
    Pinterest.prototype.getMe = function (fields) { return cordova(this, "getMe", { "callbackOrder": "reverse" }, arguments); };
    Pinterest.prototype.getMyPins = function (fields, limit) { return cordova(this, "getMyPins", { "callbackOrder": "reverse" }, arguments); };
    Pinterest.prototype.getMyBoards = function (fields, limit) { return cordova(this, "getMyBoards", { "callbackOrder": "reverse" }, arguments); };
    Pinterest.prototype.getMyLikes = function (fields, limit) { return cordova(this, "getMyLikes", { "callbackOrder": "reverse" }, arguments); };
    Pinterest.prototype.getMyFollowers = function (fields, limit) { return cordova(this, "getMyFollowers", { "callbackOrder": "reverse" }, arguments); };
    Pinterest.prototype.getMyFollowedBoards = function (fields, limit) { return cordova(this, "getMyFollowedBoards", { "callbackOrder": "reverse" }, arguments); };
    Pinterest.prototype.getMyFollowedInterests = function (fields, limit) { return cordova(this, "getMyFollowedInterests", { "callbackOrder": "reverse" }, arguments); };
    Pinterest.prototype.getUser = function (username, fields) { return cordova(this, "getUser", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Pinterest.prototype.getBoard = function (boardId, fields) { return cordova(this, "getBoard", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Pinterest.prototype.getBoardPins = function (boardId, fields, limit) { return cordova(this, "getBoardPins", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Pinterest.prototype.deleteBoard = function (boardId) { return cordova(this, "deleteBoard", {}, arguments); };
    Pinterest.prototype.createBoard = function (name, desc) { return cordova(this, "createBoard", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    Pinterest.prototype.getPin = function (pinId, fields) { return cordova(this, "getPin", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Pinterest.prototype.deletePin = function (pinId) { return cordova(this, "deletePin", {}, arguments); };
    Pinterest.prototype.createPin = function (note, boardId, imageUrl, link) { return cordova(this, "createPin", { "successIndex": 4, "errorIndex": 5 }, arguments); };
    Object.defineProperty(Pinterest.prototype, "SCOPES", {
        get: function () { return cordovaPropertyGet(this, "SCOPES"); },
        set: function (value) { cordovaPropertySet(this, "SCOPES", value); },
        enumerable: true,
        configurable: true
    });
    Pinterest.pluginName = "Pinterest";
    Pinterest.plugin = "cordova-plugin-pinterest";
    Pinterest.pluginRef = "cordova.plugins.Pinterest";
    Pinterest.repo = "https://github.com/zyramedia/cordova-plugin-pinterest";
    Pinterest.install = "ionic cordova plugin add cordova-plugin-pinterest --variable APP_ID=YOUR_APP_ID";
    Pinterest.installVariables = ["APP_ID"];
    Pinterest.platforms = ["Android", "iOS"];
    Pinterest = __decorate([
        Injectable()
    ], Pinterest);
    return Pinterest;
}(IonicNativePlugin));
export { Pinterest };
//# sourceMappingURL=data:application/json;base64,